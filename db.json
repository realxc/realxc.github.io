{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/pasted-0.png","path":"images/pasted-0.png","modified":1,"renderable":0},{"_id":"source/images/pasted-10.png","path":"images/pasted-10.png","modified":1,"renderable":0},{"_id":"source/images/pasted-11.png","path":"images/pasted-11.png","modified":1,"renderable":0},{"_id":"source/images/pasted-14.png","path":"images/pasted-14.png","modified":1,"renderable":0},{"_id":"source/images/pasted-18.png","path":"images/pasted-18.png","modified":1,"renderable":0},{"_id":"source/images/pasted-19.png","path":"images/pasted-19.png","modified":1,"renderable":0},{"_id":"source/images/pasted-2.png","path":"images/pasted-2.png","modified":1,"renderable":0},{"_id":"source/images/pasted-24.png","path":"images/pasted-24.png","modified":1,"renderable":0},{"_id":"source/images/pasted-26.png","path":"images/pasted-26.png","modified":1,"renderable":0},{"_id":"source/images/pasted-27.png","path":"images/pasted-27.png","modified":1,"renderable":0},{"_id":"source/images/pasted-25.png","path":"images/pasted-25.png","modified":1,"renderable":0},{"_id":"source/images/pasted-28.png","path":"images/pasted-28.png","modified":1,"renderable":0},{"_id":"source/images/pasted-29.png","path":"images/pasted-29.png","modified":1,"renderable":0},{"_id":"source/images/pasted-32.png","path":"images/pasted-32.png","modified":1,"renderable":0},{"_id":"source/images/pasted-33.png","path":"images/pasted-33.png","modified":1,"renderable":0},{"_id":"source/images/pasted-34.png","path":"images/pasted-34.png","modified":1,"renderable":0},{"_id":"source/images/pasted-36.png","path":"images/pasted-36.png","modified":1,"renderable":0},{"_id":"source/images/pasted-37.png","path":"images/pasted-37.png","modified":1,"renderable":0},{"_id":"source/images/pasted-39.png","path":"images/pasted-39.png","modified":1,"renderable":0},{"_id":"source/images/pasted-38.png","path":"images/pasted-38.png","modified":1,"renderable":0},{"_id":"source/images/pasted-41.png","path":"images/pasted-41.png","modified":1,"renderable":0},{"_id":"source/images/pasted-42.png","path":"images/pasted-42.png","modified":1,"renderable":0},{"_id":"source/images/pasted-40.png","path":"images/pasted-40.png","modified":1,"renderable":0},{"_id":"source/images/pasted-44.png","path":"images/pasted-44.png","modified":1,"renderable":0},{"_id":"source/images/pasted-43.png","path":"images/pasted-43.png","modified":1,"renderable":0},{"_id":"source/images/pasted-48.png","path":"images/pasted-48.png","modified":1,"renderable":0},{"_id":"source/images/pasted-47.png","path":"images/pasted-47.png","modified":1,"renderable":0},{"_id":"source/images/pasted-45.png","path":"images/pasted-45.png","modified":1,"renderable":0},{"_id":"source/images/pasted-53.png","path":"images/pasted-53.png","modified":1,"renderable":0},{"_id":"source/images/pasted-54.png","path":"images/pasted-54.png","modified":1,"renderable":0},{"_id":"source/images/pasted-55.png","path":"images/pasted-55.png","modified":1,"renderable":0},{"_id":"source/images/pasted-56.png","path":"images/pasted-56.png","modified":1,"renderable":0},{"_id":"source/images/pasted-7.png","path":"images/pasted-7.png","modified":1,"renderable":0},{"_id":"source/images/pasted-74.png","path":"images/pasted-74.png","modified":1,"renderable":0},{"_id":"source/images/pasted-78.png","path":"images/pasted-78.png","modified":1,"renderable":0},{"_id":"source/images/pasted-79.png","path":"images/pasted-79.png","modified":1,"renderable":0},{"_id":"source/images/pasted-8.png","path":"images/pasted-8.png","modified":1,"renderable":0},{"_id":"source/images/pasted-88.png","path":"images/pasted-88.png","modified":1,"renderable":0},{"_id":"source/images/pasted-90.png","path":"images/pasted-90.png","modified":1,"renderable":0},{"_id":"source/images/pasted-91.png","path":"images/pasted-91.png","modified":1,"renderable":0},{"_id":"source/images/pasted-1.png","path":"images/pasted-1.png","modified":1,"renderable":0},{"_id":"source/images/pasted-15.png","path":"images/pasted-15.png","modified":1,"renderable":0},{"_id":"source/images/pasted-16.png","path":"images/pasted-16.png","modified":1,"renderable":0},{"_id":"source/images/pasted-22.png","path":"images/pasted-22.png","modified":1,"renderable":0},{"_id":"source/images/pasted-3.png","path":"images/pasted-3.png","modified":1,"renderable":0},{"_id":"source/images/pasted-30.png","path":"images/pasted-30.png","modified":1,"renderable":0},{"_id":"source/images/pasted-31.png","path":"images/pasted-31.png","modified":1,"renderable":0},{"_id":"source/images/pasted-35.png","path":"images/pasted-35.png","modified":1,"renderable":0},{"_id":"source/images/pasted-4.png","path":"images/pasted-4.png","modified":1,"renderable":0},{"_id":"source/images/pasted-46.png","path":"images/pasted-46.png","modified":1,"renderable":0},{"_id":"source/images/pasted-49.png","path":"images/pasted-49.png","modified":1,"renderable":0},{"_id":"source/images/pasted-52.png","path":"images/pasted-52.png","modified":1,"renderable":0},{"_id":"source/images/pasted-6.png","path":"images/pasted-6.png","modified":1,"renderable":0},{"_id":"source/images/pasted-72.png","path":"images/pasted-72.png","modified":1,"renderable":0},{"_id":"source/images/pasted-81.png","path":"images/pasted-81.png","modified":1,"renderable":0},{"_id":"source/images/pasted-83.png","path":"images/pasted-83.png","modified":1,"renderable":0},{"_id":"source/images/pasted-80.png","path":"images/pasted-80.png","modified":1,"renderable":0},{"_id":"source/images/pasted-82.png","path":"images/pasted-82.png","modified":1,"renderable":0},{"_id":"source/images/pasted-84.png","path":"images/pasted-84.png","modified":1,"renderable":0},{"_id":"source/images/pasted-86.png","path":"images/pasted-86.png","modified":1,"renderable":0},{"_id":"source/images/pasted-89.png","path":"images/pasted-89.png","modified":1,"renderable":0},{"_id":"source/images/pasted-85.png","path":"images/pasted-85.png","modified":1,"renderable":0},{"_id":"source/images/pasted-87.png","path":"images/pasted-87.png","modified":1,"renderable":0},{"_id":"source/images/pasted-12.png","path":"images/pasted-12.png","modified":1,"renderable":0},{"_id":"source/images/pasted-13.png","path":"images/pasted-13.png","modified":1,"renderable":0},{"_id":"source/images/pasted-17.png","path":"images/pasted-17.png","modified":1,"renderable":0},{"_id":"source/images/pasted-63.png","path":"images/pasted-63.png","modified":1,"renderable":0},{"_id":"source/images/pasted-62.png","path":"images/pasted-62.png","modified":1,"renderable":0},{"_id":"source/images/pasted-64.png","path":"images/pasted-64.png","modified":1,"renderable":0},{"_id":"source/images/pasted-65.png","path":"images/pasted-65.png","modified":1,"renderable":0},{"_id":"source/images/pasted-68.png","path":"images/pasted-68.png","modified":1,"renderable":0},{"_id":"source/images/pasted-71.png","path":"images/pasted-71.png","modified":1,"renderable":0},{"_id":"source/images/pasted-70.png","path":"images/pasted-70.png","modified":1,"renderable":0},{"_id":"source/images/pasted-75.png","path":"images/pasted-75.png","modified":1,"renderable":0},{"_id":"source/images/pasted-9.png","path":"images/pasted-9.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/js/affix.js","path":"js/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/scroll-cookie.js","path":"js/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/post-details.js","path":"js/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/exturl.js","path":"js/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/js.cookie.js","path":"js/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/scrollspy.js","path":"js/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"source/images/pasted-51.png","path":"images/pasted-51.png","modified":1,"renderable":0},{"_id":"source/images/pasted-66.png","path":"images/pasted-66.png","modified":1,"renderable":0},{"_id":"source/images/pasted-67.png","path":"images/pasted-67.png","modified":1,"renderable":0},{"_id":"source/images/pasted-69.png","path":"images/pasted-69.png","modified":1,"renderable":0},{"_id":"source/images/pasted-50.png","path":"images/pasted-50.png","modified":1,"renderable":0},{"_id":"source/images/pasted-57.png","path":"images/pasted-57.png","modified":1,"renderable":0},{"_id":"source/images/pasted-95.png","path":"images/pasted-95.png","modified":1,"renderable":0},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"source/images/pasted-59.png","path":"images/pasted-59.png","modified":1,"renderable":0},{"_id":"source/images/pasted-60.png","path":"images/pasted-60.png","modified":1,"renderable":0},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"source/images/pasted-5.png","path":"images/pasted-5.png","modified":1,"renderable":0},{"_id":"source/images/pasted-77.png","path":"images/pasted-77.png","modified":1,"renderable":0},{"_id":"source/images/pasted-94.png","path":"images/pasted-94.png","modified":1,"renderable":0},{"_id":"source/images/pasted-58.png","path":"images/pasted-58.png","modified":1,"renderable":0},{"_id":"source/images/pasted-61.png","path":"images/pasted-61.png","modified":1,"renderable":0},{"_id":"source/images/pasted-76.png","path":"images/pasted-76.png","modified":1,"renderable":0},{"_id":"source/images/pasted-21.png","path":"images/pasted-21.png","modified":1,"renderable":0},{"_id":"source/images/pasted-92.png","path":"images/pasted-92.png","modified":1,"renderable":0},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"source/images/pasted-23.png","path":"images/pasted-23.png","modified":1,"renderable":0},{"_id":"source/images/pasted-73.png","path":"images/pasted-73.png","modified":1,"renderable":0},{"_id":"source/images/pasted-93.png","path":"images/pasted-93.png","modified":1,"renderable":0},{"_id":"source/images/pasted-20.png","path":"images/pasted-20.png","modified":1,"renderable":0},{"_id":"source/images/pasted-97.png","path":"images/pasted-97.png","modified":1,"renderable":0},{"_id":"source/images/pasted-98.png","path":"images/pasted-98.png","modified":1,"renderable":0},{"_id":"source/images/pasted-96.png","path":"images/pasted-96.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/404.html","hash":"307d6eb3e9efdab8b88191bc919aa0df354a5f0c","modified":1569828850835},{"_id":"themes/next/.all-contributorsrc","hash":"d139a3b623b2e40bbff5c96ad44adf7dbdbc5be1","modified":1569828850901},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1569828850902},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1569828850902},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1569828850902},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1569828850902},{"_id":"themes/next/.gitignore","hash":"3558a8b174618c7a643aceb13233edd729813f9a","modified":1569828850904},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1569828850904},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1569828850904},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1569828850904},{"_id":"themes/next/bower.json","hash":"8fa4f26f5205cbc64d33318d1be5d35b2667398c","modified":1569828850904},{"_id":"themes/next/_config.yml","hash":"662667ce917c3c3b845000f54efaf971b35892f7","modified":1569828850904},{"_id":"themes/next/README.md","hash":"7958c3f70b2133b479ddaf525cc4b6d87a37e04a","modified":1569828850904},{"_id":"themes/next/package.json","hash":"888bcacea284ec536a1428ad957a78dfb3ec255d","modified":1569828850919},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1569828850905},{"_id":"themes/next/gulpfile.coffee","hash":"23bd9587807edc4dbecb5c5a29ab96ade24458b5","modified":1569828850907},{"_id":"source/_discarded/hah.md","hash":"784c62256388914bb1c584920a566cbb0967d932","modified":1569829749268},{"_id":"source/_posts/Class及javaagent装载简述.md","hash":"b7ba8425baee66053769b0dbd7253da6c35303d5","modified":1569828850835},{"_id":"source/_posts/G1-Evacuation-Failure.md","hash":"1d931491834a8681eaeebeb861e7708967321f78","modified":1569828850836},{"_id":"source/_posts/G1-Humongous-Allocation.md","hash":"cb245082c6edbff4aa551e19a0ac7d35f6059b9b","modified":1569828850836},{"_id":"source/_posts/G1垃圾回收器-xx-initiatingheapoccupancypercent变量之问.md","hash":"83b5c634a59dea37d31e6221b54652924e46a57a","modified":1569828850836},{"_id":"source/_posts/JVM-类加载.md","hash":"b4927adcac6992a247c2fc606b0bfabb0ad23d18","modified":1569828850836},{"_id":"source/_posts/HttpURLConnection-关于HttpRequestMethodNotSupportedException异常.md","hash":"572f9e24abf90d993487b277deb8c3054121208a","modified":1569828850836},{"_id":"source/_posts/ava-lang-NoClassDefFoundError-Could-not-initialize-class.md","hash":"9b8b206dcfabdbe7ce61f753e31b92c77c92ea79","modified":1569828850836},{"_id":"source/_posts/disruptor为什么那么快.md","hash":"21fcc8b095f0d5e72ea62c53039abcc597d5df5c","modified":1569828850836},{"_id":"source/_posts/druid-filter.md","hash":"6b0d6481132c83c0a72fd20a50647e3d48d1c26f","modified":1569828850836},{"_id":"source/_posts/druid连接的获取与创建.md","hash":"7285d2c1b340935bee4243158afe6aa2608b0327","modified":1569828850836},{"_id":"source/_posts/dubbo-反序列化问题.md","hash":"757eef208ccd4e868dac7eaa89be842c3c52b462","modified":1569828850836},{"_id":"source/_posts/grafana安装及使用.md","hash":"047e4549ee527472c067d7e2531c5524e059fa02","modified":1574669900812},{"_id":"source/_posts/dubbo-基于zookeeper的注册结构.md","hash":"18c802e916c0cd9012d3dcbaccc34d07480b6225","modified":1569828850837},{"_id":"source/_posts/dubbo-（反）序列化.md","hash":"01911d6b23711948c112cfd2992293c6e1b50e4e","modified":1569828850837},{"_id":"source/_posts/elasticsearch-集群.md","hash":"339dfae286a531ac9ce4a7228d6172741b421631","modified":1569828850837},{"_id":"source/_posts/git-本地commit、push、show、reset操作.md","hash":"1a75cad760f7093cbc72d4906a47db8719e3d702","modified":1569828850837},{"_id":"source/_posts/java-对象使用问题案例.md","hash":"1705e9c71017950f096ab52ab4671aacaaa31c90","modified":1569828850837},{"_id":"source/_posts/jdk8-dump异常.md","hash":"d6ebe5f36a671655f896b0f646abea69e2db26a5","modified":1569828850837},{"_id":"source/_posts/javaagent-bytebuddy.md","hash":"09bf7b5f1375f2880c402a7cc8d48a8ed1bef313","modified":1569828850837},{"_id":"source/_posts/linux-tail命令不生效.md","hash":"f9957c652ccd62f6982c4078207ae2032e35d669","modified":1569828850837},{"_id":"source/_posts/maven-Failed-to-execute-goal-org-apache-maven-plugins-maven-enforcer-plugin.md","hash":"2d35e3b8be61cc5873e2b4d292dffca7781decaa","modified":1569828850837},{"_id":"source/_posts/maven-No-plugin-found-for-prefix-tomcat7.md","hash":"4c2a20da8aef760e9d435222c51b579b3f763c3a","modified":1569828850838},{"_id":"source/_posts/maven-Plugin-execution-not-covered-by-lifecycle-configuration.md","hash":"e35c49158d22279f17998d40362672cddd41dc3d","modified":1569828850838},{"_id":"source/_posts/mongo-查询报no-property-found-on.md","hash":"e0f345c7cc165d0b391cc1aad44a1d5d098ec09d","modified":1569828850838},{"_id":"source/_posts/maven-默认jdk版本.md","hash":"7827026d45aa1f3e68bcffc4583fd1446a5c4f21","modified":1569828850838},{"_id":"source/_posts/mysql-TIMESTAMP.md","hash":"90714951f99b642e7a8298a8180fd6835931ae17","modified":1569828850838},{"_id":"source/_posts/rabbitmq-报not-equivalent错.md","hash":"3fcb6b1c02f6301bd17601a2e27eb077f7cb50ca","modified":1569828850838},{"_id":"source/_posts/mysql数据库wait-timeout问题.md","hash":"568bb8fa926cc10ad2222bfa098400998bc3a26f","modified":1569828850838},{"_id":"source/_posts/spring-boot1-3-5支持jsp导致浏览器访问应用偶尔慢.md","hash":"140acdbabbc1af7cf936485943078f5432f99967","modified":1569828850838},{"_id":"source/_posts/struts2-no-action-in-maven.md","hash":"d4a738e0a88577b7e140578a89ea9e0d0f7dc165","modified":1569828850838},{"_id":"source/_posts/zookeeper-反复重连问题.md","hash":"9f98046a00b8758259c245947048fc20c2026f35","modified":1569828850839},{"_id":"source/_posts/springboot-spring-boot-starter-actuator.md","hash":"b9e910d86661b0476cbab31fd8705fa7c0ab50f9","modified":1569828850838},{"_id":"source/_posts/内存泄漏案例分析.md","hash":"1cf2ad46a2a6f2aa722809f2d5d28351bb64384f","modified":1569828850839},{"_id":"source/_posts/围绕dubbo底层原理漫谈微服务.md","hash":"bd99cf541ba1307ebdc525976af1276d63376e04","modified":1569828850839},{"_id":"source/_posts/图片压缩-ImageIO-read-inputStream.md","hash":"dc493f08360168fcd5a665bd7843c81f14aea775","modified":1569828850839},{"_id":"source/_posts/应用停机-优雅停机问题.md","hash":"23dd5934d9d567c25051fe142b0197330adab8a7","modified":1569828850839},{"_id":"source/_posts/数据库-重启引发的主键问题.md","hash":"a576f453170be29410ad339bd4757669c13f3911","modified":1569828850839},{"_id":"source/_posts/数据库-kill服务进程引发的血案.md","hash":"f0931ce0092b8914aa74da8369534ad559d78caa","modified":1569828850839},{"_id":"source/_posts/浏览器-资源加载.md","hash":"fcbbad9287afa2a0178e5d37a80ecf314cc721d1","modified":1569828850840},{"_id":"source/_posts/浅谈JVM之垃圾回收.md","hash":"3d0cf332596c89ae30ec7730b020e3e337cdece3","modified":1569828850840},{"_id":"source/_posts/淘宝架构-进化.md","hash":"64562b0edf5938f3675967ff96cc04d9d4b8c938","modified":1569828850840},{"_id":"source/_posts/谈一谈锁.md","hash":"2a3efdcc40f95a1b0702dab94b2002a0196f83d1","modified":1569828850840},{"_id":"source/schedule/index.md","hash":"b8ee3cfc22a6b456ab1ef31dbbfd60de0ace22a6","modified":1569828850890},{"_id":"source/tags/index.md","hash":"495f8f399569d1316511028c892c45e991bb4cd4","modified":1569828850890},{"_id":"source/categories/index.md","hash":"a459d69045449ba9ab3680cd2d1f64fbfbe36eb7","modified":1569828850840},{"_id":"source/images/pasted-0.png","hash":"3c5bebef8fcf19a8f2c98a88495866b25e28c288","modified":1569828850840},{"_id":"source/images/pasted-10.png","hash":"7c63f1cc32c191cff49ec5bee0634ffebb4d0f41","modified":1569828850841},{"_id":"source/images/pasted-11.png","hash":"0da5839c58d93b98b577b40374630992516397c9","modified":1569828850841},{"_id":"source/images/pasted-14.png","hash":"7d7fa913eef8c753d25b24cd610297be8e979e79","modified":1569828850843},{"_id":"source/images/pasted-18.png","hash":"895e9a3d62baa7c9da9af873b11cf74377ac99a4","modified":1569828850845},{"_id":"source/images/pasted-19.png","hash":"1f045eed6f9ebad8ee4981bb2ac7e571400fa789","modified":1569828850845},{"_id":"source/images/pasted-2.png","hash":"572b64658cfaa1bf0b752a9408821f4133331a5e","modified":1569828850845},{"_id":"source/images/pasted-24.png","hash":"12d854af02c4101e329dcdecd1a3aba33a030f60","modified":1569828850852},{"_id":"source/images/pasted-26.png","hash":"5b5fe3fba7c5b2691e4aca04216d02dabc66cea5","modified":1569828850852},{"_id":"source/images/pasted-27.png","hash":"76ebe1be5de9bc77ba3bded99b0e421a67554dfc","modified":1569828850853},{"_id":"source/images/pasted-25.png","hash":"4b73f1a98581612d407594370e5c5397a5c80d1e","modified":1569828850852},{"_id":"source/images/pasted-28.png","hash":"a334565cd08774738f05af99cd25449b40afeecd","modified":1569828850853},{"_id":"source/images/pasted-29.png","hash":"a334565cd08774738f05af99cd25449b40afeecd","modified":1569828850853},{"_id":"source/images/pasted-32.png","hash":"5da3568c83cdc7f1665806c152f922bd3a260fb5","modified":1569828850855},{"_id":"source/images/pasted-33.png","hash":"0e1a4784aec0a0d49f2cef37b9ced85eae0f19d1","modified":1569828850855},{"_id":"source/images/pasted-34.png","hash":"b6883d450159369476845b3304599b33d55bc25b","modified":1569828850855},{"_id":"source/images/pasted-36.png","hash":"e1d15b97163e3f49aa6fca964e36bfaec20505d7","modified":1569828850855},{"_id":"source/images/pasted-37.png","hash":"a647f6b5f4af9c97b0345064c2e03bed433fb7e5","modified":1569828850856},{"_id":"source/images/pasted-39.png","hash":"8015ae73c4b94397bf2b04bfb833472f89244532","modified":1569828850856},{"_id":"source/images/pasted-38.png","hash":"97f34628fd7816d9daa1e799fcc756bbbca82ad9","modified":1569828850856},{"_id":"source/images/pasted-41.png","hash":"8cfaf01339aae2e46dbf5ce7863086caaeb32b3f","modified":1569828850857},{"_id":"source/images/pasted-42.png","hash":"1b63b44b25fe9690c2a4bff85a2b164ddc191e44","modified":1569828850857},{"_id":"source/images/pasted-40.png","hash":"efc5da95b15c817fd34471f30d13ec7780521514","modified":1569828850857},{"_id":"source/images/pasted-44.png","hash":"ac34c1452a07347421b6cbf52c8f768d3084fa75","modified":1569828850858},{"_id":"source/images/pasted-43.png","hash":"58ede5e6d6feff9b62ae537856c96f87d269aa01","modified":1569828850858},{"_id":"source/images/pasted-48.png","hash":"0afe35569b77ebb8ad4c198203c3dc6937942ad4","modified":1569828850859},{"_id":"source/images/pasted-47.png","hash":"39f267579a50d5fefc1a29ed0383718433ad685a","modified":1569828850859},{"_id":"source/images/pasted-45.png","hash":"540bcd2ecf51702fcf7cfa8aa41eac361e742f2a","modified":1569828850858},{"_id":"source/images/pasted-53.png","hash":"9af4c8c80a9f1316559b9f7e20879443daaf564f","modified":1569828850863},{"_id":"source/images/pasted-54.png","hash":"3e3fece4e90e123648dafc121d8222d70fead0bf","modified":1569828850863},{"_id":"source/images/pasted-55.png","hash":"fdde17b659e2a2a594638d9b9612ac39d5251f10","modified":1569828850863},{"_id":"source/images/pasted-56.png","hash":"1deba22e9e40e5868dc4477130cd8092968209fb","modified":1569828850863},{"_id":"source/images/pasted-7.png","hash":"18d586673d7d12e0b4cb6b0ec7679b995b8d57ae","modified":1569828850873},{"_id":"source/images/pasted-74.png","hash":"3bdade1953defd13b321d950a50ca5c86c43158e","modified":1569828850877},{"_id":"source/images/pasted-78.png","hash":"2b11a4e1ff18042805be90368313d1fc2836c077","modified":1569828850881},{"_id":"source/images/pasted-79.png","hash":"35cd3e00659da093f91b67dcdca1254e170265a0","modified":1569828850881},{"_id":"source/images/pasted-8.png","hash":"553fb1dd618d381332e5e33b0ddcdb9e65e3e8c8","modified":1569828850881},{"_id":"source/images/pasted-88.png","hash":"f8809fa8c8a8031757fada066764cec3f80f30b7","modified":1569828850886},{"_id":"source/images/pasted-90.png","hash":"94c35ffe97aa6bc51b7b9c32e9f2cc7f6ed5ae1e","modified":1569828850887},{"_id":"source/images/pasted-91.png","hash":"7315a6d51e9005f02022ccfb5bfec68ff79f068a","modified":1569828850887},{"_id":"source/about/index.md","hash":"c8afd495383970b99566197b729c5ca773c7d16b","modified":1569828850840},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"285a95aca36e0ac770bcde2b35e3b572d45d1518","modified":1569828850902},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"c149f003d03501565e7688915cd8f2e99fbf8f42","modified":1569828850902},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1569828850902},{"_id":"themes/next/.github/auto_assign.yml","hash":"cb68a1dca1c4623448c2ca899614a9f21df1b036","modified":1569828850903},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"492b2c159d871e5b5d4c70d259f36e603afe192d","modified":1569828850903},{"_id":"themes/next/.github/config.yml","hash":"8a5cbf5aa9529390fe0a782758aca9c3a02f9dcf","modified":1569828850903},{"_id":"themes/next/.github/lock.yml","hash":"585d2c471047be320aa62f2b74dad797bf09c530","modified":1569828850903},{"_id":"themes/next/.github/eslint-disable-bot.yml","hash":"16541fb7b80f5ab90135db96285badb63c4d7d3e","modified":1569828850903},{"_id":"themes/next/.github/mergeable.yml","hash":"8e3a6abc74b5cba57f9586fe6d98762fd4fc9b04","modified":1569828850903},{"_id":"themes/next/.github/release-drafter.yml","hash":"b4476ada5c62ee7d63ba2e59ead2ec4897086e3c","modified":1569828850903},{"_id":"themes/next/.github/stale.yml","hash":"41bf97ee86b8940a0b2e754499ec77fd2b44b717","modified":1569828850903},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1569828850903},{"_id":"themes/next/.github/topissuebot.yml","hash":"10665bf2b5aba351725715c71e94ad183a0e8f18","modified":1569828850904},{"_id":"themes/next/.github/weekly-digest.yml","hash":"404e4ccb7fcd6587bc9b0247a7a7ff256d21f2cb","modified":1569828850904},{"_id":"themes/next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1569828850919},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1569828850919},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"0d2f22ea09dd1ef63c66164e048d8239d2ccb2b8","modified":1569828850905},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1569828850905},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1569828850905},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"212a36d57495990b5f56e46ca8dce1d76c199660","modified":1569828850905},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1569828850905},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1569828850906},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1569828850905},{"_id":"themes/next/docs/MATH.md","hash":"e6023505dcccaef0b856102543585a13fc6af0b1","modified":1569828850906},{"_id":"themes/next/languages/de.yml","hash":"9e524b2bdfb848504b93a51c5650e76bba5fa9e0","modified":1569828850907},{"_id":"themes/next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1569828850908},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1569828850908},{"_id":"themes/next/languages/es.yml","hash":"1752429687861b5cedd063c6ebe5dacefbe7e5a7","modified":1569828850908},{"_id":"themes/next/languages/id.yml","hash":"1c4868837f5109f1df863b04fe627352c31d404b","modified":1569828850908},{"_id":"themes/next/languages/fr.yml","hash":"7005c2b42c2c6e82bd7a1be5cc2f443b5fc79105","modified":1569828850908},{"_id":"themes/next/languages/it.yml","hash":"b30ff77ad8044e3b021a3b09187cd377dc789fd2","modified":1569828850908},{"_id":"themes/next/languages/ko.yml","hash":"20bfaa7600d35235996c18e5c13dcef89c119626","modified":1569828850908},{"_id":"themes/next/languages/nl.yml","hash":"1c44b3cb2f817808607f3bf6ef47f58ce7599995","modified":1569828850908},{"_id":"themes/next/languages/ja.yml","hash":"1dc35e436da6214cdb3c2ff44bc4a06d0be5b9a0","modified":1569828850908},{"_id":"themes/next/languages/pt-BR.yml","hash":"08b913a5cf4cc160083069cb4dfb2d66eecd1218","modified":1569828850908},{"_id":"themes/next/languages/pt.yml","hash":"8ddac820e2c17b484b56c0da8881e142b10e221b","modified":1569828850908},{"_id":"themes/next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1569828850909},{"_id":"themes/next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1569828850909},{"_id":"themes/next/languages/uk.yml","hash":"1eb59e581568da9a81d6e20541b4ada5fc1c55c0","modified":1569828850909},{"_id":"themes/next/languages/zh-CN.yml","hash":"fbbf3a0b664ae8e927c700b0a813692b94345156","modified":1569828850909},{"_id":"themes/next/languages/vi.yml","hash":"ba7aff8f88e03f69a0acf7f1b90ee03e077ee88e","modified":1569828850909},{"_id":"themes/next/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1569828850909},{"_id":"themes/next/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1569828850909},{"_id":"themes/next/layout/_layout.swig","hash":"74701fcf2303d59400587436ab4c244e04df7ad9","modified":1569828850910},{"_id":"themes/next/layout/archive.swig","hash":"7e8f3a41a68e912f2b2aaba905d314306ccaf794","modified":1569828850918},{"_id":"themes/next/layout/category.swig","hash":"dda0e6b2139decaf5e865d22ec9d45fdb615a703","modified":1569828850918},{"_id":"themes/next/layout/index.swig","hash":"c2a3896c64e96790edc10426ef586b6186a87f46","modified":1569828850918},{"_id":"themes/next/layout/page.swig","hash":"d8a6cbf6f611c5d68d5da430cb6dc7010ff2c7e0","modified":1569828850918},{"_id":"themes/next/layout/post.swig","hash":"f74929fd792541916eb25c2addfb35431be071ba","modified":1569828850918},{"_id":"themes/next/layout/schedule.swig","hash":"3268dd3d90d8b0e142cfa1a2ebb23355baeda148","modified":1569828850918},{"_id":"themes/next/layout/tag.swig","hash":"a6be69a90924c9d2f4d90fb4867234859bd2c2e9","modified":1569828850918},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1569828850937},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1569828850937},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1569828850937},{"_id":"source/images/pasted-1.png","hash":"2fa5474ed957c6db8a1706c0dd6f7ebe246fe8ce","modified":1569828850841},{"_id":"source/images/pasted-15.png","hash":"982268d3cc54f70beae137f40c0e829ecc79e267","modified":1569828850843},{"_id":"source/images/pasted-16.png","hash":"4bd7bdf4bb0e335166ca6b73d2519ecde5186c13","modified":1569828850844},{"_id":"source/images/pasted-22.png","hash":"c559fed4f04798d54344a2be9eb426aed2d090cd","modified":1569828850850},{"_id":"source/images/pasted-3.png","hash":"542656a87c61559ba6b9de7d898959ce5b66bf26","modified":1569828850853},{"_id":"source/images/pasted-30.png","hash":"c14c8dc37a7346d34faeec058c2433e2fe6b230d","modified":1569828850854},{"_id":"source/images/pasted-31.png","hash":"34d16af5e5c08ed5d21e4dba6a9f824a38ffdf95","modified":1569828850854},{"_id":"source/images/pasted-35.png","hash":"5cdd93179bbd33c52c5e882e1794c22c2b1ac83e","modified":1569828850855},{"_id":"source/images/pasted-4.png","hash":"f08def5db40d8ced9cdf23d5d0261ecbb0d245c5","modified":1569828850857},{"_id":"source/images/pasted-46.png","hash":"0750ae34c5cd71f65471af8135d2ab204fa189cc","modified":1569828850859},{"_id":"source/images/pasted-49.png","hash":"5fe72327894be154937213278bb11b1518b55a09","modified":1569828850859},{"_id":"source/images/pasted-52.png","hash":"51a45ad8a44ebfab8ca80997109a0fb5b48636b2","modified":1569828850862},{"_id":"source/images/pasted-6.png","hash":"aa86792c3bd66a7ebd57dcf17ab6bdae6fb225f1","modified":1569828850865},{"_id":"source/images/pasted-72.png","hash":"df875e0200cbb1b602927008f8c38780d282137d","modified":1569828850875},{"_id":"source/images/pasted-81.png","hash":"5a9d6133fd4bfe9d3a13dc6113f304e57b994e61","modified":1569828850883},{"_id":"source/images/pasted-83.png","hash":"5726b4f909889a8e4f623d0be3d2d12b17d4843d","modified":1569828850884},{"_id":"source/images/pasted-80.png","hash":"5a9d6133fd4bfe9d3a13dc6113f304e57b994e61","modified":1569828850882},{"_id":"source/images/pasted-82.png","hash":"5726b4f909889a8e4f623d0be3d2d12b17d4843d","modified":1569828850883},{"_id":"source/images/pasted-84.png","hash":"229c81eac1c42191213104127e651373e07fa448","modified":1569828850884},{"_id":"source/images/pasted-86.png","hash":"2e1b172082acca1196b060c6b5f6ddee61be6115","modified":1569828850885},{"_id":"source/images/pasted-89.png","hash":"9b941fd9660b9e8e4ad2eda5f26b6df8d335dfb8","modified":1569828850886},{"_id":"source/images/pasted-85.png","hash":"fe2ba5308626a0bf3e5eeda6bf02b89cd64be246","modified":1569828850884},{"_id":"source/images/pasted-87.png","hash":"8bb6eea25f41a4fd090f27afa10dfc1a8fc80b2a","modified":1569828850886},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1569828850905},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1569828850932},{"_id":"source/images/pasted-12.png","hash":"2b99b4381ba748311a8dd92588cf491a4059b9bc","modified":1569828850842},{"_id":"source/images/pasted-13.png","hash":"2b99b4381ba748311a8dd92588cf491a4059b9bc","modified":1569828850843},{"_id":"source/images/pasted-17.png","hash":"bbcd99aad0b7a56282018978f9557c8aa1c7cfc6","modified":1569828850844},{"_id":"source/images/pasted-63.png","hash":"a826b0f8a6429ec65457d870d1dac716809350a1","modified":1569828850868},{"_id":"source/images/pasted-62.png","hash":"4e72259755fba0a8b1d9f9ce99605d6e195ad6a8","modified":1569828850867},{"_id":"source/images/pasted-64.png","hash":"6660e84279f054a10a2ecebef0fc96050c59518c","modified":1569828850869},{"_id":"source/images/pasted-65.png","hash":"2f813950fc8b41ddf92089e9635a34e78d3683b7","modified":1569828850870},{"_id":"source/images/pasted-68.png","hash":"eef4a8b3e8ee56f95c8b8ff89ff56cdda316006c","modified":1569828850872},{"_id":"source/images/pasted-71.png","hash":"63976f2ebfb713cf2a7f2a7e6ad938184257a76d","modified":1569828850875},{"_id":"source/images/pasted-70.png","hash":"7e20959399a3a2c3d542146497ba2a9e9c835a46","modified":1569828850874},{"_id":"source/images/pasted-75.png","hash":"cf8886ec72d78f57821f0d790246cf3b5e47e90e","modified":1569828850878},{"_id":"source/images/pasted-9.png","hash":"92fb7b9ed14256063d814aeb1c64417999d12529","modified":1569828850887},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c37a60580c901c79ccb22564b228a46e06207445","modified":1569828850902},{"_id":"themes/next/.github/ISSUE_TEMPLATE/custom-issue-template.md","hash":"57e1e06e845193e80c7df4a4454af28352526f7a","modified":1569828850902},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"07c423cce4157b8e2dbf60907ccbf3f18c4cf98a","modified":1569828850903},{"_id":"themes/next/.github/ISSUE_TEMPLATE/non-english.md","hash":"0b0727ff4d5180ae67f930fb4f8e9488e33eda9f","modified":1569828850903},{"_id":"themes/next/scripts/filters/exturl.js","hash":"79ad823ca803cb00e0bfc648aa6c9d59711e0519","modified":1569828850919},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"799a042bbf497a4c7a2981aa2014ff28fa1bb382","modified":1569828850919},{"_id":"themes/next/scripts/helpers/engine.js","hash":"60eb1554456d9d0e5afc4a2d16f1580a0aa02da8","modified":1569828850919},{"_id":"themes/next/scripts/tags/button.js","hash":"f3b4f7ae7e58072bbf410d950a99a0b53cbc866d","modified":1569828850920},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1569828850920},{"_id":"themes/next/scripts/tags/exturl.js","hash":"d605918cf819887e9555212dbe12da97fd887a0b","modified":1569828850920},{"_id":"themes/next/scripts/tags/full-image.js","hash":"fcb41c1c81560ed49dc4024654388a28ee7d32b0","modified":1569828850920},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"598220fa92ff3540dcab74f633ba41523daa8364","modified":1569828850920},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"5db59d56f4f4082382bf1c16722e6c383892b0c5","modified":1569828850920},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1569828850920},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1569828850920},{"_id":"themes/next/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1569828850921},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1569828850921},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1569828850921},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1569828850921},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1569828850906},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1569828850906},{"_id":"themes/next/docs/ru/README.md","hash":"4d7ef717d0b57288e606996ee56c20ffd59d5a99","modified":1569828850906},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1569828850906},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"caa624092175d44e3d3a8c6ca23922718da2354c","modified":1569828850906},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"b218e30df4126b6adc87684775ac4c86ea7f7958","modified":1569828850906},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1569828850907},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"bc43beb3af74d64fbd3920539d08861e4cadb9a0","modified":1569828850907},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1569828850907},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"115ffbde2b3ce01ef1f8c2b3833e6f6794650132","modified":1569828850907},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"5da70d7fa0c988a66a469b9795d33d471a4a4433","modified":1569828850907},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b76ccbc658024e86639cfa5f8a3817647fc8d651","modified":1569828850907},{"_id":"themes/next/docs/zh-CN/README.md","hash":"1b5bd6ae5781137d81dc8667e912d3df6eeab260","modified":1569828850907},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1569828850909},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1569828850909},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1569828850909},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"89b0a0e64637bf5b0cfea0a23642df3d95eedfa4","modified":1569828850910},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"480d93619479dcfcbec6906803bb38b2dfbeae53","modified":1569828850910},{"_id":"themes/next/layout/_macro/post.swig","hash":"10187fafe566b3e5bfa4e7e10c77ea9026d9081d","modified":1569828850910},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"4ccf2abbfd070874265b0436a3eff21f7c998dfb","modified":1569828850915},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"10b61a8bac671e375916a4d234c120117098a78f","modified":1569828850915},{"_id":"themes/next/layout/_third-party/chatra.swig","hash":"eefb68b69b4b0ed558ee0324ccd711990059b20d","modified":1569828850915},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"01ded5e1bad89a6f8d64cd063e3e4e42c20d33bc","modified":1569828850916},{"_id":"themes/next/layout/_third-party/mermaid.swig","hash":"d6e6ddda836bd9e2e8d9767a910c7d3280080e81","modified":1569828850917},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"2c4a66be4677d3e4dec3f169ac8a769098dad1fe","modified":1569828850917},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"c28f9dc96ab735daeb7f599f86470aa5a83c03cf","modified":1569828850917},{"_id":"themes/next/layout/_third-party/pdf.swig","hash":"810a9b2a6059f46c4a2ddb178f1eaa4c5e23750b","modified":1569828850917},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5db80e8d7ea3f29e998320f79508f7e14342a33c","modified":1569828850917},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"cbe40cb67dad15ade967b0f396c1a95b6871f76a","modified":1569828850917},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"2398e5cd0cb466953b6e7a42c2b2caddebf3c348","modified":1569828850917},{"_id":"themes/next/layout/_third-party/tidio.swig","hash":"912368c41de675f458b267a49a99ae3e7e420ebb","modified":1569828850918},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5352f96f4544c1520babf1cec7b44ddf2f8057b3","modified":1569828850910},{"_id":"themes/next/layout/_partials/footer.swig","hash":"07f88421bda86d9d5ff32d130b1cb1196b99a326","modified":1569828850910},{"_id":"themes/next/layout/_partials/github-banner.swig","hash":"6357537ac0bb114aed4d61bafb39e6690a413697","modified":1569828850910},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1569828850911},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"50be1762f60222379a8bef5e42ab1a0f3872b7ff","modified":1569828850913},{"_id":"themes/next/layout/_scripts/exturl.swig","hash":"61ae10d41f67ece004a025077fdb28724af05090","modified":1569828850913},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"06dac109504812b63766a80ede9ddacbd42d227d","modified":1569828850912},{"_id":"themes/next/layout/_scripts/next-boot.swig","hash":"012e3ece672cc3b13d5e032139f328d3426d7d65","modified":1569828850913},{"_id":"themes/next/layout/_scripts/scroll-cookie.swig","hash":"ccd13d73429ef91ef5e8b7d9fa43c8188facdf41","modified":1569828850914},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"83470eb401f78f4683907c48ad6760b90730daa3","modified":1569828850914},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"edaff4766e0c05fd5c889d9dd32884d376bef9d9","modified":1569828850913},{"_id":"themes/next/source/css/main.styl","hash":"e010ec8ac73268a0f137204c89e0080ab8d59b3d","modified":1569828850932},{"_id":"themes/next/source/js/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1569828850934},{"_id":"themes/next/source/js/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1569828850934},{"_id":"themes/next/source/js/next-boot.js","hash":"e0615efab5f81ba0fd39c0527eac31144deac7ce","modified":1569828850934},{"_id":"themes/next/source/js/motion.js","hash":"a16bc0b701646bf6653484675f4d5dc0f892d184","modified":1569828850934},{"_id":"themes/next/source/js/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1569828850935},{"_id":"themes/next/source/js/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1569828850934},{"_id":"themes/next/source/js/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1569828850934},{"_id":"themes/next/source/js/js.cookie.js","hash":"e0afce539f1fb81d59e3c6f0a68d736e2fb45d93","modified":1569828850934},{"_id":"themes/next/source/js/utils.js","hash":"3c987de7cfb944c33e9e527f1214724c7aafc796","modified":1569828850935},{"_id":"themes/next/source/js/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1569828850935},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1569828850932},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1569828850932},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1569828850932},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1569828850932},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1569828850932},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1569828850932},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1569828850932},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1569828850933},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1569828850933},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1569828850933},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1569828850933},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1569828850933},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1569828850933},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1569828850933},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1569828850933},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1569828850933},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1569828850933},{"_id":"themes/next/source/images/searchicon.png","hash":"025d64ba0160a3a2257dd2b3032b5f7c9dd9b82b","modified":1569828850933},{"_id":"source/images/pasted-51.png","hash":"3cfc16acb4552defa33fc0d75fcfc7d6ad8bf991","modified":1569828850862},{"_id":"source/images/pasted-66.png","hash":"11d50c0829aa49841290a327bdb07fa93c5f4d0c","modified":1569828850871},{"_id":"source/images/pasted-67.png","hash":"e81bad45392314c20c8d3685e35d8043f4bc890f","modified":1569828850871},{"_id":"source/images/pasted-69.png","hash":"6eae5d2deb562a15c884ea950175f6e9e114745a","modified":1569828850873},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1569828850931},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1569828850932},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1569828850929},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1569828850929},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1569828850929},{"_id":"source/images/pasted-50.png","hash":"69eedb93a41e66286f300eb3e330b7ad54c7be63","modified":1569828850861},{"_id":"source/images/pasted-57.png","hash":"4579bebdf9fff7ce70063012a5042d45d657e0c3","modified":1569828850864},{"_id":"source/images/pasted-95.png","hash":"24de01c15750fcc463d3456581b94bf1bf9d90d2","modified":1574669094969},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1569828850910},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"fb33f499022cd02722f834fcef1a0e193362cfde","modified":1569828850910},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"a5723950c343d220270bfd27bd30050eda6c3fb3","modified":1569828850914},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"798d67e4a736613ab899eabe6529091bbcda7850","modified":1569828850914},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"591b2ccd9713ccb922b9fcf5e278b6de9c5ec30b","modified":1569828850914},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"8eadb929c9e50e58502ccad2dc2657746f8c592a","modified":1569828850914},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"08cd47ef8572121b7811342d3c9a84a338a18191","modified":1569828850914},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"050ea01f25cfe492be9bb77b409644d623fdf2dc","modified":1569828850914},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"fae69a0e1a1d42f7bb44e594a29857d94594698b","modified":1569828850914},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"d422beaf35a5d2646feaa098bc3e5adf691c7565","modified":1569828850914},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"4a966b7ffe2d80ff1b3dd0fd14b355766dc5c70f","modified":1569828850914},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"438c6f5e6665d72f4ea7ee206011d669246f6102","modified":1569828850914},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"c754f699c90f6278b9159eff1855c17bc713ee96","modified":1569828850915},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"f240a50cd9b627620d9a374a29cf95f0c5e99d7c","modified":1569828850915},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"92e04a2b9e0c3df594bc22235d1894e5ad458dfc","modified":1569828850915},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"0dd5b315d1da55dbfc10f51a1f8952f72eba2720","modified":1569828850915},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a7e304b05a44279d3e4f611908d7faef9dc14d7c","modified":1569828850916},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"c2cb2f384bc30d31cdccf9794a729c03e687b45c","modified":1569828850916},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"601774d8672577aefbcefac82c94b01f0338da31","modified":1569828850917},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"3533167c4295637b91d90f3bae7c651cd128bb6e","modified":1569828850915},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"c77a2e7ef5f449a445fb4d36b055721fba4a81af","modified":1569828850916},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"2cbaae65a020bbb0e9265364488aff8bf84fa48d","modified":1569828850916},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"3cfeafefc672d9a7704650ebfb2f9d8668b38d9a","modified":1569828850916},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"e8f91c571ceb4b80aafebc4d36b89fb41b1ae040","modified":1569828850916},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"388efc86af7f19c05ad0e26720cd24ee012d20b9","modified":1569828850916},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"5856d5f701e51dfae1fd6fb486cefde67effd555","modified":1569828850916},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4a908b613518878b9b69576c5dba4a5185f552ab","modified":1569828850916},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"0a13dfd2de52a96901039098c6fc7b515edfc50b","modified":1569828850917},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"ea94aa85034c6d1b6bb865aecea55c73f8a14501","modified":1569828850918},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b3eaab6a269aa3fcbafe24fd06f0c9206dc12716","modified":1569828850918},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"fc6bafc8c633afadc538c5afa5620ea2a1cdcb84","modified":1569828850911},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"02bb5748e8540b024e7f4008a9e640890b45280f","modified":1569828850911},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1569828850911},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"36eae78a4d7160a1c5e59ca3f7333f00b43d359b","modified":1569828850911},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"648bf7eda66629592cb915c4004534b3913cbc22","modified":1569828850911},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"71af31fea5913fd30c233e555ef13cf2c9768f72","modified":1569828850911},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"5adc60100e129c1d0307bdcaa0c7b8e8375a6ea4","modified":1569828850911},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"0fa4fadb39467b01cede49f21b22e86b1a2da805","modified":1569828850911},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"2940df694fff28e8bf71b6546b4162f1e38227db","modified":1569828850911},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"3615db591dd910fb9fa96542734c7ec0ef05019c","modified":1569828850912},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"eea95b785c9c36d28e1839619793f66e89773bee","modified":1569828850912},{"_id":"themes/next/layout/_partials/post/reward.swig","hash":"d44f025eb93c99ddf90202d8293ccf80689a00c7","modified":1569828850912},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"ef11b5be5bfb2f0affe82cf521c002b37fef9819","modified":1569828850912},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1569828850912},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"7d1693416a5dc098f4723a53da2e2d1fc2d6e075","modified":1569828850912},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1569828850912},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a5587bd1f60d35e58618576cec45e662aa44ea1f","modified":1569828850912},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"15b542f5b06b7532234af367340b9ed9fcebb0ac","modified":1569828850912},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"6f181cc188ecbe5e607fd989756e470d4cb9765d","modified":1569828850913},{"_id":"themes/next/layout/_partials/share/likely.swig","hash":"b45e934d24d76ec6b6a790e92bdb3d56186b0e2a","modified":1569828850913},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0097e45e7b671f8006b8b2d3c4f95cacc76a983c","modified":1569828850913},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ffc8e8836714ea79abeb77b75859634615652877","modified":1569828850913},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"5b05f165547391bf231e52f56f3d925efc09bc44","modified":1569828850913},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"108b157fbd1ac3baaf19ae87234fa8728ab79556","modified":1569828850913},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"e42604fbb17648484e5f12afe230d826de089388","modified":1569828850913},{"_id":"themes/next/source/css/_variables/base.styl","hash":"640f25a63770af5566ccc9cec79c40a4f1c0b29e","modified":1569828850932},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"a8aa41625b94cf17a7f473ed10dcbe683b1db705","modified":1569828850931},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1569828850931},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"fc15e277d1504532a09b7b1bd31f900ad95ec4b8","modified":1569828850931},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1569828850928},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"2036bbb73afd43251982ce824f06c6e88d35a2ef","modified":1569828850929},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1569828850929},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2e8fb29aa92325df39054b5450757858c6cebc41","modified":1569828850929},{"_id":"themes/next/source/js/schemes/muse.js","hash":"e9bfa6b343b67625f58757efce46ccdaac8f308c","modified":1569828850934},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1569828850934},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1569828850936},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1569828850937},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1569828850936},{"_id":"source/images/pasted-59.png","hash":"0362818f13459539382e17dbeb4c89a5436aa2c1","modified":1569828850865},{"_id":"source/images/pasted-60.png","hash":"df2d739232ca94f0aadb66dcb0ee00c1354bdbdd","modified":1569828850866},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1569828850935},{"_id":"source/images/pasted-5.png","hash":"f3b4cea1946a8308ebd0a158fba6badd50b8e061","modified":1569828850860},{"_id":"source/images/pasted-77.png","hash":"0161351bf707e06c019ed2f5d26569fa45e21d40","modified":1569828850880},{"_id":"source/images/pasted-94.png","hash":"590e8bd643395978cafd5d8295b86fdfabac0902","modified":1569828850890},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"c8b3225396cb444d8baeb94bac78e5216b992a81","modified":1569828850921},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"b98c65006e2546fbf3870c16fbbcbc009dbaab15","modified":1569828850921},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1569828850921},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"9d71f34fa13a41b8c8cd2fbdf3fdea608385277c","modified":1569828850921},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"fe5ff961b86004a306778c7d33a85b32e5e00e48","modified":1569828850921},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"ce826aedf42b9eca424a044452f5d193866726a6","modified":1569828850923},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"ce2aae8f3ed8ceac3a2417e0481044cf69c788aa","modified":1569828850925},{"_id":"themes/next/source/css/_common/components/scrollbar.styl","hash":"d7b8bcf2a6031296c84bb4f4ecfb037af01d2d82","modified":1569828850925},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7e51ea64611ab5d678c112b4688d4db4fd2737e2","modified":1569828850928},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"6d900b4159eeb869196a619602578bf4d83a117b","modified":1569828850928},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"8e0740a9ad349ce5555122325da872923135a698","modified":1569828850928},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"7ffde343bdf10add1f052f3c4308a15180eb4404","modified":1569828850928},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1569828850928},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"33456264a74d1bba38264d14713544d67d003733","modified":1569828850928},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"9a2d298dbdcbfd758518fd74b63897bc80ce15a5","modified":1569828850929},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1569828850929},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"24230e46fc9fb7b8551f97bb36e9bc1f7423098e","modified":1569828850929},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1569828850929},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"75d2d92af070eb10273558b2436972d3f12b361c","modified":1569828850929},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"7e62e73d8529f7962ea8d318b4d7df75680ef6ec","modified":1569828850928},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fa33213aceed7bf4bf25437ca9c1a00f7734ae65","modified":1569828850930},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"7359880e8d85312861fe0871f58b662e627dae0c","modified":1569828850930},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a96e46a6ae86c423f932bc2bc78b9f7453e4e4e5","modified":1569828850930},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6565b4a309325596768d0d32e022c80ef23066cb","modified":1569828850930},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"fc160583f742c94316a0fee05c18468033173534","modified":1569828850930},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"1edf4e69d0ec0dc9cefed6c35d3e803e0da4093d","modified":1569828850930},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"7359880e8d85312861fe0871f58b662e627dae0c","modified":1569828850930},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1569828850930},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"57044a6d19eb418c1c3d28787e82c69efa9e0ca6","modified":1569828850931},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"75737591682a2bafa71db4c03fb79e970ac0e7aa","modified":1569828850931},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"b6dac5bbf20f090cf4b67d156f030d7170dfb39c","modified":1569828850931},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"6400c98a9fd2b9a8502269f33355bd7ab3ff793b","modified":1569828850931},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b5b936dddb7b4de4720cd1e8428b30a2f06d63fb","modified":1569828850931},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"232aedbd44243b3b80c4503c947060d3269c1afc","modified":1569828850931},{"_id":"source/images/pasted-58.png","hash":"e83295ea073c15b6e07d66f853bbea4a0d679222","modified":1569828850864},{"_id":"source/images/pasted-61.png","hash":"d0c99730ed8a3d141fcb016e5dea7509584497a7","modified":1569828850867},{"_id":"source/images/pasted-76.png","hash":"60a5a8afca8ee12c8716d099cfa7dd246dda493d","modified":1569828850879},{"_id":"source/images/pasted-21.png","hash":"e31d7b92b0c58faeecdd44c8ad00eeb9a3783e53","modified":1569828850849},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"71d8d1cc22a2a7627a6db7240f0c4902a14f9bea","modified":1569828850923},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"e9dd8de7d98f1478ac7d351624fffd3d8738c905","modified":1569828850923},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1569828850923},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"6904fd7ea6455e008d9884558b68254608af9a3c","modified":1569828850923},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1569828850923},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"2d142c6f39853916256ad8fc79eb6b85f4001ae8","modified":1569828850923},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f1d52954b9a5d1ca8e224382349f525e598dd923","modified":1569828850923},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1569828850923},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"80addb9b725e329915c05c27b9fadaf56457a9b3","modified":1569828850923},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"61ca40856e5cacd48e0fa9728fde4605c7dd4c94","modified":1569828850923},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"6c4990d375b640ee4551e62c48c1cbe4c3d62212","modified":1569828850922},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1569828850922},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"a410ed529afd46ddf4a96ecf0de6599488716887","modified":1569828850922},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"c0d9e18a9210fdcaf33e488518b3b288eb58c0a1","modified":1569828850922},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"cc6ee18f47f2e1e06df6fa0eadb37079e580fd11","modified":1569828850922},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4cfeec9434a72d5efc6ca225d3445d084d4590f7","modified":1569828850922},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1569828850923},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ca97f0b6990eef947039faede80c56d9c4381ee1","modified":1569828850922},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"6a75bb1f2435f4e895cbbb5abbddf6e8f7257804","modified":1569828850924},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"c961d37190d9bec58a36306c7e716c4e72c4582f","modified":1569828850924},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"1385862a5c0bd845015d165aadbd1a6add7b72d7","modified":1569828850924},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"2356226157e8068b0e9bbe2f7d0f74e1ab49199b","modified":1569828850924},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0bf899fab331add63f0c8ead31ca3a3db2ad74d9","modified":1569828850924},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"b082d07b13a3d55b4c032fd351dfa9a4fd74edec","modified":1569828850924},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"496f931e3a7e313ba8088fb91bb20789cace72c9","modified":1569828850924},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1569828850924},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1569828850925},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"8e058c99dd7d41f0bd34c7c28b6ac9fbb17dcb5e","modified":1569828850925},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"d5c8ffed7f2c701052b7a53abaf5ef437374ea72","modified":1569828850925},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"5440013a081201ca791582db98159dce93ea9e75","modified":1569828850924},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a3170630d8e085889a4bdc20eb7f09c5a0479c47","modified":1569828850925},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"3f33bb862c2aa993f54987fbb345da067b79b112","modified":1569828850924},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"a6c24393dffbdd94dd5c01cdbec5e180b0bfbbbd","modified":1569828850925},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"9224b566cd2632f64c1a964e2c786cee93b93286","modified":1569828850925},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"707527c9950a7459355c8abcf4751c0964de0bc1","modified":1569828850925},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"cc83816614f21c7e1d8d3f867d547ff7c658cec4","modified":1569828850925},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-button.styl","hash":"517d541a80d59ad99a3f648be74891e0c7bc72a8","modified":1569828850925},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"9a3bfc878ca797946815bed23cd6f92b24a16358","modified":1569828850926},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"8a24b56524a388fbabd408ffc8ba9b56eb9e01ce","modified":1569828850926},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"c01609176929590f8f347075a9a12b661acd661e","modified":1569828850926},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"8e5c884fb950937afa350c608545455c87aa6129","modified":1569828850926},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"c2d9c3b6fbfa65544e6b5a55d3cb2149df04a8a9","modified":1569828850926},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"967fb3a3c6c851b34ec5df2d945dc266ed63d146","modified":1569828850926},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fc58498d4f5081fcf6218e9e18c5bf2328275bef","modified":1569828850927},{"_id":"themes/next/source/css/_common/components/third-party/copy-code.styl","hash":"688ca3eccc26727d050ad098b32b40934719588a","modified":1569828850927},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"9fac89c8146eb2675721a26f528d7d0f8be7debe","modified":1569828850927},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"ac7753d536341aa824d7bce0332735e838916995","modified":1569828850927},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"f1d9ee1f86a179741f2478f8c70ca11ab578810e","modified":1569828850927},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"ef66c0a08e4243a25e41408d70ca66682b8dcea1","modified":1569828850927},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"7059e24235b7c57a07f3f8abaa06b0bd6a7eda2f","modified":1569828850927},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"03c4fa9573fddd930552784cf484fd2ee7825323","modified":1569828850928},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"58ec00eebe68d0eebd2eea435c710063877447df","modified":1569828850926},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"6ec8ea7b11a146777b6b8da0f71f0cc1dbd129df","modified":1569828850926},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1569828850926},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"d7501ae01fc45fa15b00d1bc5233b9fffa20a3c9","modified":1569828850926},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"21b32840d8b3a14b10770153114778304ba6d1b0","modified":1569828850926},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"fcda60fecff1479adaf6521cf629cda2506337a8","modified":1569828850927},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"cbc0be5a3285b469858ec9ead48e2ea90bd47ae1","modified":1569828850927},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"61466e3e5459960b5802a267751a0c8018918b0b","modified":1569828850927},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"3ae3f3c276d444862033fd3434c632ad0d2f84e6","modified":1569828850928},{"_id":"themes/next/source/css/_common/components/tags/pdf.styl","hash":"da8d34729fb6eb0fcb8ee81e67d2be3c02bc1bc4","modified":1569828850927},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1569828850930},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1569828850930},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1569828850930},{"_id":"source/images/pasted-92.png","hash":"1497f41fb87303ac21a3be744345517e4533c32b","modified":1569828850888},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1569828850936},{"_id":"source/images/pasted-23.png","hash":"9c01c23fd815ffbd134add353fab53e9855254df","modified":1569828850852},{"_id":"source/images/pasted-73.png","hash":"ab091793d0efc9d6799db339265e4f08e63c18e7","modified":1569828850877},{"_id":"source/images/pasted-93.png","hash":"1497f41fb87303ac21a3be744345517e4533c32b","modified":1569828850889},{"_id":"source/images/pasted-20.png","hash":"6853b316e1e526f9bb5805b3bdd2f0260d4f9fe3","modified":1569828850847},{"_id":"source/images/pasted-97.png","hash":"2ec29984a0c8091ca630922f72543db3d0651ef0","modified":1574669165186},{"_id":"source/images/pasted-98.png","hash":"7a5754fcfd22013551d8297df7928d4c049cdf62","modified":1574669198316},{"_id":"source/images/pasted-96.png","hash":"3aaa0e5edaaec676ae377d989ec29641e62e3369","modified":1574669130102},{"_id":"public/404.html","hash":"d1dd4ce2e69b106a1fce4868030f22b4648fbbe9","modified":1574669933859},{"_id":"public/schedule/index.html","hash":"a856e8609520ab7b9a636eb2cac20470916c1405","modified":1574669933859},{"_id":"public/categories/index.html","hash":"e6799ac9a412103d341c04fc08262c0d3c795198","modified":1574669933859},{"_id":"public/about/index.html","hash":"bba5399e076ceb7bef53dc6039d2a708aa30b67a","modified":1574669933859},{"_id":"public/archives/page/5/index.html","hash":"614f120a01b4cb6e76ef853d5163ad086f49fd31","modified":1574669933859},{"_id":"public/archives/2017/09/index.html","hash":"5f4fc6c3eb78f83acecc483f25d3b051910a0456","modified":1574669933859},{"_id":"public/archives/2018/05/index.html","hash":"7dc0be45429f9ed4397163f885919ae203492cf8","modified":1574669933859},{"_id":"public/archives/2018/06/index.html","hash":"716a92bf3b78658190b92c01db7dcd92cc218369","modified":1574669933860},{"_id":"public/archives/2018/08/index.html","hash":"489c6430a03f7aea1a5edb6f387be9181bf31c1a","modified":1574669933860},{"_id":"public/archives/2018/09/index.html","hash":"fff5de12a497649352eca54f5ebf12a0c3e44886","modified":1574669933860},{"_id":"public/archives/2018/10/index.html","hash":"f4f2f8078df16ce9c754871c5ebdf8a60d1f2929","modified":1574669933860},{"_id":"public/archives/2018/11/index.html","hash":"a7e760fac7c96b070f8ab202b84b7384e90b1dc8","modified":1574669933860},{"_id":"public/archives/2018/12/index.html","hash":"b94ef63822c73f39a2e6b1c9f3fe9ac644b5b931","modified":1574669933860},{"_id":"public/archives/2019/01/index.html","hash":"f7150a5ed8ccb6a09a3778cb042ef494db860a52","modified":1574669933860},{"_id":"public/archives/2019/03/index.html","hash":"d9b611081d5e9e4936a0a1977e041e376e8f2e63","modified":1574669933860},{"_id":"public/archives/2019/05/index.html","hash":"880cfc6115847f1b4a415510323eed5e0446c7c9","modified":1574669933860},{"_id":"public/archives/2019/06/index.html","hash":"6025825c707c51b7a6788cfd533b19c76a2be16d","modified":1574669933860},{"_id":"public/archives/2019/07/index.html","hash":"c0b94661e3f7e130c915e61787879e3a5f065a78","modified":1574669933860},{"_id":"public/archives/2019/11/index.html","hash":"514d6584afa7d4f4decd723e4073507614767fb3","modified":1574669933860},{"_id":"public/categories/爱学爱问/page/3/index.html","hash":"22fb4fbafc8c8e79945b3353cabb2cea5ed2e977","modified":1574669933860},{"_id":"public/categories/专题研讨/index.html","hash":"2e1fce4d2ef43c90a288065497f6455a7da79835","modified":1574669933860},{"_id":"public/categories/外部引用/index.html","hash":"19639cb32225c492531d1435de34fa2da1122c93","modified":1574669933860},{"_id":"public/tags/类加载/index.html","hash":"10577a0eb589f25c3fdfdf94ebb282690da1bd7d","modified":1574669933860},{"_id":"public/tags/javaagent/index.html","hash":"cf86347efdbf34876446c5b57e782d4f3f5cbfc1","modified":1574669933860},{"_id":"public/tags/GC-G1/index.html","hash":"92389718d05b00fc5fc0bea636a7bdb8903e2b32","modified":1574669933860},{"_id":"public/tags/GC/index.html","hash":"2e564d396f10a9fc6a0e40eaaa08c803f170af6b","modified":1574669933860},{"_id":"public/tags/HttpURLConnection/index.html","hash":"8e530405b0af0f3fbbb13da482d796e6baa83fbb","modified":1574669933861},{"_id":"public/tags/HttpRequestMethodNotSupportedException/index.html","hash":"a32c61d54509996c1f0ba8c78a682165196e03b7","modified":1574669933861},{"_id":"public/tags/post-get请求/index.html","hash":"7cc10e07ea0b4cfa597705354ee32a3fbea2be40","modified":1574669933861},{"_id":"public/tags/NoClassDefFoundError/index.html","hash":"dc8ade7d01fbb96ade6a267c7388bd9564a40c0e","modified":1574669933861},{"_id":"public/tags/类加载异常/index.html","hash":"f914e96935040dcf9cf2933768eb84db86c34c29","modified":1574669933861},{"_id":"public/tags/disruptor/index.html","hash":"5ea6067780932b6ad7307024a21e85163f2c4254","modified":1574669933861},{"_id":"public/tags/数据库连接池/index.html","hash":"fc4a0a293900d06a2cd85a5623263e5877ae3c23","modified":1574669933861},{"_id":"public/tags/druid/index.html","hash":"3b9c8a16e8cabb6ae3928af2959a08f0e096bbfc","modified":1574669933861},{"_id":"public/tags/连接池/index.html","hash":"fd63135cb0ace2e51b6d3cb14a4e6c4a700376c7","modified":1574669933861},{"_id":"public/tags/序列化/index.html","hash":"b700948365900211de3d8ca6cf75d3518abf0442","modified":1574669933861},{"_id":"public/tags/hessian/index.html","hash":"53a7659e3d874f390b75bdea0453d56c16a81cb3","modified":1574669933861},{"_id":"public/tags/grafana/index.html","hash":"fb5801642b5069afceb9401c911c33a069fd3e84","modified":1574669933861},{"_id":"public/tags/zookeeper/index.html","hash":"b115d6b995dfa6347c3b6dadfe1b89602a8f7226","modified":1574669933861},{"_id":"public/tags/elk/index.html","hash":"8243085cc2b4e3f130aef4f0f5e41854e6fda7b1","modified":1574669933861},{"_id":"public/tags/集群/index.html","hash":"09c43b43afbe3dd0bac1d8ee1f3e7cafd5f58785","modified":1574669933861},{"_id":"public/tags/git/index.html","hash":"a7f3adf345204056d1f6446adc7bd53773581fd8","modified":1574669933861},{"_id":"public/tags/版本控制/index.html","hash":"482023810772fd842fa5c5eaaae229c7b0e4d64f","modified":1574669933861},{"_id":"public/tags/java/index.html","hash":"c0b9daf24f39fa38c978fdc7336d00b0cce01cec","modified":1574669933861},{"_id":"public/tags/java对象/index.html","hash":"c2577084f4a1481773b1ea6dc137fc0404be2341","modified":1574669933861},{"_id":"public/tags/jdk8/index.html","hash":"4e2441511f918863cf4ebcfc15171f9178c0a2e3","modified":1574669933862},{"_id":"public/tags/dump/index.html","hash":"1e26281bbe2fcac09e354d4e95e9d786b0d37f97","modified":1574669933862},{"_id":"public/tags/linux/index.html","hash":"95486d5e96bbab8044fbb0aea2971b2381115069","modified":1574669933862},{"_id":"public/tags/tail/index.html","hash":"a866424b77a3b52777a4501bf3bf632e9318002c","modified":1574669933862},{"_id":"public/tags/mongo/index.html","hash":"310d35eeaacf0537e6b4ba6fdb61cd75119c2a13","modified":1574669933862},{"_id":"public/tags/jdk/index.html","hash":"7907a17bf0bee0bffd32dc8b0340b4a3b955fb3b","modified":1574669933862},{"_id":"public/tags/mysql/index.html","hash":"8bc1fb1d225ab5367b5008ee965c282fe06a311e","modified":1574669933862},{"_id":"public/tags/rabbitmq/index.html","hash":"37c51cd1a45f91e3c7f1e347945f5451a207e908","modified":1574669933862},{"_id":"public/tags/消息队列/index.html","hash":"559bfd1ae37656f53b155c88d85e9abf2b079559","modified":1574669933862},{"_id":"public/tags/struts2/index.html","hash":"7f16bf2250b1cd3b32007138248076c1e3325305","modified":1574669933862},{"_id":"public/tags/spring/index.html","hash":"4d86055a21d77e2da734d129b53e1031ab6d6f94","modified":1574669933862},{"_id":"public/tags/springboot/index.html","hash":"6b6a97b115a8bc66e85243f0af7595d939ee8ea1","modified":1574669933862},{"_id":"public/tags/应用监控检查/index.html","hash":"ae5c7341f7e9d29778d2dab608d6a8fa2874a9e2","modified":1574669933862},{"_id":"public/tags/内存泄漏/index.html","hash":"8c995a8624153c343eefc642cb078a2b54c5209c","modified":1574669933862},{"_id":"public/tags/mat/index.html","hash":"51a2178ece101bf414524067bec40409085f4a59","modified":1574669933862},{"_id":"public/tags/微服务/index.html","hash":"7caa675123328a21ab276ce9b27d7652244043d6","modified":1574669933862},{"_id":"public/tags/优雅停机/index.html","hash":"685efd17859d6381c8d10f8189576918efdd1de7","modified":1574669933862},{"_id":"public/tags/浏览器/index.html","hash":"c2cfe980b5879071e0a6c5162e0bdaacb1445773","modified":1574669933863},{"_id":"public/tags/架构/index.html","hash":"19858b54d39fd50aeed3e5e4c29fe4da3250aebb","modified":1574669933863},{"_id":"public/tags/图片压缩/index.html","hash":"86cba4e5529d783f08caaf827d6e7c242fc5b63f","modified":1574669933863},{"_id":"public/tags/ImageIO/index.html","hash":"cad1fee659bf48d9fe2c1ca670be36f75459e0aa","modified":1574669933863},{"_id":"public/tags/bytebuddy/index.html","hash":"507f5be1a97f6d79ca7534190a928fb92ec6d86a","modified":1574669933863},{"_id":"public/tags/内存调优/index.html","hash":"cfcd596fe196440c3126487a4b574c023e69c1a4","modified":1574669933863},{"_id":"public/tags/垃圾回收/index.html","hash":"66af178e4ba3cfc5612ed3c0f233e63ed5fb2f45","modified":1574669933863},{"_id":"public/tags/spring-boot/index.html","hash":"53c3e79749ba2346f992e364162367aff359690d","modified":1574669933863},{"_id":"public/tags/jsp/index.html","hash":"a14c5a92295c299d74591960c1cd7525918a5b2d","modified":1574669933863},{"_id":"public/tags/index.html","hash":"a1aa37e66f3e7c26370ffd09740dfcb9c4211ca5","modified":1574669933863},{"_id":"public/2019/11/25/grafana安装及使用/index.html","hash":"1b626867ee234fa026fda2b1e4f74029192b4731","modified":1574669933863},{"_id":"public/2019/07/11/mysql数据库wait-timeout问题/index.html","hash":"931b9f0b61c276e2468ab941ad2632c7e33dcd68","modified":1574669933863},{"_id":"public/2019/07/08/spring-boot1-3-5支持jsp导致浏览器访问应用偶尔慢/index.html","hash":"61f0f4b90d5922fa42d0898e822748239ac04354","modified":1574669933863},{"_id":"public/2019/06/05/ava-lang-NoClassDefFoundError-Could-not-initialize-class/index.html","hash":"bb09383390fca137912c66d48da71180a61a8639","modified":1574669933863},{"_id":"public/2019/05/16/HttpURLConnection-关于HttpRequestMethodNotSupportedException异常/index.html","hash":"875e8f2c60ae79701cd3d403a6177e87de0a4e0b","modified":1574669933863},{"_id":"public/2019/05/06/围绕dubbo底层原理漫谈微服务/index.html","hash":"83ae21085fc6ad9f0b58de6c57e45de2ff6ac685","modified":1574669933863},{"_id":"public/2019/04/28/git-本地commit、push、show、reset操作/index.html","hash":"ea3c0c3f2b70971ea291e4e20d03959b8de7b5d4","modified":1574669933863},{"_id":"public/2019/04/11/图片压缩-ImageIO-read-inputStream/index.html","hash":"82e2567a078a261411c3cdff0e7e50ff67e7703d","modified":1574669933863},{"_id":"public/2019/04/10/G1-Evacuation-Failure/index.html","hash":"bdf119d2caa5eaeb6de19aacbc93d9dea6e4272a","modified":1574669933863},{"_id":"public/2019/04/10/G1-Humongous-Allocation/index.html","hash":"3700735ae587f1a5d52ed4333ba2614bdfeb4d40","modified":1574669933864},{"_id":"public/2019/04/09/G1垃圾回收器-xx-initiatingheapoccupancypercent变量之问/index.html","hash":"a82d5eea71bc6ac5c1c509f1d8e4e52fad6b0d89","modified":1574669933864},{"_id":"public/2019/04/08/谈一谈锁/index.html","hash":"1df2afd1bc0fc8cc7d532e5fea8520c270f460a3","modified":1574669933864},{"_id":"public/2019/04/08/浅谈JVM之垃圾回收/index.html","hash":"f6a9203785e871f9a4ba88a1127880e266ba9f3b","modified":1574669933864},{"_id":"public/2019/03/07/dubbo-基于zookeeper的注册结构/index.html","hash":"57dee2689e67454fa8156532c606eb38db852358","modified":1574669933864},{"_id":"public/2019/01/18/druid连接的获取与创建/index.html","hash":"6d3f5e817c54d1fe07e9a84373d217dab9b9ca6f","modified":1574669933864},{"_id":"public/2018/12/07/mongo-查询报no-property-found-on/index.html","hash":"b4f41af158185df8a76ae0a82df4314d36be24e9","modified":1574669933864},{"_id":"public/2018/11/13/disruptor为什么那么快/index.html","hash":"4e91f49c370379ed57d1f1227ba508824174528f","modified":1574669933864},{"_id":"public/2018/11/01/Class及javaagent装载简述/index.html","hash":"ceb66cfe0e9928e41507941c91962831b73ad0b9","modified":1574669933864},{"_id":"public/2018/10/31/javaagent-bytebuddy/index.html","hash":"64ff0ab1c7657a5be7ccd2f31c12d6e26900d5b7","modified":1574669933864},{"_id":"public/2018/09/10/zookeeper-反复重连问题/index.html","hash":"efd7b6b1e00947cbbb94a93b96e4ad5bb34d1690","modified":1574669933864},{"_id":"public/2018/09/10/jdk8-dump异常/index.html","hash":"4a7fb1daa53ca5c4e2b8c3f467446fe510e9a82d","modified":1574669933864},{"_id":"public/2018/08/06/java-对象使用问题案例/index.html","hash":"cd448c06189706f1e56dff904d6370bb0cdf3da3","modified":1574669933864},{"_id":"public/2018/07/30/数据库-kill服务进程引发的血案/index.html","hash":"741a9c932a91f2fb4ef03124bbcdef91ed08bea1","modified":1574669933864},{"_id":"public/2018/07/22/数据库-重启引发的主键问题/index.html","hash":"529ea3702ed5be5abab6fc0316ecdfd6b78ff7bc","modified":1574669933864},{"_id":"public/2018/07/19/rabbitmq-报not-equivalent错/index.html","hash":"71d6089f07a1f2bf765ccf266322dde8d117c3c8","modified":1574669933864},{"_id":"public/2018/07/17/应用停机-优雅停机问题/index.html","hash":"4d92ddcf2bc2f2e67482b1c7b572c95909e9546b","modified":1574669933864},{"_id":"public/2018/07/12/springboot-spring-boot-starter-actuator/index.html","hash":"81a16642cc10d01c21d0b35b84b5cb660a7188d1","modified":1574669933865},{"_id":"public/2018/07/12/druid-filter/index.html","hash":"370a0d7b651b9f08b4a55011b2111e7a116745f8","modified":1574669933865},{"_id":"public/2018/07/09/内存泄漏案例分析/index.html","hash":"d4194f8f911eb31353b5368e0e533255faa901b0","modified":1574669933865},{"_id":"public/2018/06/28/dubbo-反序列化问题/index.html","hash":"45312e6b00300bc263ef9e83de5796179034163c","modified":1574669933865},{"_id":"public/2018/06/12/dubbo-（反）序列化/index.html","hash":"cb49f71ec5eb8b2a2410495e406d54e2cb55e778","modified":1574669933865},{"_id":"public/2018/05/28/JVM-类加载/index.html","hash":"2daaad029182aa14da01e58cfd014b293aca4cfb","modified":1574669933865},{"_id":"public/2017/09/27/elasticsearch-集群/index.html","hash":"0a5aaafad7d824d5d9bb5930e789b5f2cfa62e37","modified":1574669933865},{"_id":"public/2017/07/20/浏览器-资源加载/index.html","hash":"88b8f632f8cf7eafcb33d95a4785c056f4d24ec4","modified":1574669933865},{"_id":"public/2017/07/20/maven-Plugin-execution-not-covered-by-lifecycle-configuration/index.html","hash":"8a7b9d010aed19817debcfabae600d2074993610","modified":1574669933865},{"_id":"public/2017/07/20/struts2-no-action-in-maven/index.html","hash":"4e9c6592379293d09af9431c845945ea49bcd7db","modified":1574669933865},{"_id":"public/2017/07/20/maven-默认jdk版本/index.html","hash":"54fc55ff6d7783fff3e2a55b4280faeeb4c3fb87","modified":1574669933865},{"_id":"public/2017/07/20/maven-No-plugin-found-for-prefix-tomcat7/index.html","hash":"863ca70ab5954ea10aadb6043d366f7a8d83d26c","modified":1574669933865},{"_id":"public/2017/07/20/maven-Failed-to-execute-goal-org-apache-maven-plugins-maven-enforcer-plugin/index.html","hash":"4651d31ba64c223f20cd52c89afc4e25d9e668e1","modified":1574669933865},{"_id":"public/2017/07/20/mysql-TIMESTAMP/index.html","hash":"df6af14ddafd4b6ed72ffe348b3bcad6db49dcf4","modified":1574669933865},{"_id":"public/2017/07/20/linux-tail命令不生效/index.html","hash":"2c50d25fc24a4418cb8f26cf41d134a66330959c","modified":1574669933865},{"_id":"public/2017/07/20/淘宝架构-进化/index.html","hash":"680e0b8ea9df1de38ddf7b9535df90c3c1a5e8a0","modified":1574669933865},{"_id":"public/archives/index.html","hash":"a71a944815e86e82f6e3736379eeaeb130b1d209","modified":1574669933866},{"_id":"public/archives/page/2/index.html","hash":"d6db7531c4c4649c0633f6d475ae026538e243d7","modified":1574669933866},{"_id":"public/archives/page/3/index.html","hash":"3068618937333f963a60b1ccff6d4ad18a989145","modified":1574669933866},{"_id":"public/archives/page/4/index.html","hash":"5a3537f8ab1453d0b4aef593b80dc799b68a1002","modified":1574669933866},{"_id":"public/archives/2017/index.html","hash":"e0d743aa193ba6210f2bf04abcd1d7340d0b0dcc","modified":1574669933866},{"_id":"public/archives/2017/07/index.html","hash":"18cb98a188fc380a9239201c80a2d36203b8e6c2","modified":1574669933866},{"_id":"public/archives/2018/index.html","hash":"d1252498b7751e34cee1b08e168d0de3e56d0a8c","modified":1574669933866},{"_id":"public/archives/2018/page/2/index.html","hash":"4ff08e94a72e9c3235a64852a56825de1f2a7e3b","modified":1574669933866},{"_id":"public/archives/2018/07/index.html","hash":"88d784afc26c5683e8a73120ca43278488b0f6bb","modified":1574669933866},{"_id":"public/archives/2019/index.html","hash":"8a639616563cbe40e2ace70b8fbccb49750fb3ef","modified":1574669933866},{"_id":"public/archives/2019/page/2/index.html","hash":"e5ee14a8d4c68ae5b8fd8df5203b9e2b3dfe1424","modified":1574669933866},{"_id":"public/archives/2019/04/index.html","hash":"f0289b93392970b3a9524a5bb126fc5a48e3c8a7","modified":1574669933866},{"_id":"public/categories/爱学爱问/index.html","hash":"c7f95c9ddf9440d4e380aa572a7d4fffe0ee1b80","modified":1574669933866},{"_id":"public/categories/爱学爱问/page/2/index.html","hash":"d17655e64de684f73d0a91b5273d8ccc70abf504","modified":1574669933866},{"_id":"public/categories/这些年，那些坑/index.html","hash":"c3d9d51e6e27dd23588705cdea817ada40a73d87","modified":1574669933866},{"_id":"public/categories/这些年，那些坑/page/2/index.html","hash":"cd6006b1f2318d4f6b0b54a2a92f71cf335acdec","modified":1574669933866},{"_id":"public/index.html","hash":"5e61047f55ecbc523d7f0baa36fc441e7efb4ef0","modified":1574669933866},{"_id":"public/page/2/index.html","hash":"8d0951c90309f92a5cffa82d5670c2cb30887843","modified":1574669933867},{"_id":"public/page/3/index.html","hash":"a817939f526442c8933d340131ee860371bfb454","modified":1574669933867},{"_id":"public/page/4/index.html","hash":"d19aa34a80dafba2bad442299427a58eb1441d6f","modified":1574669933867},{"_id":"public/page/5/index.html","hash":"b33529deb290743df7b951181e0def508649f46f","modified":1574669933867},{"_id":"public/tags/JVM/index.html","hash":"9d397548f6394e0f7a32a465753c608f40e48a79","modified":1574669933867},{"_id":"public/tags/db/index.html","hash":"3e181f11d76a56c53ece835b3dd4ae12813e7fa2","modified":1574669933867},{"_id":"public/tags/dubbo/index.html","hash":"d4c9759a22535a2050fe85f5c85d93ac3ba3db76","modified":1574669933867},{"_id":"public/tags/maven/index.html","hash":"059cf69b328902fed25e60732f4d7efb4295bda7","modified":1574669933867},{"_id":"public/images/pasted-24.png","hash":"12d854af02c4101e329dcdecd1a3aba33a030f60","modified":1574669933878},{"_id":"public/images/pasted-26.png","hash":"5b5fe3fba7c5b2691e4aca04216d02dabc66cea5","modified":1574669933878},{"_id":"public/images/pasted-19.png","hash":"1f045eed6f9ebad8ee4981bb2ac7e571400fa789","modified":1574669933878},{"_id":"public/images/pasted-27.png","hash":"76ebe1be5de9bc77ba3bded99b0e421a67554dfc","modified":1574669933878},{"_id":"public/images/pasted-18.png","hash":"895e9a3d62baa7c9da9af873b11cf74377ac99a4","modified":1574669933878},{"_id":"public/images/pasted-25.png","hash":"4b73f1a98581612d407594370e5c5397a5c80d1e","modified":1574669933878},{"_id":"public/images/pasted-2.png","hash":"572b64658cfaa1bf0b752a9408821f4133331a5e","modified":1574669933878},{"_id":"public/images/pasted-29.png","hash":"a334565cd08774738f05af99cd25449b40afeecd","modified":1574669933878},{"_id":"public/images/pasted-34.png","hash":"b6883d450159369476845b3304599b33d55bc25b","modified":1574669933878},{"_id":"public/images/pasted-28.png","hash":"a334565cd08774738f05af99cd25449b40afeecd","modified":1574669933879},{"_id":"public/images/pasted-32.png","hash":"5da3568c83cdc7f1665806c152f922bd3a260fb5","modified":1574669933879},{"_id":"public/images/pasted-33.png","hash":"0e1a4784aec0a0d49f2cef37b9ced85eae0f19d1","modified":1574669933879},{"_id":"public/images/pasted-36.png","hash":"e1d15b97163e3f49aa6fca964e36bfaec20505d7","modified":1574669933879},{"_id":"public/images/pasted-39.png","hash":"8015ae73c4b94397bf2b04bfb833472f89244532","modified":1574669933879},{"_id":"public/images/pasted-41.png","hash":"8cfaf01339aae2e46dbf5ce7863086caaeb32b3f","modified":1574669933879},{"_id":"public/images/pasted-37.png","hash":"a647f6b5f4af9c97b0345064c2e03bed433fb7e5","modified":1574669933879},{"_id":"public/images/pasted-40.png","hash":"efc5da95b15c817fd34471f30d13ec7780521514","modified":1574669933879},{"_id":"public/images/pasted-38.png","hash":"97f34628fd7816d9daa1e799fcc756bbbca82ad9","modified":1574669933879},{"_id":"public/images/pasted-42.png","hash":"1b63b44b25fe9690c2a4bff85a2b164ddc191e44","modified":1574669933879},{"_id":"public/images/pasted-44.png","hash":"ac34c1452a07347421b6cbf52c8f768d3084fa75","modified":1574669933880},{"_id":"public/images/pasted-47.png","hash":"39f267579a50d5fefc1a29ed0383718433ad685a","modified":1574669933880},{"_id":"public/images/pasted-48.png","hash":"0afe35569b77ebb8ad4c198203c3dc6937942ad4","modified":1574669933880},{"_id":"public/images/pasted-43.png","hash":"58ede5e6d6feff9b62ae537856c96f87d269aa01","modified":1574669933880},{"_id":"public/images/pasted-53.png","hash":"9af4c8c80a9f1316559b9f7e20879443daaf564f","modified":1574669933880},{"_id":"public/images/pasted-54.png","hash":"3e3fece4e90e123648dafc121d8222d70fead0bf","modified":1574669933880},{"_id":"public/images/pasted-55.png","hash":"fdde17b659e2a2a594638d9b9612ac39d5251f10","modified":1574669933880},{"_id":"public/images/pasted-45.png","hash":"540bcd2ecf51702fcf7cfa8aa41eac361e742f2a","modified":1574669933880},{"_id":"public/images/pasted-74.png","hash":"3bdade1953defd13b321d950a50ca5c86c43158e","modified":1574669933880},{"_id":"public/images/pasted-56.png","hash":"1deba22e9e40e5868dc4477130cd8092968209fb","modified":1574669933880},{"_id":"public/images/pasted-78.png","hash":"2b11a4e1ff18042805be90368313d1fc2836c077","modified":1574669933880},{"_id":"public/images/pasted-8.png","hash":"553fb1dd618d381332e5e33b0ddcdb9e65e3e8c8","modified":1574669933880},{"_id":"public/images/pasted-7.png","hash":"18d586673d7d12e0b4cb6b0ec7679b995b8d57ae","modified":1574669933880},{"_id":"public/images/pasted-91.png","hash":"7315a6d51e9005f02022ccfb5bfec68ff79f068a","modified":1574669933880},{"_id":"public/images/pasted-79.png","hash":"35cd3e00659da093f91b67dcdca1254e170265a0","modified":1574669933880},{"_id":"public/images/pasted-90.png","hash":"94c35ffe97aa6bc51b7b9c32e9f2cc7f6ed5ae1e","modified":1574669933880},{"_id":"public/images/pasted-88.png","hash":"f8809fa8c8a8031757fada066764cec3f80f30b7","modified":1574669933880},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1574669933880},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1574669933881},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1574669933881},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1574669933881},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1574669933881},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1574669933882},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1574669933882},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1574669933882},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1574669933882},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1574669933882},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1574669933882},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1574669933882},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1574669933882},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1574669933883},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1574669933883},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1574669933883},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1574669933883},{"_id":"public/images/searchicon.png","hash":"025d64ba0160a3a2257dd2b3032b5f7c9dd9b82b","modified":1574669933883},{"_id":"public/images/pasted-10.png","hash":"7c63f1cc32c191cff49ec5bee0634ffebb4d0f41","modified":1574669934236},{"_id":"public/images/pasted-14.png","hash":"7d7fa913eef8c753d25b24cd610297be8e979e79","modified":1574669934236},{"_id":"public/images/pasted-0.png","hash":"3c5bebef8fcf19a8f2c98a88495866b25e28c288","modified":1574669934237},{"_id":"public/images/pasted-11.png","hash":"0da5839c58d93b98b577b40374630992516397c9","modified":1574669934237},{"_id":"public/images/pasted-15.png","hash":"982268d3cc54f70beae137f40c0e829ecc79e267","modified":1574669934237},{"_id":"public/images/pasted-1.png","hash":"2fa5474ed957c6db8a1706c0dd6f7ebe246fe8ce","modified":1574669934237},{"_id":"public/images/pasted-16.png","hash":"4bd7bdf4bb0e335166ca6b73d2519ecde5186c13","modified":1574669934237},{"_id":"public/images/pasted-30.png","hash":"c14c8dc37a7346d34faeec058c2433e2fe6b230d","modified":1574669934237},{"_id":"public/images/pasted-22.png","hash":"c559fed4f04798d54344a2be9eb426aed2d090cd","modified":1574669934237},{"_id":"public/images/pasted-3.png","hash":"542656a87c61559ba6b9de7d898959ce5b66bf26","modified":1574669934237},{"_id":"public/images/pasted-31.png","hash":"34d16af5e5c08ed5d21e4dba6a9f824a38ffdf95","modified":1574669934237},{"_id":"public/images/pasted-46.png","hash":"0750ae34c5cd71f65471af8135d2ab204fa189cc","modified":1574669934237},{"_id":"public/images/pasted-49.png","hash":"5fe72327894be154937213278bb11b1518b55a09","modified":1574669934237},{"_id":"public/images/pasted-6.png","hash":"aa86792c3bd66a7ebd57dcf17ab6bdae6fb225f1","modified":1574669934237},{"_id":"public/images/pasted-82.png","hash":"5726b4f909889a8e4f623d0be3d2d12b17d4843d","modified":1574669934238},{"_id":"public/images/pasted-83.png","hash":"5726b4f909889a8e4f623d0be3d2d12b17d4843d","modified":1574669934238},{"_id":"public/images/pasted-84.png","hash":"229c81eac1c42191213104127e651373e07fa448","modified":1574669934238},{"_id":"public/images/pasted-89.png","hash":"9b941fd9660b9e8e4ad2eda5f26b6df8d335dfb8","modified":1574669934238},{"_id":"public/images/pasted-85.png","hash":"fe2ba5308626a0bf3e5eeda6bf02b89cd64be246","modified":1574669934238},{"_id":"public/images/pasted-86.png","hash":"2e1b172082acca1196b060c6b5f6ddee61be6115","modified":1574669934238},{"_id":"public/images/pasted-87.png","hash":"8bb6eea25f41a4fd090f27afa10dfc1a8fc80b2a","modified":1574669934238},{"_id":"public/js/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1574669934245},{"_id":"public/js/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1574669934245},{"_id":"public/js/next-boot.js","hash":"e0615efab5f81ba0fd39c0527eac31144deac7ce","modified":1574669934245},{"_id":"public/js/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1574669934245},{"_id":"public/js/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1574669934245},{"_id":"public/js/js.cookie.js","hash":"e0afce539f1fb81d59e3c6f0a68d736e2fb45d93","modified":1574669934245},{"_id":"public/js/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1574669934245},{"_id":"public/js/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1574669934245},{"_id":"public/js/schemes/muse.js","hash":"e9bfa6b343b67625f58757efce46ccdaac8f308c","modified":1574669934245},{"_id":"public/js/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1574669934245},{"_id":"public/css/main.css","hash":"55456e62cd7f3df62f659c7d89feb83b349c13c6","modified":1574669934245},{"_id":"public/images/pasted-35.png","hash":"5cdd93179bbd33c52c5e882e1794c22c2b1ac83e","modified":1574669934245},{"_id":"public/images/pasted-4.png","hash":"f08def5db40d8ced9cdf23d5d0261ecbb0d245c5","modified":1574669934245},{"_id":"public/images/pasted-52.png","hash":"51a45ad8a44ebfab8ca80997109a0fb5b48636b2","modified":1574669934246},{"_id":"public/images/pasted-72.png","hash":"df875e0200cbb1b602927008f8c38780d282137d","modified":1574669934246},{"_id":"public/images/pasted-80.png","hash":"5a9d6133fd4bfe9d3a13dc6113f304e57b994e61","modified":1574669934246},{"_id":"public/images/pasted-81.png","hash":"5a9d6133fd4bfe9d3a13dc6113f304e57b994e61","modified":1574669934246},{"_id":"public/images/pasted-13.png","hash":"2b99b4381ba748311a8dd92588cf491a4059b9bc","modified":1574669934246},{"_id":"public/images/pasted-12.png","hash":"2b99b4381ba748311a8dd92588cf491a4059b9bc","modified":1574669934246},{"_id":"public/images/pasted-62.png","hash":"4e72259755fba0a8b1d9f9ce99605d6e195ad6a8","modified":1574669934246},{"_id":"public/images/pasted-17.png","hash":"bbcd99aad0b7a56282018978f9557c8aa1c7cfc6","modified":1574669934246},{"_id":"public/images/pasted-75.png","hash":"cf8886ec72d78f57821f0d790246cf3b5e47e90e","modified":1574669934246},{"_id":"public/images/pasted-70.png","hash":"7e20959399a3a2c3d542146497ba2a9e9c835a46","modified":1574669934246},{"_id":"public/images/pasted-68.png","hash":"eef4a8b3e8ee56f95c8b8ff89ff56cdda316006c","modified":1574669934246},{"_id":"public/images/pasted-9.png","hash":"92fb7b9ed14256063d814aeb1c64417999d12529","modified":1574669934247},{"_id":"public/images/pasted-51.png","hash":"3cfc16acb4552defa33fc0d75fcfc7d6ad8bf991","modified":1574669934247},{"_id":"public/images/pasted-66.png","hash":"11d50c0829aa49841290a327bdb07fa93c5f4d0c","modified":1574669934247},{"_id":"public/images/pasted-67.png","hash":"e81bad45392314c20c8d3685e35d8043f4bc890f","modified":1574669934247},{"_id":"public/js/motion.js","hash":"a16bc0b701646bf6653484675f4d5dc0f892d184","modified":1574669934254},{"_id":"public/js/utils.js","hash":"3c987de7cfb944c33e9e527f1214724c7aafc796","modified":1574669934254},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1574669934254},{"_id":"public/images/pasted-63.png","hash":"a826b0f8a6429ec65457d870d1dac716809350a1","modified":1574669934254},{"_id":"public/images/pasted-64.png","hash":"6660e84279f054a10a2ecebef0fc96050c59518c","modified":1574669934254},{"_id":"public/images/pasted-71.png","hash":"63976f2ebfb713cf2a7f2a7e6ad938184257a76d","modified":1574669934254},{"_id":"public/images/pasted-69.png","hash":"6eae5d2deb562a15c884ea950175f6e9e114745a","modified":1574669934254},{"_id":"public/images/pasted-57.png","hash":"4579bebdf9fff7ce70063012a5042d45d657e0c3","modified":1574669934254},{"_id":"public/images/pasted-50.png","hash":"69eedb93a41e66286f300eb3e330b7ad54c7be63","modified":1574669934260},{"_id":"public/images/pasted-95.png","hash":"24de01c15750fcc463d3456581b94bf1bf9d90d2","modified":1574669934260},{"_id":"public/images/pasted-60.png","hash":"df2d739232ca94f0aadb66dcb0ee00c1354bdbdd","modified":1574669934260},{"_id":"public/images/pasted-5.png","hash":"f3b4cea1946a8308ebd0a158fba6badd50b8e061","modified":1574669934261},{"_id":"public/images/pasted-59.png","hash":"0362818f13459539382e17dbeb4c89a5436aa2c1","modified":1574669934265},{"_id":"public/images/pasted-61.png","hash":"d0c99730ed8a3d141fcb016e5dea7509584497a7","modified":1574669934266},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1574669934271},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1574669934271},{"_id":"public/images/pasted-65.png","hash":"2f813950fc8b41ddf92089e9635a34e78d3683b7","modified":1574669934271},{"_id":"public/images/pasted-58.png","hash":"e83295ea073c15b6e07d66f853bbea4a0d679222","modified":1574669934271},{"_id":"public/images/pasted-76.png","hash":"60a5a8afca8ee12c8716d099cfa7dd246dda493d","modified":1574669934280},{"_id":"public/images/pasted-94.png","hash":"590e8bd643395978cafd5d8295b86fdfabac0902","modified":1574669934291},{"_id":"public/images/pasted-77.png","hash":"0161351bf707e06c019ed2f5d26569fa45e21d40","modified":1574669934291},{"_id":"public/images/pasted-73.png","hash":"ab091793d0efc9d6799db339265e4f08e63c18e7","modified":1574669934291},{"_id":"public/images/pasted-21.png","hash":"e31d7b92b0c58faeecdd44c8ad00eeb9a3783e53","modified":1574669934294},{"_id":"public/images/pasted-20.png","hash":"6853b316e1e526f9bb5805b3bdd2f0260d4f9fe3","modified":1574669934294},{"_id":"public/images/pasted-93.png","hash":"1497f41fb87303ac21a3be744345517e4533c32b","modified":1574669934297},{"_id":"public/images/pasted-98.png","hash":"7a5754fcfd22013551d8297df7928d4c049cdf62","modified":1574669934297},{"_id":"public/images/pasted-97.png","hash":"2ec29984a0c8091ca630922f72543db3d0651ef0","modified":1574669934298},{"_id":"public/images/pasted-23.png","hash":"9c01c23fd815ffbd134add353fab53e9855254df","modified":1574669934301},{"_id":"public/images/pasted-92.png","hash":"1497f41fb87303ac21a3be744345517e4533c32b","modified":1574669934302},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1574669934304},{"_id":"public/images/pasted-96.png","hash":"3aaa0e5edaaec676ae377d989ec29641e62e3369","modified":1574669934306},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1574669934309}],"Category":[{"name":"爱学爱问","_id":"ck3e5th240005p9664g78lh1t"},{"name":"这些年，那些坑","_id":"ck3e5th2f000qp9661kwtnqh7"},{"name":"专题研讨","_id":"ck3e5th2x002lp966e2hcvceg"},{"name":"外部引用","_id":"ck3e5th81006bp966y9yznb32"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到首页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到首页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","date":"2019-09-30T07:34:10.835Z","updated":"2019-09-30T07:34:10.835Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"ck3e5th0l0000p966ww7unhkw","content":"<!DOCTYPE HTML>\n<html>\n<head><meta name=\"generator\" content=\"Hexo 3.9.0\">\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到首页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head><meta name=\"generator\" content=\"Hexo 3.9.0\">\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到首页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>"},{"title":"schedule","date":"2019-04-10T06:22:00.000Z","type":"schedule","_content":"","source":"schedule/index.md","raw":"---\ntitle: schedule\ndate: 2019-04-10 14:22:00\ntype: \"schedule\"\n---\n","updated":"2019-09-30T07:34:10.890Z","path":"schedule/index.html","comments":1,"layout":"page","_id":"ck3e5th210002p9665li256yh","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-04-10T05:52:42.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-04-10 13:52:42\ntype: \"tags\"\n---\n","updated":"2019-09-30T07:34:10.890Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck3e5th230004p966ylyu739o","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2019-04-08T09:39:57.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-04-08 17:39:57\ntype: \"categories\"\n---\n","updated":"2019-09-30T07:34:10.840Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck3e5th7g005xp966j86pfohy","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2019-04-10T06:21:37.000Z","type":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-04-10 14:21:37\ntype: \"about\"\n---\n","updated":"2019-09-30T07:34:10.840Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck3e5th7h005zp966lusxl9r0","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"class及javaagent装载简述","author":"Xiang Chuang","date":"2018-11-01T09:18:00.000Z","_content":"场景：有些时候我们想做一个通用的事情，这关系到各个应用系统，如采集应用系统产生的数据，当然，我们不想代码倾入到应用系统中，“偷偷摸摸、神不知鬼不觉”地干这些事，那么，你可以考虑考虑借鉴javaagent的思想在Class类加载期间干点事。\n\n![upload successful](\\images\\pasted-79.png)\n\njavaagent装载阶段预置了transformer\nclass装载阶段读取transformer信息并进行制定的处理\n\n因此，你可以在javaagent中自定义transformer以做你想做的事，如使用bytebuddy代理类（这个代理性能不错，学习成本低，当然如果你熟悉字节码，可以直接asm）\n","source":"_posts/Class及javaagent装载简述.md","raw":"title: class及javaagent装载简述\nauthor: Xiang Chuang\ntags:\n  - 类加载\n  - javaagent\ncategories:\n  - 爱学爱问\ndate: 2018-11-01 17:18:00\n---\n场景：有些时候我们想做一个通用的事情，这关系到各个应用系统，如采集应用系统产生的数据，当然，我们不想代码倾入到应用系统中，“偷偷摸摸、神不知鬼不觉”地干这些事，那么，你可以考虑考虑借鉴javaagent的思想在Class类加载期间干点事。\n\n![upload successful](\\images\\pasted-79.png)\n\njavaagent装载阶段预置了transformer\nclass装载阶段读取transformer信息并进行制定的处理\n\n因此，你可以在javaagent中自定义transformer以做你想做的事，如使用bytebuddy代理类（这个代理性能不错，学习成本低，当然如果你熟悉字节码，可以直接asm）\n","slug":"Class及javaagent装载简述","published":1,"updated":"2019-09-30T07:34:10.835Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3e5th1y0001p966fmrqq58t","content":"<p>场景：有些时候我们想做一个通用的事情，这关系到各个应用系统，如采集应用系统产生的数据，当然，我们不想代码倾入到应用系统中，“偷偷摸摸、神不知鬼不觉”地干这些事，那么，你可以考虑考虑借鉴javaagent的思想在Class类加载期间干点事。</p>\n<p><img src=\"\\images\\pasted-79.png\" alt=\"upload successful\"></p>\n<p>javaagent装载阶段预置了transformer<br>class装载阶段读取transformer信息并进行制定的处理</p>\n<p>因此，你可以在javaagent中自定义transformer以做你想做的事，如使用bytebuddy代理类（这个代理性能不错，学习成本低，当然如果你熟悉字节码，可以直接asm）</p>\n","site":{"data":{}},"excerpt":"","more":"<p>场景：有些时候我们想做一个通用的事情，这关系到各个应用系统，如采集应用系统产生的数据，当然，我们不想代码倾入到应用系统中，“偷偷摸摸、神不知鬼不觉”地干这些事，那么，你可以考虑考虑借鉴javaagent的思想在Class类加载期间干点事。</p>\n<p><img src=\"\\images\\pasted-79.png\" alt=\"upload successful\"></p>\n<p>javaagent装载阶段预置了transformer<br>class装载阶段读取transformer信息并进行制定的处理</p>\n<p>因此，你可以在javaagent中自定义transformer以做你想做的事，如使用bytebuddy代理类（这个代理性能不错，学习成本低，当然如果你熟悉字节码，可以直接asm）</p>\n"},{"title":"G1-Evacuation Failure","author":"Xiang Chuang","date":"2019-04-10T03:56:00.000Z","_content":"当没有更多的空闲region被提升到老一代或者复制到幸存空间时，并且由于堆已经达到最大值，堆不能扩展，从而发生Evacuation Failure。对于G1 GC，它是非常耗时的。 \n\n a.对于成功复制的对象，G1需要更新引用，并且该region被一直引用。\n\n b.对于未成功复制的对象，G1将自动转发它们，并保留这些region。\n\n解决方案：\n\n①.不要过度加一些jvm参数。比如-Xmn,这个参数会限制G1的参数的自动扩展。可以仅使用-Xms，-Xmx和暂停时间目标-XX：MaxGCPauseMillis，删除任何额外的堆大小，例如-Xmn，-XX：NewSize，-XX：MaxNewSize，-XX：SurvivorRatio等。\n\n②.如果问题仍然存在，则增加JVM堆大小（即-Xmx）。\n\n③.如果您无法增加堆大小，并且您注意到marking cycle没有足够早地开始回收老一代，那么请减少-XX：InitiatingHeapOccupancyPercent。默认值是45％。减小该值将提前开始marking cycle 。另一方面，如果marking cycle 提前开始并且未收回，请将-XX：InitiatingHeapOccupancyPercent阈值增加到默认值以上。\n\n④.如果并发marking cycle准时开始，但需要很长时间才能完成，那么使用属性'-XX：ConcGCThreads'增加并发标记线程数的数量。默认是GC Workers: 1 ，单线程执行。\n\n⑤.如果有大量“空间耗尽（to-space exhausted）”或“空间溢出（to-space overflow）”GC事件，则增加-XX:G1ReservePercent。默认值是Java堆的10％。注意：G1 GC将此值限制在50％以内。","source":"_posts/G1-Evacuation-Failure.md","raw":"title: G1-Evacuation Failure\nauthor: Xiang Chuang\ntags:\n  - GC-G1\n  - JVM\n  - GC\ncategories:\n  - 爱学爱问\ndate: 2019-04-10 11:56:00\n---\n当没有更多的空闲region被提升到老一代或者复制到幸存空间时，并且由于堆已经达到最大值，堆不能扩展，从而发生Evacuation Failure。对于G1 GC，它是非常耗时的。 \n\n a.对于成功复制的对象，G1需要更新引用，并且该region被一直引用。\n\n b.对于未成功复制的对象，G1将自动转发它们，并保留这些region。\n\n解决方案：\n\n①.不要过度加一些jvm参数。比如-Xmn,这个参数会限制G1的参数的自动扩展。可以仅使用-Xms，-Xmx和暂停时间目标-XX：MaxGCPauseMillis，删除任何额外的堆大小，例如-Xmn，-XX：NewSize，-XX：MaxNewSize，-XX：SurvivorRatio等。\n\n②.如果问题仍然存在，则增加JVM堆大小（即-Xmx）。\n\n③.如果您无法增加堆大小，并且您注意到marking cycle没有足够早地开始回收老一代，那么请减少-XX：InitiatingHeapOccupancyPercent。默认值是45％。减小该值将提前开始marking cycle 。另一方面，如果marking cycle 提前开始并且未收回，请将-XX：InitiatingHeapOccupancyPercent阈值增加到默认值以上。\n\n④.如果并发marking cycle准时开始，但需要很长时间才能完成，那么使用属性'-XX：ConcGCThreads'增加并发标记线程数的数量。默认是GC Workers: 1 ，单线程执行。\n\n⑤.如果有大量“空间耗尽（to-space exhausted）”或“空间溢出（to-space overflow）”GC事件，则增加-XX:G1ReservePercent。默认值是Java堆的10％。注意：G1 GC将此值限制在50％以内。","slug":"G1-Evacuation-Failure","published":1,"updated":"2019-09-30T07:34:10.836Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3e5th220003p9663y7zx6a0","content":"<p>当没有更多的空闲region被提升到老一代或者复制到幸存空间时，并且由于堆已经达到最大值，堆不能扩展，从而发生Evacuation Failure。对于G1 GC，它是非常耗时的。 </p>\n<p> a.对于成功复制的对象，G1需要更新引用，并且该region被一直引用。</p>\n<p> b.对于未成功复制的对象，G1将自动转发它们，并保留这些region。</p>\n<p>解决方案：</p>\n<p>①.不要过度加一些jvm参数。比如-Xmn,这个参数会限制G1的参数的自动扩展。可以仅使用-Xms，-Xmx和暂停时间目标-XX：MaxGCPauseMillis，删除任何额外的堆大小，例如-Xmn，-XX：NewSize，-XX：MaxNewSize，-XX：SurvivorRatio等。</p>\n<p>②.如果问题仍然存在，则增加JVM堆大小（即-Xmx）。</p>\n<p>③.如果您无法增加堆大小，并且您注意到marking cycle没有足够早地开始回收老一代，那么请减少-XX：InitiatingHeapOccupancyPercent。默认值是45％。减小该值将提前开始marking cycle 。另一方面，如果marking cycle 提前开始并且未收回，请将-XX：InitiatingHeapOccupancyPercent阈值增加到默认值以上。</p>\n<p>④.如果并发marking cycle准时开始，但需要很长时间才能完成，那么使用属性’-XX：ConcGCThreads’增加并发标记线程数的数量。默认是GC Workers: 1 ，单线程执行。</p>\n<p>⑤.如果有大量“空间耗尽（to-space exhausted）”或“空间溢出（to-space overflow）”GC事件，则增加-XX:G1ReservePercent。默认值是Java堆的10％。注意：G1 GC将此值限制在50％以内。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>当没有更多的空闲region被提升到老一代或者复制到幸存空间时，并且由于堆已经达到最大值，堆不能扩展，从而发生Evacuation Failure。对于G1 GC，它是非常耗时的。 </p>\n<p> a.对于成功复制的对象，G1需要更新引用，并且该region被一直引用。</p>\n<p> b.对于未成功复制的对象，G1将自动转发它们，并保留这些region。</p>\n<p>解决方案：</p>\n<p>①.不要过度加一些jvm参数。比如-Xmn,这个参数会限制G1的参数的自动扩展。可以仅使用-Xms，-Xmx和暂停时间目标-XX：MaxGCPauseMillis，删除任何额外的堆大小，例如-Xmn，-XX：NewSize，-XX：MaxNewSize，-XX：SurvivorRatio等。</p>\n<p>②.如果问题仍然存在，则增加JVM堆大小（即-Xmx）。</p>\n<p>③.如果您无法增加堆大小，并且您注意到marking cycle没有足够早地开始回收老一代，那么请减少-XX：InitiatingHeapOccupancyPercent。默认值是45％。减小该值将提前开始marking cycle 。另一方面，如果marking cycle 提前开始并且未收回，请将-XX：InitiatingHeapOccupancyPercent阈值增加到默认值以上。</p>\n<p>④.如果并发marking cycle准时开始，但需要很长时间才能完成，那么使用属性’-XX：ConcGCThreads’增加并发标记线程数的数量。默认是GC Workers: 1 ，单线程执行。</p>\n<p>⑤.如果有大量“空间耗尽（to-space exhausted）”或“空间溢出（to-space overflow）”GC事件，则增加-XX:G1ReservePercent。默认值是Java堆的10％。注意：G1 GC将此值限制在50％以内。</p>\n"},{"title":"G1-Humongous Allocation","author":"Xiang Chuang","date":"2019-04-10T03:56:00.000Z","_content":"它是由'G1 Humongous Allocation'造成的。大型对象（Humongous ）是大于G1中region大小50％的对象。频繁大型对象分配会导致性能问题。如果region里面包含大量的大型对象，则该region中最后一个具有巨型对象的区域与区域末端之间的空间将不会使用。如果有多个这样的大型对象，这个未使用的空间可能导致堆碎片化。直到jdk1.8u40之前，这些巨型对象的回收只在full GC期间完成。在较新的JVM中，对这些对象的清理放在了清理阶段。\n\n解决方案：\n\n①.可以加大region的大小，设置-XX:G1HeapRegionSize=n，但是这个参数需要设置为2的幂次方，最小值是1M，最大值是32M。\n\n②.如果可以的话增加JVM堆大小（即-Xmx -Xms）。","source":"_posts/G1-Humongous-Allocation.md","raw":"title: G1-Humongous Allocation\nauthor: Xiang Chuang\ntags:\n  - GC-G1\n  - JVM\n  - GC\ncategories:\n  - 爱学爱问\ndate: 2019-04-10 11:56:00\n---\n它是由'G1 Humongous Allocation'造成的。大型对象（Humongous ）是大于G1中region大小50％的对象。频繁大型对象分配会导致性能问题。如果region里面包含大量的大型对象，则该region中最后一个具有巨型对象的区域与区域末端之间的空间将不会使用。如果有多个这样的大型对象，这个未使用的空间可能导致堆碎片化。直到jdk1.8u40之前，这些巨型对象的回收只在full GC期间完成。在较新的JVM中，对这些对象的清理放在了清理阶段。\n\n解决方案：\n\n①.可以加大region的大小，设置-XX:G1HeapRegionSize=n，但是这个参数需要设置为2的幂次方，最小值是1M，最大值是32M。\n\n②.如果可以的话增加JVM堆大小（即-Xmx -Xms）。","slug":"G1-Humongous-Allocation","published":1,"updated":"2019-09-30T07:34:10.836Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3e5th260007p966glanqop4","content":"<p>它是由’G1 Humongous Allocation’造成的。大型对象（Humongous ）是大于G1中region大小50％的对象。频繁大型对象分配会导致性能问题。如果region里面包含大量的大型对象，则该region中最后一个具有巨型对象的区域与区域末端之间的空间将不会使用。如果有多个这样的大型对象，这个未使用的空间可能导致堆碎片化。直到jdk1.8u40之前，这些巨型对象的回收只在full GC期间完成。在较新的JVM中，对这些对象的清理放在了清理阶段。</p>\n<p>解决方案：</p>\n<p>①.可以加大region的大小，设置-XX:G1HeapRegionSize=n，但是这个参数需要设置为2的幂次方，最小值是1M，最大值是32M。</p>\n<p>②.如果可以的话增加JVM堆大小（即-Xmx -Xms）。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>它是由’G1 Humongous Allocation’造成的。大型对象（Humongous ）是大于G1中region大小50％的对象。频繁大型对象分配会导致性能问题。如果region里面包含大量的大型对象，则该region中最后一个具有巨型对象的区域与区域末端之间的空间将不会使用。如果有多个这样的大型对象，这个未使用的空间可能导致堆碎片化。直到jdk1.8u40之前，这些巨型对象的回收只在full GC期间完成。在较新的JVM中，对这些对象的清理放在了清理阶段。</p>\n<p>解决方案：</p>\n<p>①.可以加大region的大小，设置-XX:G1HeapRegionSize=n，但是这个参数需要设置为2的幂次方，最小值是1M，最大值是32M。</p>\n<p>②.如果可以的话增加JVM堆大小（即-Xmx -Xms）。</p>\n"},{"title":"JVM-类加载","author":"Xiang Chuang","date":"2018-05-28T02:08:00.000Z","_content":"![upload successful](\\images\\pasted-50.png)\n\n\n![upload successful](\\images\\pasted-51.png)\n\n![upload successful](\\images\\pasted-52.png)\n\n![upload successful](\\images\\pasted-53.png)","source":"_posts/JVM-类加载.md","raw":"title: JVM-类加载\nauthor: Xiang Chuang\ntags:\n  - JVM\n  - 类加载\ncategories:\n  - 爱学爱问\ndate: 2018-05-28 10:08:00\n---\n![upload successful](\\images\\pasted-50.png)\n\n\n![upload successful](\\images\\pasted-51.png)\n\n![upload successful](\\images\\pasted-52.png)\n\n![upload successful](\\images\\pasted-53.png)","slug":"JVM-类加载","published":1,"updated":"2019-09-30T07:34:10.836Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3e5th270008p966e43kl769","content":"<p><img src=\"\\images\\pasted-50.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-51.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-52.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-53.png\" alt=\"upload successful\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"\\images\\pasted-50.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-51.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-52.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-53.png\" alt=\"upload successful\"></p>\n"},{"title":"HttpURLConnection-关于HttpRequestMethodNotSupportedException异常","author":"Xiang Chuang","date":"2019-05-16T13:37:00.000Z","_content":"背景：提供场景化业务监控能力时，需要通过捕获到的异常流水gid直接跳转到apm进行链路信息查询。\n\n方案：调用apm提供的gid翻译为traceId方法，该能力是基于spring mvc提供，并且是https协议。godeye中利用HttpURLConnection封装post及get方法进行调用：\n```\nURL realUrl = new URL(url);\n            HttpURLConnection conn = (HttpURLConnection )realUrl.openConnection();\n            conn.setRequestProperty(\"accept\", \"*/*\");\n            conn.setRequestProperty(\"connection\", \"Keep-Alive\");\n            conn.setRequestProperty(\"user-agent\", \"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)\");\n            conn.setRequestMethod(\"POST\");\n            conn.setRequestProperty(\"Accept-Charset\", \"UTF-8\");\n            conn.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n            conn.setRequestProperty(\"Content-Length\", String.valueOf(param.length()));\n\n            conn.setDoOutput(true);\n            conn.setDoInput(true);\n            out = new OutputStreamWriter(conn.getOutputStream(),DEFAULT_UNICODE);\n            out.write(param);\n            out.flush();\n            read = new BufferedReader(new InputStreamReader(conn.getInputStream(),DEFAULT_UNICODE));\n            String line;\n            while ((line = read.readLine()) != null) {\n                result += line;\n            }\n            ```\n问题：完成功能后测试时发现出现结果如下：{\"timestamp\":\"2019-05-16 21:36:11\",\"status\":200,\"error\":\"OK\",\"exception\":\"org.springframework.web.HttpRequestMethodNotSupportedException\",\"message\":\"Request method 'POST' not supported\",\"path\":\"/gidQuery\"}\n\n百思不得其解，度娘了相关错误，指出了很多可能引起该问题的原因。\n\n后发现问题出现在：\n```\n1、conn.setRequestMethod(\"POST\");及\n2、conn.setDoOutput(true);\n            conn.setDoInput(true);\n            out = new 3、OutputStreamWriter(conn.getOutputStream(),DEFAULT_UNICODE);\n            out.write(param);\n            out.flush();\n```\n删除2、3这几行代码后，同时1改为conn.setRequestMethod(\"GET\")，执行正常。\n","source":"_posts/HttpURLConnection-关于HttpRequestMethodNotSupportedException异常.md","raw":"title: HttpURLConnection-关于HttpRequestMethodNotSupportedException异常\nauthor: Xiang Chuang\ntags:\n  - HttpURLConnection\n  - HttpRequestMethodNotSupportedException\n  - post/get请求\ncategories:\n  - 爱学爱问\ndate: 2019-05-16 21:37:00\n---\n背景：提供场景化业务监控能力时，需要通过捕获到的异常流水gid直接跳转到apm进行链路信息查询。\n\n方案：调用apm提供的gid翻译为traceId方法，该能力是基于spring mvc提供，并且是https协议。godeye中利用HttpURLConnection封装post及get方法进行调用：\n```\nURL realUrl = new URL(url);\n            HttpURLConnection conn = (HttpURLConnection )realUrl.openConnection();\n            conn.setRequestProperty(\"accept\", \"*/*\");\n            conn.setRequestProperty(\"connection\", \"Keep-Alive\");\n            conn.setRequestProperty(\"user-agent\", \"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)\");\n            conn.setRequestMethod(\"POST\");\n            conn.setRequestProperty(\"Accept-Charset\", \"UTF-8\");\n            conn.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n            conn.setRequestProperty(\"Content-Length\", String.valueOf(param.length()));\n\n            conn.setDoOutput(true);\n            conn.setDoInput(true);\n            out = new OutputStreamWriter(conn.getOutputStream(),DEFAULT_UNICODE);\n            out.write(param);\n            out.flush();\n            read = new BufferedReader(new InputStreamReader(conn.getInputStream(),DEFAULT_UNICODE));\n            String line;\n            while ((line = read.readLine()) != null) {\n                result += line;\n            }\n            ```\n问题：完成功能后测试时发现出现结果如下：{\"timestamp\":\"2019-05-16 21:36:11\",\"status\":200,\"error\":\"OK\",\"exception\":\"org.springframework.web.HttpRequestMethodNotSupportedException\",\"message\":\"Request method 'POST' not supported\",\"path\":\"/gidQuery\"}\n\n百思不得其解，度娘了相关错误，指出了很多可能引起该问题的原因。\n\n后发现问题出现在：\n```\n1、conn.setRequestMethod(\"POST\");及\n2、conn.setDoOutput(true);\n            conn.setDoInput(true);\n            out = new 3、OutputStreamWriter(conn.getOutputStream(),DEFAULT_UNICODE);\n            out.write(param);\n            out.flush();\n```\n删除2、3这几行代码后，同时1改为conn.setRequestMethod(\"GET\")，执行正常。\n","slug":"HttpURLConnection-关于HttpRequestMethodNotSupportedException异常","published":1,"updated":"2019-09-30T07:34:10.836Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3e5th280009p966k1e1kajg","content":"<p>背景：提供场景化业务监控能力时，需要通过捕获到的异常流水gid直接跳转到apm进行链路信息查询。</p>\n<p>方案：调用apm提供的gid翻译为traceId方法，该能力是基于spring mvc提供，并且是https协议。godeye中利用HttpURLConnection封装post及get方法进行调用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL realUrl = new URL(url);</span><br><span class=\"line\">            HttpURLConnection conn = (HttpURLConnection )realUrl.openConnection();</span><br><span class=\"line\">            conn.setRequestProperty(&quot;accept&quot;, &quot;*/*&quot;);</span><br><span class=\"line\">            conn.setRequestProperty(&quot;connection&quot;, &quot;Keep-Alive&quot;);</span><br><span class=\"line\">            conn.setRequestProperty(&quot;user-agent&quot;, &quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)&quot;);</span><br><span class=\"line\">            conn.setRequestMethod(&quot;POST&quot;);</span><br><span class=\"line\">            conn.setRequestProperty(&quot;Accept-Charset&quot;, &quot;UTF-8&quot;);</span><br><span class=\"line\">            conn.setRequestProperty(&quot;Content-Type&quot;, &quot;application/json;charset=UTF-8&quot;);</span><br><span class=\"line\">            conn.setRequestProperty(&quot;Content-Length&quot;, String.valueOf(param.length()));</span><br><span class=\"line\"></span><br><span class=\"line\">            conn.setDoOutput(true);</span><br><span class=\"line\">            conn.setDoInput(true);</span><br><span class=\"line\">            out = new OutputStreamWriter(conn.getOutputStream(),DEFAULT_UNICODE);</span><br><span class=\"line\">            out.write(param);</span><br><span class=\"line\">            out.flush();</span><br><span class=\"line\">            read = new BufferedReader(new InputStreamReader(conn.getInputStream(),DEFAULT_UNICODE));</span><br><span class=\"line\">            String line;</span><br><span class=\"line\">            while ((line = read.readLine()) != null) &#123;</span><br><span class=\"line\">                result += line;</span><br><span class=\"line\">            &#125;</span><br></pre></td></tr></table></figure></p>\n<p>问题：完成功能后测试时发现出现结果如下：{“timestamp”:”2019-05-16 21:36:11”,”status”:200,”error”:”OK”,”exception”:”org.springframework.web.HttpRequestMethodNotSupportedException”,”message”:”Request method ‘POST’ not supported”,”path”:”/gidQuery”}</p>\n<p>百思不得其解，度娘了相关错误，指出了很多可能引起该问题的原因。</p>\n<p>后发现问题出现在：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、conn.setRequestMethod(&quot;POST&quot;);及</span><br><span class=\"line\">2、conn.setDoOutput(true);</span><br><span class=\"line\">            conn.setDoInput(true);</span><br><span class=\"line\">            out = new 3、OutputStreamWriter(conn.getOutputStream(),DEFAULT_UNICODE);</span><br><span class=\"line\">            out.write(param);</span><br><span class=\"line\">            out.flush();</span><br></pre></td></tr></table></figure></p>\n<p>删除2、3这几行代码后，同时1改为conn.setRequestMethod(“GET”)，执行正常。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>背景：提供场景化业务监控能力时，需要通过捕获到的异常流水gid直接跳转到apm进行链路信息查询。</p>\n<p>方案：调用apm提供的gid翻译为traceId方法，该能力是基于spring mvc提供，并且是https协议。godeye中利用HttpURLConnection封装post及get方法进行调用：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">URL realUrl = new URL(url);</span><br><span class=\"line\">            HttpURLConnection conn = (HttpURLConnection )realUrl.openConnection();</span><br><span class=\"line\">            conn.setRequestProperty(&quot;accept&quot;, &quot;*/*&quot;);</span><br><span class=\"line\">            conn.setRequestProperty(&quot;connection&quot;, &quot;Keep-Alive&quot;);</span><br><span class=\"line\">            conn.setRequestProperty(&quot;user-agent&quot;, &quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)&quot;);</span><br><span class=\"line\">            conn.setRequestMethod(&quot;POST&quot;);</span><br><span class=\"line\">            conn.setRequestProperty(&quot;Accept-Charset&quot;, &quot;UTF-8&quot;);</span><br><span class=\"line\">            conn.setRequestProperty(&quot;Content-Type&quot;, &quot;application/json;charset=UTF-8&quot;);</span><br><span class=\"line\">            conn.setRequestProperty(&quot;Content-Length&quot;, String.valueOf(param.length()));</span><br><span class=\"line\"></span><br><span class=\"line\">            conn.setDoOutput(true);</span><br><span class=\"line\">            conn.setDoInput(true);</span><br><span class=\"line\">            out = new OutputStreamWriter(conn.getOutputStream(),DEFAULT_UNICODE);</span><br><span class=\"line\">            out.write(param);</span><br><span class=\"line\">            out.flush();</span><br><span class=\"line\">            read = new BufferedReader(new InputStreamReader(conn.getInputStream(),DEFAULT_UNICODE));</span><br><span class=\"line\">            String line;</span><br><span class=\"line\">            while ((line = read.readLine()) != null) &#123;</span><br><span class=\"line\">                result += line;</span><br><span class=\"line\">            &#125;</span><br></pre></td></tr></table></figure></p>\n<p>问题：完成功能后测试时发现出现结果如下：{“timestamp”:”2019-05-16 21:36:11”,”status”:200,”error”:”OK”,”exception”:”org.springframework.web.HttpRequestMethodNotSupportedException”,”message”:”Request method ‘POST’ not supported”,”path”:”/gidQuery”}</p>\n<p>百思不得其解，度娘了相关错误，指出了很多可能引起该问题的原因。</p>\n<p>后发现问题出现在：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、conn.setRequestMethod(&quot;POST&quot;);及</span><br><span class=\"line\">2、conn.setDoOutput(true);</span><br><span class=\"line\">            conn.setDoInput(true);</span><br><span class=\"line\">            out = new 3、OutputStreamWriter(conn.getOutputStream(),DEFAULT_UNICODE);</span><br><span class=\"line\">            out.write(param);</span><br><span class=\"line\">            out.flush();</span><br></pre></td></tr></table></figure></p>\n<p>删除2、3这几行代码后，同时1改为conn.setRequestMethod(“GET”)，执行正常。</p>\n"},{"title":"java.lang.NoClassDefFoundError: Could not initialize class","author":"Xiang Chuang","date":"2019-06-05T12:42:00.000Z","_content":"问题描述：项目启动没问题，运行也没有问题，但是当运行到某个静态工具类的时候，出问题了，且没有异常， 抛出的是NoClassDefFoundError\n\n经分析：原因为静态类第一次被使用，尚未加载到虚拟机，使用时加载并编译，但static块中代码有异常，导致类加载失败，从而抛出此Error\n\n```\npublic class LogTool {\n\t\n\tpublic static boolean isPrint = true;\n\tstatic {\n\t\tif (System.getProperty(\"spring.profiles.active\").equals(\"local\")\n\t\t\t|| System.getProperty(\"spring.profiles.active\").equals(\"pdev\")\n\t\t\t|| System.getProperty(\"spring.profiles.active\").equals(\"sdev\")) {\n\t\t\tisPrint = true;\n\t\t}\n\t}\n```","source":"_posts/ava-lang-NoClassDefFoundError-Could-not-initialize-class.md","raw":"title: 'java.lang.NoClassDefFoundError: Could not initialize class'\nauthor: Xiang Chuang\ntags:\n  - NoClassDefFoundError\n  - 类加载异常\ncategories:\n  - 爱学爱问\ndate: 2019-06-05 20:42:00\n---\n问题描述：项目启动没问题，运行也没有问题，但是当运行到某个静态工具类的时候，出问题了，且没有异常， 抛出的是NoClassDefFoundError\n\n经分析：原因为静态类第一次被使用，尚未加载到虚拟机，使用时加载并编译，但static块中代码有异常，导致类加载失败，从而抛出此Error\n\n```\npublic class LogTool {\n\t\n\tpublic static boolean isPrint = true;\n\tstatic {\n\t\tif (System.getProperty(\"spring.profiles.active\").equals(\"local\")\n\t\t\t|| System.getProperty(\"spring.profiles.active\").equals(\"pdev\")\n\t\t\t|| System.getProperty(\"spring.profiles.active\").equals(\"sdev\")) {\n\t\t\tisPrint = true;\n\t\t}\n\t}\n```","slug":"ava-lang-NoClassDefFoundError-Could-not-initialize-class","published":1,"updated":"2019-09-30T07:34:10.836Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3e5th2a000cp966v8j68aor","content":"<p>问题描述：项目启动没问题，运行也没有问题，但是当运行到某个静态工具类的时候，出问题了，且没有异常， 抛出的是NoClassDefFoundError</p>\n<p>经分析：原因为静态类第一次被使用，尚未加载到虚拟机，使用时加载并编译，但static块中代码有异常，导致类加载失败，从而抛出此Error</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class LogTool &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static boolean isPrint = true;</span><br><span class=\"line\">\tstatic &#123;</span><br><span class=\"line\">\t\tif (System.getProperty(&quot;spring.profiles.active&quot;).equals(&quot;local&quot;)</span><br><span class=\"line\">\t\t\t|| System.getProperty(&quot;spring.profiles.active&quot;).equals(&quot;pdev&quot;)</span><br><span class=\"line\">\t\t\t|| System.getProperty(&quot;spring.profiles.active&quot;).equals(&quot;sdev&quot;)) &#123;</span><br><span class=\"line\">\t\t\tisPrint = true;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>问题描述：项目启动没问题，运行也没有问题，但是当运行到某个静态工具类的时候，出问题了，且没有异常， 抛出的是NoClassDefFoundError</p>\n<p>经分析：原因为静态类第一次被使用，尚未加载到虚拟机，使用时加载并编译，但static块中代码有异常，导致类加载失败，从而抛出此Error</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class LogTool &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic static boolean isPrint = true;</span><br><span class=\"line\">\tstatic &#123;</span><br><span class=\"line\">\t\tif (System.getProperty(&quot;spring.profiles.active&quot;).equals(&quot;local&quot;)</span><br><span class=\"line\">\t\t\t|| System.getProperty(&quot;spring.profiles.active&quot;).equals(&quot;pdev&quot;)</span><br><span class=\"line\">\t\t\t|| System.getProperty(&quot;spring.profiles.active&quot;).equals(&quot;sdev&quot;)) &#123;</span><br><span class=\"line\">\t\t\tisPrint = true;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>"},{"title":"disruptor为什么那么快","author":"Xiang Chuang","date":"2018-11-13T09:05:00.000Z","_content":"disruptor可用于线程间数据交互\n详细参考文章http://ifeve.com/disruptor/\n\n概述一下为什么那么快（这将有利于你借鉴思想）\n1、私有序列号，它是AtomicLong类型的，基于CAS（cpu级指令），因此没有锁\n2、缓存行填充，避免伪共享（一个缓存行64字节，对应8个long）\n   伪共享：多个线程修改相互独立的变量时，如果它们位于同一个缓存行，则         会影响性能\n    java8：@Contended（自动填充缓存行），\n        但需要jvm参数-XX:RestrictContended\n   注意，缓存行的填充是以存储换性能。。。\n3、内存屏障 volatile   \n   \n","source":"_posts/disruptor为什么那么快.md","raw":"title: disruptor为什么那么快\nauthor: Xiang Chuang\ntags:\n  - disruptor\ncategories:\n  - 爱学爱问\ndate: 2018-11-13 17:05:00\n---\ndisruptor可用于线程间数据交互\n详细参考文章http://ifeve.com/disruptor/\n\n概述一下为什么那么快（这将有利于你借鉴思想）\n1、私有序列号，它是AtomicLong类型的，基于CAS（cpu级指令），因此没有锁\n2、缓存行填充，避免伪共享（一个缓存行64字节，对应8个long）\n   伪共享：多个线程修改相互独立的变量时，如果它们位于同一个缓存行，则         会影响性能\n    java8：@Contended（自动填充缓存行），\n        但需要jvm参数-XX:RestrictContended\n   注意，缓存行的填充是以存储换性能。。。\n3、内存屏障 volatile   \n   \n","slug":"disruptor为什么那么快","published":1,"updated":"2019-09-30T07:34:10.836Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3e5th2b000dp9668dn55cj0","content":"<p>disruptor可用于线程间数据交互<br>详细参考文章<a href=\"http://ifeve.com/disruptor/\" target=\"_blank\" rel=\"noopener\">http://ifeve.com/disruptor/</a></p>\n<p>概述一下为什么那么快（这将有利于你借鉴思想）<br>1、私有序列号，它是AtomicLong类型的，基于CAS（cpu级指令），因此没有锁<br>2、缓存行填充，避免伪共享（一个缓存行64字节，对应8个long）<br>   伪共享：多个线程修改相互独立的变量时，如果它们位于同一个缓存行，则         会影响性能<br>    java8：@Contended（自动填充缓存行），<br>        但需要jvm参数-XX:RestrictContended<br>   注意，缓存行的填充是以存储换性能。。。<br>3、内存屏障 volatile   </p>\n","site":{"data":{}},"excerpt":"","more":"<p>disruptor可用于线程间数据交互<br>详细参考文章<a href=\"http://ifeve.com/disruptor/\" target=\"_blank\" rel=\"noopener\">http://ifeve.com/disruptor/</a></p>\n<p>概述一下为什么那么快（这将有利于你借鉴思想）<br>1、私有序列号，它是AtomicLong类型的，基于CAS（cpu级指令），因此没有锁<br>2、缓存行填充，避免伪共享（一个缓存行64字节，对应8个long）<br>   伪共享：多个线程修改相互独立的变量时，如果它们位于同一个缓存行，则         会影响性能<br>    java8：@Contended（自动填充缓存行），<br>        但需要jvm参数-XX:RestrictContended<br>   注意，缓存行的填充是以存储换性能。。。<br>3、内存屏障 volatile   </p>\n"},{"title":"druid-filter","author":"Xiang Chuang","date":"2018-07-12T06:02:00.000Z","_content":"com.alibaba.druid.filter.Filter\n过滤器，对数据库操作做切面代理\n\norg.apache.ibatis.session.SqlSession\norg.mybatis.spring.SqlSessionTemplate#sqlSessionProxy\ncom.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@3fadc0bd(DataSourceUtils.getConnection(this.dataSource);)\ncom.alibaba.druid.pool.DruidPooledPreparedStatement（createChain().preparedStatement_execute(this);）       \ncom.alibaba.druid.filter.FilterEventAdapter\ncom.yiji.common.ds.druid.YijiStatFilter（易极付实现）","source":"_posts/druid-filter.md","raw":"title: druid-filter\nauthor: Xiang Chuang\ntags:\n  - 数据库连接池\n  - db\n  - druid\ncategories:\n  - 爱学爱问\ndate: 2018-07-12 14:02:00\n---\ncom.alibaba.druid.filter.Filter\n过滤器，对数据库操作做切面代理\n\norg.apache.ibatis.session.SqlSession\norg.mybatis.spring.SqlSessionTemplate#sqlSessionProxy\ncom.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@3fadc0bd(DataSourceUtils.getConnection(this.dataSource);)\ncom.alibaba.druid.pool.DruidPooledPreparedStatement（createChain().preparedStatement_execute(this);）       \ncom.alibaba.druid.filter.FilterEventAdapter\ncom.yiji.common.ds.druid.YijiStatFilter（易极付实现）","slug":"druid-filter","published":1,"updated":"2019-09-30T07:34:10.836Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3e5th2d000hp9663dsevwv7","content":"<p>com.alibaba.druid.filter.Filter<br>过滤器，对数据库操作做切面代理</p>\n<p>org.apache.ibatis.session.SqlSession<br>org.mybatis.spring.SqlSessionTemplate#sqlSessionProxy<br>com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@3fadc0bd(DataSourceUtils.getConnection(this.dataSource);)<br>com.alibaba.druid.pool.DruidPooledPreparedStatement（createChain().preparedStatement_execute(this);）<br>com.alibaba.druid.filter.FilterEventAdapter<br>com.yiji.common.ds.druid.YijiStatFilter（易极付实现）</p>\n","site":{"data":{}},"excerpt":"","more":"<p>com.alibaba.druid.filter.Filter<br>过滤器，对数据库操作做切面代理</p>\n<p>org.apache.ibatis.session.SqlSession<br>org.mybatis.spring.SqlSessionTemplate#sqlSessionProxy<br>com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@3fadc0bd(DataSourceUtils.getConnection(this.dataSource);)<br>com.alibaba.druid.pool.DruidPooledPreparedStatement（createChain().preparedStatement_execute(this);）<br>com.alibaba.druid.filter.FilterEventAdapter<br>com.yiji.common.ds.druid.YijiStatFilter（易极付实现）</p>\n"},{"title":"druid连接的获取与创建","author":"Xiang Chuang","date":"2019-01-18T11:49:00.000Z","_content":"背景：服务器闪断时，druid连接池获取异常，且重试时间较长\n经分析原因如下：\n1、应用申请连接时，传入允许等待时间为10S\n2、由于服务器闪断，瞬时出现部分线程A申请连接时，连接池中无空闲连接，因此A发出创建请求并等待（创建完成及返回连接，否则等待10s后返回失败）\n3、线程A触发创建连接的线程，开始创建连接，此时可能创建失败，会30S后重新尝试创建\n4、线程A同时会触发守护线程等待的信号量，守护线程接收到创建连接的信号量，也会开始创建连接，此时可能创建失败，会30S后重新尝试创建\n    \n影响：\n如果业务量不大，创建连接慢（或者创建失败），会引起部分线程执行慢\n如果业务量过大，且创建连接慢（或者创建失败），会导致线程积压从而导致内存消耗殆尽引起应用假死\n\n\n![upload successful](\\images\\pasted-75.png)\n\n别人画的图：\n\n![upload successful](\\images\\pasted-76.png)\n![upload successful](\\images\\pasted-77.png)","source":"_posts/druid连接的获取与创建.md","raw":"title: druid连接的获取与创建\nauthor: Xiang Chuang\ntags:\n  - druid\n  - 连接池\ncategories:\n  - 这些年，那些坑\ndate: 2019-01-18 19:49:00\n---\n背景：服务器闪断时，druid连接池获取异常，且重试时间较长\n经分析原因如下：\n1、应用申请连接时，传入允许等待时间为10S\n2、由于服务器闪断，瞬时出现部分线程A申请连接时，连接池中无空闲连接，因此A发出创建请求并等待（创建完成及返回连接，否则等待10s后返回失败）\n3、线程A触发创建连接的线程，开始创建连接，此时可能创建失败，会30S后重新尝试创建\n4、线程A同时会触发守护线程等待的信号量，守护线程接收到创建连接的信号量，也会开始创建连接，此时可能创建失败，会30S后重新尝试创建\n    \n影响：\n如果业务量不大，创建连接慢（或者创建失败），会引起部分线程执行慢\n如果业务量过大，且创建连接慢（或者创建失败），会导致线程积压从而导致内存消耗殆尽引起应用假死\n\n\n![upload successful](\\images\\pasted-75.png)\n\n别人画的图：\n\n![upload successful](\\images\\pasted-76.png)\n![upload successful](\\images\\pasted-77.png)","slug":"druid连接的获取与创建","published":1,"updated":"2019-09-30T07:34:10.836Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3e5th2e000kp966tjwkwbek","content":"<p>背景：服务器闪断时，druid连接池获取异常，且重试时间较长<br>经分析原因如下：<br>1、应用申请连接时，传入允许等待时间为10S<br>2、由于服务器闪断，瞬时出现部分线程A申请连接时，连接池中无空闲连接，因此A发出创建请求并等待（创建完成及返回连接，否则等待10s后返回失败）<br>3、线程A触发创建连接的线程，开始创建连接，此时可能创建失败，会30S后重新尝试创建<br>4、线程A同时会触发守护线程等待的信号量，守护线程接收到创建连接的信号量，也会开始创建连接，此时可能创建失败，会30S后重新尝试创建</p>\n<p>影响：<br>如果业务量不大，创建连接慢（或者创建失败），会引起部分线程执行慢<br>如果业务量过大，且创建连接慢（或者创建失败），会导致线程积压从而导致内存消耗殆尽引起应用假死</p>\n<p><img src=\"\\images\\pasted-75.png\" alt=\"upload successful\"></p>\n<p>别人画的图：</p>\n<p><img src=\"\\images\\pasted-76.png\" alt=\"upload successful\"><br><img src=\"\\images\\pasted-77.png\" alt=\"upload successful\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>背景：服务器闪断时，druid连接池获取异常，且重试时间较长<br>经分析原因如下：<br>1、应用申请连接时，传入允许等待时间为10S<br>2、由于服务器闪断，瞬时出现部分线程A申请连接时，连接池中无空闲连接，因此A发出创建请求并等待（创建完成及返回连接，否则等待10s后返回失败）<br>3、线程A触发创建连接的线程，开始创建连接，此时可能创建失败，会30S后重新尝试创建<br>4、线程A同时会触发守护线程等待的信号量，守护线程接收到创建连接的信号量，也会开始创建连接，此时可能创建失败，会30S后重新尝试创建</p>\n<p>影响：<br>如果业务量不大，创建连接慢（或者创建失败），会引起部分线程执行慢<br>如果业务量过大，且创建连接慢（或者创建失败），会导致线程积压从而导致内存消耗殆尽引起应用假死</p>\n<p><img src=\"\\images\\pasted-75.png\" alt=\"upload successful\"></p>\n<p>别人画的图：</p>\n<p><img src=\"\\images\\pasted-76.png\" alt=\"upload successful\"><br><img src=\"\\images\\pasted-77.png\" alt=\"upload successful\"></p>\n"},{"title":"dubbo-反序列化问题","author":"Xiang Chuang","date":"2018-06-28T04:14:00.000Z","_content":"问题：网银充值，支付引擎调用清算调用网关，网关响应清算，清算响应支付引擎（支付引擎解析时出现反序列化异常）\n\n原因分析：清算配置了yiji.dubbo.provider.serialization=hessian3，即传输时使用hessian3序列化、反序列化\n，但是支付引擎使用的hessian2.  使用hessian2反序列化hessian3序列化出了问题\n\n但是清算反序列化网关为什么没有问题，  3反序列化2做了兼容？还是说，本身就是用的2反序列化2.  如果时2反序列化2，那么即使支付引擎配置成3，那岂不又成了2反序列化3？   所以应该是兼容吧！！！！","source":"_posts/dubbo-反序列化问题.md","raw":"title: dubbo-反序列化问题\nauthor: Xiang Chuang\ntags:\n  - dubbo\n  - 序列化\n  - hessian\ncategories:\n  - 这些年，那些坑\ndate: 2018-06-28 12:14:00\n---\n问题：网银充值，支付引擎调用清算调用网关，网关响应清算，清算响应支付引擎（支付引擎解析时出现反序列化异常）\n\n原因分析：清算配置了yiji.dubbo.provider.serialization=hessian3，即传输时使用hessian3序列化、反序列化\n，但是支付引擎使用的hessian2.  使用hessian2反序列化hessian3序列化出了问题\n\n但是清算反序列化网关为什么没有问题，  3反序列化2做了兼容？还是说，本身就是用的2反序列化2.  如果时2反序列化2，那么即使支付引擎配置成3，那岂不又成了2反序列化3？   所以应该是兼容吧！！！！","slug":"dubbo-反序列化问题","published":1,"updated":"2019-09-30T07:34:10.836Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3e5th2f000op966jatq26aw","content":"<p>问题：网银充值，支付引擎调用清算调用网关，网关响应清算，清算响应支付引擎（支付引擎解析时出现反序列化异常）</p>\n<p>原因分析：清算配置了yiji.dubbo.provider.serialization=hessian3，即传输时使用hessian3序列化、反序列化<br>，但是支付引擎使用的hessian2.  使用hessian2反序列化hessian3序列化出了问题</p>\n<p>但是清算反序列化网关为什么没有问题，  3反序列化2做了兼容？还是说，本身就是用的2反序列化2.  如果时2反序列化2，那么即使支付引擎配置成3，那岂不又成了2反序列化3？   所以应该是兼容吧！！！！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>问题：网银充值，支付引擎调用清算调用网关，网关响应清算，清算响应支付引擎（支付引擎解析时出现反序列化异常）</p>\n<p>原因分析：清算配置了yiji.dubbo.provider.serialization=hessian3，即传输时使用hessian3序列化、反序列化<br>，但是支付引擎使用的hessian2.  使用hessian2反序列化hessian3序列化出了问题</p>\n<p>但是清算反序列化网关为什么没有问题，  3反序列化2做了兼容？还是说，本身就是用的2反序列化2.  如果时2反序列化2，那么即使支付引擎配置成3，那岂不又成了2反序列化3？   所以应该是兼容吧！！！！</p>\n"},{"title":"grafana安装及使用","author":"Xiang Chuang","date":"2019-11-25T07:57:00.000Z","_content":"1、官网下载地址：https://grafana.com/grafana/download\n \n centos：wget https://dl.grafana.com/oss/release/grafana-6.4.4-1.x86_64.rpm \nsudo yum localinstall grafana-6.4.4-1.x86_64.rpm \n\nmac：brew update \nbrew install grafana\n\n2、新增用户\n\tgrafana注册用户需要采用邮件服务器进行激活，如果没有邮件服务器，可更改数据库，直接新增用户，步骤如下：\n    1、 ps -ef | grep grafana 找到数据库地址\n\t2、cfg:default.paths.data=数据库地址\n\t3、cd 数据库地址\n\t4、sqlite3 grafana.db\n\t5、select * from user; \n    6、sqlite> select * from  sqlite_master where type=\"table\" and name = \"user\"\n   ...> ;\ntable|user|user|6|CREATE TABLE `user` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `version` INTEGER NOT NULL\n, `login` TEXT NOT NULL\n, `email` TEXT NOT NULL\n, `name` TEXT NULL\n, `password` TEXT NULL\n, `salt` TEXT NULL\n, `rands` TEXT NULL\n, `company` TEXT NULL\n, `org_id` INTEGER NOT NULL\n, `is_admin` INTEGER NOT NULL\n, `email_verified` INTEGER NULL\n, `theme` TEXT NULL\n, `created` DATETIME NOT NULL\n, `updated` DATETIME NOT NULL\n    7、复制admin用户的相关信息（login，email等），将权限is_admin改为0\n    eg： insert into user values(2,0,'tech','technology@XXXX','tech','59acf18b94d7eb0694c61e60ce44c110c7a683ac6a8f09580d626f90f4a242000746579358d77dd9e570e83fa24faa88a8a6','F3FAxVm33R',null,null,1,0,0,null,'2019-11-06 07:12:14','2019-11-06 07:12:14',0,null,0); --此密码为admin\n    8、访问ip:3000，使用7设置的用户名和管理员admin的密码登录，此时弹出对话框要求重置密码，进行新账户密码重置，此时该账户没有dashbord查询权限\n    9、使用admin管理员登录，\n    invite your team\n![upload successful](\\images\\pasted-95.png)\ninvite\n\n![upload successful](\\images\\pasted-96.png)\n\n![upload successful](\\images\\pasted-97.png)\n\n![upload successful](\\images\\pasted-98.png)\n10、重新使用新账户登录即可看到dashbord","source":"_posts/grafana安装及使用.md","raw":"title: grafana安装及使用\nauthor: Xiang Chuang\ntags:\n  - grafana\ncategories: []\ndate: 2019-11-25 15:57:00\n---\n1、官网下载地址：https://grafana.com/grafana/download\n \n centos：wget https://dl.grafana.com/oss/release/grafana-6.4.4-1.x86_64.rpm \nsudo yum localinstall grafana-6.4.4-1.x86_64.rpm \n\nmac：brew update \nbrew install grafana\n\n2、新增用户\n\tgrafana注册用户需要采用邮件服务器进行激活，如果没有邮件服务器，可更改数据库，直接新增用户，步骤如下：\n    1、 ps -ef | grep grafana 找到数据库地址\n\t2、cfg:default.paths.data=数据库地址\n\t3、cd 数据库地址\n\t4、sqlite3 grafana.db\n\t5、select * from user; \n    6、sqlite> select * from  sqlite_master where type=\"table\" and name = \"user\"\n   ...> ;\ntable|user|user|6|CREATE TABLE `user` (\n`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n, `version` INTEGER NOT NULL\n, `login` TEXT NOT NULL\n, `email` TEXT NOT NULL\n, `name` TEXT NULL\n, `password` TEXT NULL\n, `salt` TEXT NULL\n, `rands` TEXT NULL\n, `company` TEXT NULL\n, `org_id` INTEGER NOT NULL\n, `is_admin` INTEGER NOT NULL\n, `email_verified` INTEGER NULL\n, `theme` TEXT NULL\n, `created` DATETIME NOT NULL\n, `updated` DATETIME NOT NULL\n    7、复制admin用户的相关信息（login，email等），将权限is_admin改为0\n    eg： insert into user values(2,0,'tech','technology@XXXX','tech','59acf18b94d7eb0694c61e60ce44c110c7a683ac6a8f09580d626f90f4a242000746579358d77dd9e570e83fa24faa88a8a6','F3FAxVm33R',null,null,1,0,0,null,'2019-11-06 07:12:14','2019-11-06 07:12:14',0,null,0); --此密码为admin\n    8、访问ip:3000，使用7设置的用户名和管理员admin的密码登录，此时弹出对话框要求重置密码，进行新账户密码重置，此时该账户没有dashbord查询权限\n    9、使用admin管理员登录，\n    invite your team\n![upload successful](\\images\\pasted-95.png)\ninvite\n\n![upload successful](\\images\\pasted-96.png)\n\n![upload successful](\\images\\pasted-97.png)\n\n![upload successful](\\images\\pasted-98.png)\n10、重新使用新账户登录即可看到dashbord","slug":"grafana安装及使用","published":1,"updated":"2019-11-25T08:18:20.812Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3e5th2f000rp966ig357u6y","content":"<p>1、官网下载地址：<a href=\"https://grafana.com/grafana/download\" target=\"_blank\" rel=\"noopener\">https://grafana.com/grafana/download</a></p>\n<p> centos：wget <a href=\"https://dl.grafana.com/oss/release/grafana-6.4.4-1.x86_64.rpm\" target=\"_blank\" rel=\"noopener\">https://dl.grafana.com/oss/release/grafana-6.4.4-1.x86_64.rpm</a><br>sudo yum localinstall grafana-6.4.4-1.x86_64.rpm </p>\n<p>mac：brew update<br>brew install grafana</p>\n<p>2、新增用户<br>    grafana注册用户需要采用邮件服务器进行激活，如果没有邮件服务器，可更改数据库，直接新增用户，步骤如下：<br>    1、 ps -ef | grep grafana 找到数据库地址<br>    2、cfg:default.paths.data=数据库地址<br>    3、cd 数据库地址<br>    4、sqlite3 grafana.db<br>    5、select <em> from user;<br>    6、sqlite&gt; select </em> from  sqlite_master where type=”table” and name = “user”<br>   …&gt; ;<br>table|user|user|6|CREATE TABLE <code>user</code> (<br><code>id</code> INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL<br>, <code>version</code> INTEGER NOT NULL<br>, <code>login</code> TEXT NOT NULL<br>, <code>email</code> TEXT NOT NULL<br>, <code>name</code> TEXT NULL<br>, <code>password</code> TEXT NULL<br>, <code>salt</code> TEXT NULL<br>, <code>rands</code> TEXT NULL<br>, <code>company</code> TEXT NULL<br>, <code>org_id</code> INTEGER NOT NULL<br>, <code>is_admin</code> INTEGER NOT NULL<br>, <code>email_verified</code> INTEGER NULL<br>, <code>theme</code> TEXT NULL<br>, <code>created</code> DATETIME NOT NULL<br>, <code>updated</code> DATETIME NOT NULL<br>    7、复制admin用户的相关信息（login，email等），将权限is_admin改为0<br>    eg： insert into user values(2,0,’tech’,‘technology@XXXX’,’tech’,’59acf18b94d7eb0694c61e60ce44c110c7a683ac6a8f09580d626f90f4a242000746579358d77dd9e570e83fa24faa88a8a6’,’F3FAxVm33R’,null,null,1,0,0,null,’2019-11-06 07:12:14’,’2019-11-06 07:12:14’,0,null,0); –此密码为admin<br>    8、访问ip:3000，使用7设置的用户名和管理员admin的密码登录，此时弹出对话框要求重置密码，进行新账户密码重置，此时该账户没有dashbord查询权限<br>    9、使用admin管理员登录，<br>    invite your team<br><img src=\"\\images\\pasted-95.png\" alt=\"upload successful\"><br>invite</p>\n<p><img src=\"\\images\\pasted-96.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-97.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-98.png\" alt=\"upload successful\"><br>10、重新使用新账户登录即可看到dashbord</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1、官网下载地址：<a href=\"https://grafana.com/grafana/download\" target=\"_blank\" rel=\"noopener\">https://grafana.com/grafana/download</a></p>\n<p> centos：wget <a href=\"https://dl.grafana.com/oss/release/grafana-6.4.4-1.x86_64.rpm\" target=\"_blank\" rel=\"noopener\">https://dl.grafana.com/oss/release/grafana-6.4.4-1.x86_64.rpm</a><br>sudo yum localinstall grafana-6.4.4-1.x86_64.rpm </p>\n<p>mac：brew update<br>brew install grafana</p>\n<p>2、新增用户<br>    grafana注册用户需要采用邮件服务器进行激活，如果没有邮件服务器，可更改数据库，直接新增用户，步骤如下：<br>    1、 ps -ef | grep grafana 找到数据库地址<br>    2、cfg:default.paths.data=数据库地址<br>    3、cd 数据库地址<br>    4、sqlite3 grafana.db<br>    5、select <em> from user;<br>    6、sqlite&gt; select </em> from  sqlite_master where type=”table” and name = “user”<br>   …&gt; ;<br>table|user|user|6|CREATE TABLE <code>user</code> (<br><code>id</code> INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL<br>, <code>version</code> INTEGER NOT NULL<br>, <code>login</code> TEXT NOT NULL<br>, <code>email</code> TEXT NOT NULL<br>, <code>name</code> TEXT NULL<br>, <code>password</code> TEXT NULL<br>, <code>salt</code> TEXT NULL<br>, <code>rands</code> TEXT NULL<br>, <code>company</code> TEXT NULL<br>, <code>org_id</code> INTEGER NOT NULL<br>, <code>is_admin</code> INTEGER NOT NULL<br>, <code>email_verified</code> INTEGER NULL<br>, <code>theme</code> TEXT NULL<br>, <code>created</code> DATETIME NOT NULL<br>, <code>updated</code> DATETIME NOT NULL<br>    7、复制admin用户的相关信息（login，email等），将权限is_admin改为0<br>    eg： insert into user values(2,0,’tech’,‘technology@XXXX’,’tech’,’59acf18b94d7eb0694c61e60ce44c110c7a683ac6a8f09580d626f90f4a242000746579358d77dd9e570e83fa24faa88a8a6’,’F3FAxVm33R’,null,null,1,0,0,null,’2019-11-06 07:12:14’,’2019-11-06 07:12:14’,0,null,0); –此密码为admin<br>    8、访问ip:3000，使用7设置的用户名和管理员admin的密码登录，此时弹出对话框要求重置密码，进行新账户密码重置，此时该账户没有dashbord查询权限<br>    9、使用admin管理员登录，<br>    invite your team<br><img src=\"\\images\\pasted-95.png\" alt=\"upload successful\"><br>invite</p>\n<p><img src=\"\\images\\pasted-96.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-97.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-98.png\" alt=\"upload successful\"><br>10、重新使用新账户登录即可看到dashbord</p>\n"},{"title":"dubbo-基于zookeeper的注册结构","author":"Xiang Chuang","date":"2019-03-07T07:25:00.000Z","_content":"\n![upload successful](\\images\\pasted-49.png)","source":"_posts/dubbo-基于zookeeper的注册结构.md","raw":"title: dubbo-基于zookeeper的注册结构\nauthor: Xiang Chuang\ntags:\n  - dubbo\n  - zookeeper\ncategories:\n  - 爱学爱问\ndate: 2019-03-07 15:25:00\n---\n\n![upload successful](\\images\\pasted-49.png)","slug":"dubbo-基于zookeeper的注册结构","published":1,"updated":"2019-09-30T07:34:10.837Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3e5th2g000up966rb8gjx4j","content":"<p><img src=\"\\images\\pasted-49.png\" alt=\"upload successful\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"\\images\\pasted-49.png\" alt=\"upload successful\"></p>\n"},{"title":"dubbo-（反）序列化","author":"Xiang Chuang","date":"2018-06-12T10:24:00.000Z","_content":"dubbo枚举（反）序列化使用的是：com.alibaba.com.caucho.hessian.io.EnumDeserializer\n根据枚举的name进行处理Enum.valueOf(Class, enumName);\n使用时，只要保证当前应用有对应name的枚举值就能拿到，没有则抛异常\n\n注：\n1、rabbit mq序列化默认使用com.esotericsoftware.kryo.serializers.DefaultSerializers.EnumSerializer\nkyro按顺序处理\n使用时，必须保证序列化和反序列化时，枚举值的顺序是一致的，否则拿到错误的枚举值，同时可能出现下标越界\n\n2、com.alibaba.fastjson.JSON.parseObject.parseJSON使用com.alibaba.fastjson.parser.deserializer.EnumDeserializer\n根据枚举的name进行处理Enum.valueOf(Class, enumName);\n使用时，只要保证当前应用有对应name的枚举值就能拿到，没有则抛异常","source":"_posts/dubbo-（反）序列化.md","raw":"title: dubbo-（反）序列化\nauthor: Xiang Chuang\ntags:\n  - dubbo\n  - 序列化\ncategories:\n  - 这些年，那些坑\ndate: 2018-06-12 18:24:00\n---\ndubbo枚举（反）序列化使用的是：com.alibaba.com.caucho.hessian.io.EnumDeserializer\n根据枚举的name进行处理Enum.valueOf(Class, enumName);\n使用时，只要保证当前应用有对应name的枚举值就能拿到，没有则抛异常\n\n注：\n1、rabbit mq序列化默认使用com.esotericsoftware.kryo.serializers.DefaultSerializers.EnumSerializer\nkyro按顺序处理\n使用时，必须保证序列化和反序列化时，枚举值的顺序是一致的，否则拿到错误的枚举值，同时可能出现下标越界\n\n2、com.alibaba.fastjson.JSON.parseObject.parseJSON使用com.alibaba.fastjson.parser.deserializer.EnumDeserializer\n根据枚举的name进行处理Enum.valueOf(Class, enumName);\n使用时，只要保证当前应用有对应name的枚举值就能拿到，没有则抛异常","slug":"dubbo-（反）序列化","published":1,"updated":"2019-09-30T07:34:10.837Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3e5th2h000wp966tbhwnhxq","content":"<p>dubbo枚举（反）序列化使用的是：com.alibaba.com.caucho.hessian.io.EnumDeserializer<br>根据枚举的name进行处理Enum.valueOf(Class, enumName);<br>使用时，只要保证当前应用有对应name的枚举值就能拿到，没有则抛异常</p>\n<p>注：<br>1、rabbit mq序列化默认使用com.esotericsoftware.kryo.serializers.DefaultSerializers.EnumSerializer<br>kyro按顺序处理<br>使用时，必须保证序列化和反序列化时，枚举值的顺序是一致的，否则拿到错误的枚举值，同时可能出现下标越界</p>\n<p>2、com.alibaba.fastjson.JSON.parseObject.parseJSON使用com.alibaba.fastjson.parser.deserializer.EnumDeserializer<br>根据枚举的name进行处理Enum.valueOf(Class, enumName);<br>使用时，只要保证当前应用有对应name的枚举值就能拿到，没有则抛异常</p>\n","site":{"data":{}},"excerpt":"","more":"<p>dubbo枚举（反）序列化使用的是：com.alibaba.com.caucho.hessian.io.EnumDeserializer<br>根据枚举的name进行处理Enum.valueOf(Class, enumName);<br>使用时，只要保证当前应用有对应name的枚举值就能拿到，没有则抛异常</p>\n<p>注：<br>1、rabbit mq序列化默认使用com.esotericsoftware.kryo.serializers.DefaultSerializers.EnumSerializer<br>kyro按顺序处理<br>使用时，必须保证序列化和反序列化时，枚举值的顺序是一致的，否则拿到错误的枚举值，同时可能出现下标越界</p>\n<p>2、com.alibaba.fastjson.JSON.parseObject.parseJSON使用com.alibaba.fastjson.parser.deserializer.EnumDeserializer<br>根据枚举的name进行处理Enum.valueOf(Class, enumName);<br>使用时，只要保证当前应用有对应name的枚举值就能拿到，没有则抛异常</p>\n"},{"title":"elasticsearch-集群","author":"Xiang Chuang","date":"2017-09-27T08:02:00.000Z","_content":"ElasticSearch 的主旨是随时可用和按需扩容。 \n1、通过购买性能更强大（ 垂直扩容 ，或 纵向扩容） 扩容能力有限   \n2、数量更多的服务器（ 水平扩容 ，或 横向扩容 ） （elasticsearch天生分布式）     \n\n一个运行中的 Elasticsearch 实例称为一个 节点，而集群是由一个或者多个拥有相同 cluster.name 配置的节点组成， 它们共同承担数据和负载的压力。当有节点加入集群中或者从集群中移除节点时，集群将会重新平均分布所有的数据。\n\n主 节点： 负责管理集群范围内的所有变更（如增加、删除索引，或者增加、删除节点等），不需要涉及到文档级别的变更和搜索等操作，所以当集群只拥有一个主节点的情况下，即使流量的增加它也不会成为瓶颈。 任何节点都可以成为主节点。用户可以将请求发送到 集群中的任何节点 ，包括主节点。 每个节点都知道任意文档所处的位置，并且能够将我们的请求直接转发到存储我们所需文档的节点。 无论我们将请求发送到哪个节点，它都能负责从各个包含我们所需文档的节点收集回数据，并将最终结果返回給客户端。 Elasticsearch 对这一切的管理都是透明的。\n\n查询集群健康：GET /_cluster/health\nstatus\ngreen  所有的主分片和副本分片都正常运行。 \nyellow  所有的主分片都正常运行，但不是所有的副本分片都正常运行。 \nred  有主分片没能正常运行。\n\n索引实际上是指向一个或者多个物理 分片（仅保存了 全部数据中的一部分，一个分片是一个 Lucene 的实例） 的 逻辑命名空间 。\n初始化索引的分片（默认5个主分片）\nPUT /blogs\n{\n   \"settings\" : {\n      \"number_of_shards\" : 3,\n      \"number_of_replicas\" : 1\n   }\n}\n调整副分片大小\nPUT /blogs/_settings\n{\n   \"number_of_replicas\" : 2\n}","source":"_posts/elasticsearch-集群.md","raw":"title: elasticsearch-集群\nauthor: Xiang Chuang\ntags:\n  - elk\n  - 集群\ncategories:\n  - 爱学爱问\ndate: 2017-09-27 16:02:00\n---\nElasticSearch 的主旨是随时可用和按需扩容。 \n1、通过购买性能更强大（ 垂直扩容 ，或 纵向扩容） 扩容能力有限   \n2、数量更多的服务器（ 水平扩容 ，或 横向扩容 ） （elasticsearch天生分布式）     \n\n一个运行中的 Elasticsearch 实例称为一个 节点，而集群是由一个或者多个拥有相同 cluster.name 配置的节点组成， 它们共同承担数据和负载的压力。当有节点加入集群中或者从集群中移除节点时，集群将会重新平均分布所有的数据。\n\n主 节点： 负责管理集群范围内的所有变更（如增加、删除索引，或者增加、删除节点等），不需要涉及到文档级别的变更和搜索等操作，所以当集群只拥有一个主节点的情况下，即使流量的增加它也不会成为瓶颈。 任何节点都可以成为主节点。用户可以将请求发送到 集群中的任何节点 ，包括主节点。 每个节点都知道任意文档所处的位置，并且能够将我们的请求直接转发到存储我们所需文档的节点。 无论我们将请求发送到哪个节点，它都能负责从各个包含我们所需文档的节点收集回数据，并将最终结果返回給客户端。 Elasticsearch 对这一切的管理都是透明的。\n\n查询集群健康：GET /_cluster/health\nstatus\ngreen  所有的主分片和副本分片都正常运行。 \nyellow  所有的主分片都正常运行，但不是所有的副本分片都正常运行。 \nred  有主分片没能正常运行。\n\n索引实际上是指向一个或者多个物理 分片（仅保存了 全部数据中的一部分，一个分片是一个 Lucene 的实例） 的 逻辑命名空间 。\n初始化索引的分片（默认5个主分片）\nPUT /blogs\n{\n   \"settings\" : {\n      \"number_of_shards\" : 3,\n      \"number_of_replicas\" : 1\n   }\n}\n调整副分片大小\nPUT /blogs/_settings\n{\n   \"number_of_replicas\" : 2\n}","slug":"elasticsearch-集群","published":1,"updated":"2019-09-30T07:34:10.837Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3e5th2i000zp966cicmvee7","content":"<p>ElasticSearch 的主旨是随时可用和按需扩容。<br>1、通过购买性能更强大（ 垂直扩容 ，或 纵向扩容） 扩容能力有限<br>2、数量更多的服务器（ 水平扩容 ，或 横向扩容 ） （elasticsearch天生分布式）     </p>\n<p>一个运行中的 Elasticsearch 实例称为一个 节点，而集群是由一个或者多个拥有相同 cluster.name 配置的节点组成， 它们共同承担数据和负载的压力。当有节点加入集群中或者从集群中移除节点时，集群将会重新平均分布所有的数据。</p>\n<p>主 节点： 负责管理集群范围内的所有变更（如增加、删除索引，或者增加、删除节点等），不需要涉及到文档级别的变更和搜索等操作，所以当集群只拥有一个主节点的情况下，即使流量的增加它也不会成为瓶颈。 任何节点都可以成为主节点。用户可以将请求发送到 集群中的任何节点 ，包括主节点。 每个节点都知道任意文档所处的位置，并且能够将我们的请求直接转发到存储我们所需文档的节点。 无论我们将请求发送到哪个节点，它都能负责从各个包含我们所需文档的节点收集回数据，并将最终结果返回給客户端。 Elasticsearch 对这一切的管理都是透明的。</p>\n<p>查询集群健康：GET /_cluster/health<br>status<br>green  所有的主分片和副本分片都正常运行。<br>yellow  所有的主分片都正常运行，但不是所有的副本分片都正常运行。<br>red  有主分片没能正常运行。</p>\n<p>索引实际上是指向一个或者多个物理 分片（仅保存了 全部数据中的一部分，一个分片是一个 Lucene 的实例） 的 逻辑命名空间 。<br>初始化索引的分片（默认5个主分片）<br>PUT /blogs<br>{<br>   “settings” : {<br>      “number_of_shards” : 3,<br>      “number_of_replicas” : 1<br>   }<br>}<br>调整副分片大小<br>PUT /blogs/_settings<br>{<br>   “number_of_replicas” : 2<br>}</p>\n","site":{"data":{}},"excerpt":"","more":"<p>ElasticSearch 的主旨是随时可用和按需扩容。<br>1、通过购买性能更强大（ 垂直扩容 ，或 纵向扩容） 扩容能力有限<br>2、数量更多的服务器（ 水平扩容 ，或 横向扩容 ） （elasticsearch天生分布式）     </p>\n<p>一个运行中的 Elasticsearch 实例称为一个 节点，而集群是由一个或者多个拥有相同 cluster.name 配置的节点组成， 它们共同承担数据和负载的压力。当有节点加入集群中或者从集群中移除节点时，集群将会重新平均分布所有的数据。</p>\n<p>主 节点： 负责管理集群范围内的所有变更（如增加、删除索引，或者增加、删除节点等），不需要涉及到文档级别的变更和搜索等操作，所以当集群只拥有一个主节点的情况下，即使流量的增加它也不会成为瓶颈。 任何节点都可以成为主节点。用户可以将请求发送到 集群中的任何节点 ，包括主节点。 每个节点都知道任意文档所处的位置，并且能够将我们的请求直接转发到存储我们所需文档的节点。 无论我们将请求发送到哪个节点，它都能负责从各个包含我们所需文档的节点收集回数据，并将最终结果返回給客户端。 Elasticsearch 对这一切的管理都是透明的。</p>\n<p>查询集群健康：GET /_cluster/health<br>status<br>green  所有的主分片和副本分片都正常运行。<br>yellow  所有的主分片都正常运行，但不是所有的副本分片都正常运行。<br>red  有主分片没能正常运行。</p>\n<p>索引实际上是指向一个或者多个物理 分片（仅保存了 全部数据中的一部分，一个分片是一个 Lucene 的实例） 的 逻辑命名空间 。<br>初始化索引的分片（默认5个主分片）<br>PUT /blogs<br>{<br>   “settings” : {<br>      “number_of_shards” : 3,<br>      “number_of_replicas” : 1<br>   }<br>}<br>调整副分片大小<br>PUT /blogs/_settings<br>{<br>   “number_of_replicas” : 2<br>}</p>\n"},{"title":"git-本地commit、push、show、reset操作","author":"Xiang Chuang","date":"2019-04-28T03:06:00.000Z","_content":"问题：\n使用git commit代码时，git commit完成\n后续执行git push origin master:master 提示“Everything up-to-date”\n使用git show查询，确实能看到提交的内容\n\n原因：\n尝试提交到master，但本地对应的其实是一个分支\n\n解决：\n切换分支到主干，此时发现，git show，刚刚提交的内容看不到了，且本地代码中也没有了，说明commit关联到了对应的分支\n\n使用git reflog返回如下\nfb3e1b1 (HEAD -> master) HEAD@{0}: reset: moving to fb3e1b1\n2d7b28e (origin/master, origin/HEAD) HEAD@{1}: checkout: moving from fb3e1b16278856b6108cfe3010f7e4fd8c4e3634 to master\nfb3e1b1 (HEAD -> master) HEAD@{2}: commit: 场景化业务监控模型搭建\n2d7b28e (origin/master, origin/HEAD) HEAD@{3}: checkout: moving from master to 2d7b28e3^0\n2d7b28e (origin/master, origin/HEAD) HEAD@{4}: commit: 引入规则引擎\n6fe0e4e HEAD@{5}: commit: 基于elk-kafka数据传输通道活性检测\nb28b71b HEAD@{6}: commit: kafka消费者数量及分组在hera中配置，同时采集入口采用线程池执行以提高吞吐量\nad4778d HEAD@{7}: commit: 基于elk-kafka传输通道的数据采集功能实现（需进行性能评估）\n3d9affa HEAD@{8}: commit: 基于elk-kafka传输通道的数据采集功能实现（需进行性能评估）\n6508afa HEAD@{9}: commit: 后台管理实现类同步到项目中\ndd0138f HEAD@{10}: commit: hera配置更改\n29764a1 HEAD@{11}: commit: README\n75debd5 HEAD@{12}: clone: from http://gitlab.yiji/yangxi/godeye.git\n\n再次使用git reset --hard fb3e1b1，将本地代码还原到了相应的版本，代码终于回来了，吓一跳\n\n$ git reset --hard fb3e1b1\nHEAD is now at fb3e1b1 场景化业务监控模型搭建\n\n\n","source":"_posts/git-本地commit、push、show、reset操作.md","raw":"title: git-本地commit、push、show、reset操作\nauthor: Xiang Chuang\ntags:\n  - git\n  - 版本控制\ncategories:\n  - 爱学爱问\ndate: 2019-04-28 11:06:00\n---\n问题：\n使用git commit代码时，git commit完成\n后续执行git push origin master:master 提示“Everything up-to-date”\n使用git show查询，确实能看到提交的内容\n\n原因：\n尝试提交到master，但本地对应的其实是一个分支\n\n解决：\n切换分支到主干，此时发现，git show，刚刚提交的内容看不到了，且本地代码中也没有了，说明commit关联到了对应的分支\n\n使用git reflog返回如下\nfb3e1b1 (HEAD -> master) HEAD@{0}: reset: moving to fb3e1b1\n2d7b28e (origin/master, origin/HEAD) HEAD@{1}: checkout: moving from fb3e1b16278856b6108cfe3010f7e4fd8c4e3634 to master\nfb3e1b1 (HEAD -> master) HEAD@{2}: commit: 场景化业务监控模型搭建\n2d7b28e (origin/master, origin/HEAD) HEAD@{3}: checkout: moving from master to 2d7b28e3^0\n2d7b28e (origin/master, origin/HEAD) HEAD@{4}: commit: 引入规则引擎\n6fe0e4e HEAD@{5}: commit: 基于elk-kafka数据传输通道活性检测\nb28b71b HEAD@{6}: commit: kafka消费者数量及分组在hera中配置，同时采集入口采用线程池执行以提高吞吐量\nad4778d HEAD@{7}: commit: 基于elk-kafka传输通道的数据采集功能实现（需进行性能评估）\n3d9affa HEAD@{8}: commit: 基于elk-kafka传输通道的数据采集功能实现（需进行性能评估）\n6508afa HEAD@{9}: commit: 后台管理实现类同步到项目中\ndd0138f HEAD@{10}: commit: hera配置更改\n29764a1 HEAD@{11}: commit: README\n75debd5 HEAD@{12}: clone: from http://gitlab.yiji/yangxi/godeye.git\n\n再次使用git reset --hard fb3e1b1，将本地代码还原到了相应的版本，代码终于回来了，吓一跳\n\n$ git reset --hard fb3e1b1\nHEAD is now at fb3e1b1 场景化业务监控模型搭建\n\n\n","slug":"git-本地commit、push、show、reset操作","published":1,"updated":"2019-09-30T07:34:10.837Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3e5th2j0013p966moqdqeus","content":"<p>问题：<br>使用git commit代码时，git commit完成<br>后续执行git push origin master:master 提示“Everything up-to-date”<br>使用git show查询，确实能看到提交的内容</p>\n<p>原因：<br>尝试提交到master，但本地对应的其实是一个分支</p>\n<p>解决：<br>切换分支到主干，此时发现，git show，刚刚提交的内容看不到了，且本地代码中也没有了，说明commit关联到了对应的分支</p>\n<p>使用git reflog返回如下<br>fb3e1b1 (HEAD -&gt; master) HEAD@{0}: reset: moving to fb3e1b1<br>2d7b28e (origin/master, origin/HEAD) HEAD@{1}: checkout: moving from fb3e1b16278856b6108cfe3010f7e4fd8c4e3634 to master<br>fb3e1b1 (HEAD -&gt; master) HEAD@{2}: commit: 场景化业务监控模型搭建<br>2d7b28e (origin/master, origin/HEAD) HEAD@{3}: checkout: moving from master to 2d7b28e3^0<br>2d7b28e (origin/master, origin/HEAD) HEAD@{4}: commit: 引入规则引擎<br>6fe0e4e HEAD@{5}: commit: 基于elk-kafka数据传输通道活性检测<br>b28b71b HEAD@{6}: commit: kafka消费者数量及分组在hera中配置，同时采集入口采用线程池执行以提高吞吐量<br>ad4778d HEAD@{7}: commit: 基于elk-kafka传输通道的数据采集功能实现（需进行性能评估）<br>3d9affa HEAD@{8}: commit: 基于elk-kafka传输通道的数据采集功能实现（需进行性能评估）<br>6508afa HEAD@{9}: commit: 后台管理实现类同步到项目中<br>dd0138f HEAD@{10}: commit: hera配置更改<br>29764a1 HEAD@{11}: commit: README<br>75debd5 HEAD@{12}: clone: from <a href=\"http://gitlab.yiji/yangxi/godeye.git\" target=\"_blank\" rel=\"noopener\">http://gitlab.yiji/yangxi/godeye.git</a></p>\n<p>再次使用git reset –hard fb3e1b1，将本地代码还原到了相应的版本，代码终于回来了，吓一跳</p>\n<p>$ git reset –hard fb3e1b1<br>HEAD is now at fb3e1b1 场景化业务监控模型搭建</p>\n","site":{"data":{}},"excerpt":"","more":"<p>问题：<br>使用git commit代码时，git commit完成<br>后续执行git push origin master:master 提示“Everything up-to-date”<br>使用git show查询，确实能看到提交的内容</p>\n<p>原因：<br>尝试提交到master，但本地对应的其实是一个分支</p>\n<p>解决：<br>切换分支到主干，此时发现，git show，刚刚提交的内容看不到了，且本地代码中也没有了，说明commit关联到了对应的分支</p>\n<p>使用git reflog返回如下<br>fb3e1b1 (HEAD -&gt; master) HEAD@{0}: reset: moving to fb3e1b1<br>2d7b28e (origin/master, origin/HEAD) HEAD@{1}: checkout: moving from fb3e1b16278856b6108cfe3010f7e4fd8c4e3634 to master<br>fb3e1b1 (HEAD -&gt; master) HEAD@{2}: commit: 场景化业务监控模型搭建<br>2d7b28e (origin/master, origin/HEAD) HEAD@{3}: checkout: moving from master to 2d7b28e3^0<br>2d7b28e (origin/master, origin/HEAD) HEAD@{4}: commit: 引入规则引擎<br>6fe0e4e HEAD@{5}: commit: 基于elk-kafka数据传输通道活性检测<br>b28b71b HEAD@{6}: commit: kafka消费者数量及分组在hera中配置，同时采集入口采用线程池执行以提高吞吐量<br>ad4778d HEAD@{7}: commit: 基于elk-kafka传输通道的数据采集功能实现（需进行性能评估）<br>3d9affa HEAD@{8}: commit: 基于elk-kafka传输通道的数据采集功能实现（需进行性能评估）<br>6508afa HEAD@{9}: commit: 后台管理实现类同步到项目中<br>dd0138f HEAD@{10}: commit: hera配置更改<br>29764a1 HEAD@{11}: commit: README<br>75debd5 HEAD@{12}: clone: from <a href=\"http://gitlab.yiji/yangxi/godeye.git\" target=\"_blank\" rel=\"noopener\">http://gitlab.yiji/yangxi/godeye.git</a></p>\n<p>再次使用git reset –hard fb3e1b1，将本地代码还原到了相应的版本，代码终于回来了，吓一跳</p>\n<p>$ git reset –hard fb3e1b1<br>HEAD is now at fb3e1b1 场景化业务监控模型搭建</p>\n"},{"title":"java-对象使用问题案例","author":"Xiang Chuang","date":"2018-08-06T09:23:00.000Z","_content":"关于java对象的使用，java编码的一个基本能力，但事实上，业务开发中，往往会有疏忽，下面从易极付支付引擎一个bug再次剖析java对象的使用。\n\n业务场景：支付引擎转账-定时任务批量加载挂起的数据执行转账并异步回执\n                1、批量查询挂起的转账数据，list\n                2、循环遍历list执行转换并回执\n                    2.1、将数据转换到业务上下文中\n                    2.2、执行转账（数据从业务上下文中获取）\n                    2.3、发布转账回执事件（数据从业务上下文中获取）\n                 3、在新线程中异步回执（订阅到2.3发布的回执事件后与2并行执行）\n\n上述是简化后的业务流程，下面加以核心代码说明支付引擎的实现逻辑\n                1、批量查询挂起的转账数据，list \n              \n![upload successful](\\images\\pasted-24.png)\n\n![upload successful](\\images\\pasted-25.png)\n 2、循环遍历list执行转换并回执\n     2.1、将数据转换到业务上下文中\n     \n![upload successful](\\images\\pasted-26.png)\n\n![upload successful](\\images\\pasted-27.png)\n\n![upload successful](\\images\\pasted-28.png)\n这儿调用的是易极付common-util中提供的对象转换方法，源码如下：\n\n![upload successful](\\images\\pasted-30.png)\n\n![upload successful](\\images\\pasted-31.png)\n\n 2.2、执行转账（数据从业务上下文中获取）\n![upload successful](\\images\\pasted-32.png)\n\n2.3、发布转账回执事件（数据从业务上下文中获取）\n![upload successful](\\images\\pasted-33.png)\n\n![upload successful](\\images\\pasted-34.png)\n\n![upload successful](\\images\\pasted-35.png)\n\n![upload successful](\\images\\pasted-36.png)\n\n![upload successful](\\images\\pasted-37.png)\n\n3、在新线程中异步回执（订阅到2.3发布的回执事件后与2并行执行）\n![upload successful](\\images\\pasted-38.png)\n\n上述逻辑，经过实际测试，存在严重问题，问题如下：\n异步回执时，拿到的数据并不是实际预期的数据，而被篡改了，可以看见的是，执行异步回执时，拿到了list循环遍历后续的数据。\n\n分析问题，很明显，我们看到了2.1这么一行代码：\n![upload successful](\\images\\pasted-39.png)\n那么，当前2.2转账完成后，发出2.3异步回执事件，3执行回执是异步的（并行的），此时下一次循环完全可能已经再次执行了2.1这行代码，那么就有问题！！！  为什么？\n\n上述判断只是初次分析，但经过进一步分析，我们发现其实3中的数据已经在2.3中将数据封装好，3只是从封装好的数据中取出相应的数据而已，2.3是同步执行过程，那么，下一次2.1执行时，一定是在上一次2.3执行完成之后！\n\n但是，经测试，这儿确实是有问题的，\n于是，再次分析：\n2.1进行数据转换时，通过源码分析，我们得出，此处只是将数据的值一个一个的set到业务上下文的数据对象中，那么意味着什么？  业务上下午serviceContext是一个全局对象，进入执行逻辑前已经初始化完成，那么，其内存已经开辟完成，意味着该对象中数据对象的内存也已开辟完成。那么，set值只是为那一块内存进行了赋值操作\n2.3通过getEntityObject将数据赋给新的对象I，那么，此时I和业务上下午中的数据对象都是指向同一块内存区域\n3/2.1 此时3和下一个2.1并行执行，3中获取数据对象的值，而1.2给上下文数据对象赋予新的值， 那么，3是从这块内存区域取值，1.2是给这块内存区域赋值，一旦1.2执行在前，那么3拿到的当然是重新赋予的值。\n\n通过上述分析，我们知道了问题根源，那么，如何改造？\n很简单\n修改2.1的代码为\n![upload successful](\\images\\pasted-40.png)\n\n![upload successful](\\images\\pasted-41.png)\n很显然，同样是给业务上下午数据对象赋值，与上面的方案区别在于，此处是将上下午数据对象指向的新的内存地址。\n那么执行2.3时，通过getEntityObject将数据赋给新的对象I，其所指向的内存地址也是这块新的地址\n执行3/2.1时，3依旧从这块内存地址取值，而2.1则是将上下午数据对象指向另一块内存地址，毫不冲突，更谈不上数据篡改。\n\n下面图示的方式给与说明：\n![upload successful](\\images\\pasted-42.png)\n","source":"_posts/java-对象使用问题案例.md","raw":"title: java-对象使用问题案例\nauthor: Xiang Chuang\ntags:\n  - java\n  - java对象\ncategories:\n  - 这些年，那些坑\ndate: 2018-08-06 17:23:00\n---\n关于java对象的使用，java编码的一个基本能力，但事实上，业务开发中，往往会有疏忽，下面从易极付支付引擎一个bug再次剖析java对象的使用。\n\n业务场景：支付引擎转账-定时任务批量加载挂起的数据执行转账并异步回执\n                1、批量查询挂起的转账数据，list\n                2、循环遍历list执行转换并回执\n                    2.1、将数据转换到业务上下文中\n                    2.2、执行转账（数据从业务上下文中获取）\n                    2.3、发布转账回执事件（数据从业务上下文中获取）\n                 3、在新线程中异步回执（订阅到2.3发布的回执事件后与2并行执行）\n\n上述是简化后的业务流程，下面加以核心代码说明支付引擎的实现逻辑\n                1、批量查询挂起的转账数据，list \n              \n![upload successful](\\images\\pasted-24.png)\n\n![upload successful](\\images\\pasted-25.png)\n 2、循环遍历list执行转换并回执\n     2.1、将数据转换到业务上下文中\n     \n![upload successful](\\images\\pasted-26.png)\n\n![upload successful](\\images\\pasted-27.png)\n\n![upload successful](\\images\\pasted-28.png)\n这儿调用的是易极付common-util中提供的对象转换方法，源码如下：\n\n![upload successful](\\images\\pasted-30.png)\n\n![upload successful](\\images\\pasted-31.png)\n\n 2.2、执行转账（数据从业务上下文中获取）\n![upload successful](\\images\\pasted-32.png)\n\n2.3、发布转账回执事件（数据从业务上下文中获取）\n![upload successful](\\images\\pasted-33.png)\n\n![upload successful](\\images\\pasted-34.png)\n\n![upload successful](\\images\\pasted-35.png)\n\n![upload successful](\\images\\pasted-36.png)\n\n![upload successful](\\images\\pasted-37.png)\n\n3、在新线程中异步回执（订阅到2.3发布的回执事件后与2并行执行）\n![upload successful](\\images\\pasted-38.png)\n\n上述逻辑，经过实际测试，存在严重问题，问题如下：\n异步回执时，拿到的数据并不是实际预期的数据，而被篡改了，可以看见的是，执行异步回执时，拿到了list循环遍历后续的数据。\n\n分析问题，很明显，我们看到了2.1这么一行代码：\n![upload successful](\\images\\pasted-39.png)\n那么，当前2.2转账完成后，发出2.3异步回执事件，3执行回执是异步的（并行的），此时下一次循环完全可能已经再次执行了2.1这行代码，那么就有问题！！！  为什么？\n\n上述判断只是初次分析，但经过进一步分析，我们发现其实3中的数据已经在2.3中将数据封装好，3只是从封装好的数据中取出相应的数据而已，2.3是同步执行过程，那么，下一次2.1执行时，一定是在上一次2.3执行完成之后！\n\n但是，经测试，这儿确实是有问题的，\n于是，再次分析：\n2.1进行数据转换时，通过源码分析，我们得出，此处只是将数据的值一个一个的set到业务上下文的数据对象中，那么意味着什么？  业务上下午serviceContext是一个全局对象，进入执行逻辑前已经初始化完成，那么，其内存已经开辟完成，意味着该对象中数据对象的内存也已开辟完成。那么，set值只是为那一块内存进行了赋值操作\n2.3通过getEntityObject将数据赋给新的对象I，那么，此时I和业务上下午中的数据对象都是指向同一块内存区域\n3/2.1 此时3和下一个2.1并行执行，3中获取数据对象的值，而1.2给上下文数据对象赋予新的值， 那么，3是从这块内存区域取值，1.2是给这块内存区域赋值，一旦1.2执行在前，那么3拿到的当然是重新赋予的值。\n\n通过上述分析，我们知道了问题根源，那么，如何改造？\n很简单\n修改2.1的代码为\n![upload successful](\\images\\pasted-40.png)\n\n![upload successful](\\images\\pasted-41.png)\n很显然，同样是给业务上下午数据对象赋值，与上面的方案区别在于，此处是将上下午数据对象指向的新的内存地址。\n那么执行2.3时，通过getEntityObject将数据赋给新的对象I，其所指向的内存地址也是这块新的地址\n执行3/2.1时，3依旧从这块内存地址取值，而2.1则是将上下午数据对象指向另一块内存地址，毫不冲突，更谈不上数据篡改。\n\n下面图示的方式给与说明：\n![upload successful](\\images\\pasted-42.png)\n","slug":"java-对象使用问题案例","published":1,"updated":"2019-09-30T07:34:10.837Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3e5th2j0016p966ncuifriy","content":"<p>关于java对象的使用，java编码的一个基本能力，但事实上，业务开发中，往往会有疏忽，下面从易极付支付引擎一个bug再次剖析java对象的使用。</p>\n<p>业务场景：支付引擎转账-定时任务批量加载挂起的数据执行转账并异步回执<br>                1、批量查询挂起的转账数据，list<br>                2、循环遍历list执行转换并回执<br>                    2.1、将数据转换到业务上下文中<br>                    2.2、执行转账（数据从业务上下文中获取）<br>                    2.3、发布转账回执事件（数据从业务上下文中获取）<br>                 3、在新线程中异步回执（订阅到2.3发布的回执事件后与2并行执行）</p>\n<p>上述是简化后的业务流程，下面加以核心代码说明支付引擎的实现逻辑<br>                1、批量查询挂起的转账数据，list </p>\n<p><img src=\"\\images\\pasted-24.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-25.png\" alt=\"upload successful\"><br> 2、循环遍历list执行转换并回执<br>     2.1、将数据转换到业务上下文中</p>\n<p><img src=\"\\images\\pasted-26.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-27.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-28.png\" alt=\"upload successful\"><br>这儿调用的是易极付common-util中提供的对象转换方法，源码如下：</p>\n<p><img src=\"\\images\\pasted-30.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-31.png\" alt=\"upload successful\"></p>\n<p> 2.2、执行转账（数据从业务上下文中获取）<br><img src=\"\\images\\pasted-32.png\" alt=\"upload successful\"></p>\n<p>2.3、发布转账回执事件（数据从业务上下文中获取）<br><img src=\"\\images\\pasted-33.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-34.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-35.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-36.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-37.png\" alt=\"upload successful\"></p>\n<p>3、在新线程中异步回执（订阅到2.3发布的回执事件后与2并行执行）<br><img src=\"\\images\\pasted-38.png\" alt=\"upload successful\"></p>\n<p>上述逻辑，经过实际测试，存在严重问题，问题如下：<br>异步回执时，拿到的数据并不是实际预期的数据，而被篡改了，可以看见的是，执行异步回执时，拿到了list循环遍历后续的数据。</p>\n<p>分析问题，很明显，我们看到了2.1这么一行代码：<br><img src=\"\\images\\pasted-39.png\" alt=\"upload successful\"><br>那么，当前2.2转账完成后，发出2.3异步回执事件，3执行回执是异步的（并行的），此时下一次循环完全可能已经再次执行了2.1这行代码，那么就有问题！！！  为什么？</p>\n<p>上述判断只是初次分析，但经过进一步分析，我们发现其实3中的数据已经在2.3中将数据封装好，3只是从封装好的数据中取出相应的数据而已，2.3是同步执行过程，那么，下一次2.1执行时，一定是在上一次2.3执行完成之后！</p>\n<p>但是，经测试，这儿确实是有问题的，<br>于是，再次分析：<br>2.1进行数据转换时，通过源码分析，我们得出，此处只是将数据的值一个一个的set到业务上下文的数据对象中，那么意味着什么？  业务上下午serviceContext是一个全局对象，进入执行逻辑前已经初始化完成，那么，其内存已经开辟完成，意味着该对象中数据对象的内存也已开辟完成。那么，set值只是为那一块内存进行了赋值操作<br>2.3通过getEntityObject将数据赋给新的对象I，那么，此时I和业务上下午中的数据对象都是指向同一块内存区域<br>3/2.1 此时3和下一个2.1并行执行，3中获取数据对象的值，而1.2给上下文数据对象赋予新的值， 那么，3是从这块内存区域取值，1.2是给这块内存区域赋值，一旦1.2执行在前，那么3拿到的当然是重新赋予的值。</p>\n<p>通过上述分析，我们知道了问题根源，那么，如何改造？<br>很简单<br>修改2.1的代码为<br><img src=\"\\images\\pasted-40.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-41.png\" alt=\"upload successful\"><br>很显然，同样是给业务上下午数据对象赋值，与上面的方案区别在于，此处是将上下午数据对象指向的新的内存地址。<br>那么执行2.3时，通过getEntityObject将数据赋给新的对象I，其所指向的内存地址也是这块新的地址<br>执行3/2.1时，3依旧从这块内存地址取值，而2.1则是将上下午数据对象指向另一块内存地址，毫不冲突，更谈不上数据篡改。</p>\n<p>下面图示的方式给与说明：<br><img src=\"\\images\\pasted-42.png\" alt=\"upload successful\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>关于java对象的使用，java编码的一个基本能力，但事实上，业务开发中，往往会有疏忽，下面从易极付支付引擎一个bug再次剖析java对象的使用。</p>\n<p>业务场景：支付引擎转账-定时任务批量加载挂起的数据执行转账并异步回执<br>                1、批量查询挂起的转账数据，list<br>                2、循环遍历list执行转换并回执<br>                    2.1、将数据转换到业务上下文中<br>                    2.2、执行转账（数据从业务上下文中获取）<br>                    2.3、发布转账回执事件（数据从业务上下文中获取）<br>                 3、在新线程中异步回执（订阅到2.3发布的回执事件后与2并行执行）</p>\n<p>上述是简化后的业务流程，下面加以核心代码说明支付引擎的实现逻辑<br>                1、批量查询挂起的转账数据，list </p>\n<p><img src=\"\\images\\pasted-24.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-25.png\" alt=\"upload successful\"><br> 2、循环遍历list执行转换并回执<br>     2.1、将数据转换到业务上下文中</p>\n<p><img src=\"\\images\\pasted-26.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-27.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-28.png\" alt=\"upload successful\"><br>这儿调用的是易极付common-util中提供的对象转换方法，源码如下：</p>\n<p><img src=\"\\images\\pasted-30.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-31.png\" alt=\"upload successful\"></p>\n<p> 2.2、执行转账（数据从业务上下文中获取）<br><img src=\"\\images\\pasted-32.png\" alt=\"upload successful\"></p>\n<p>2.3、发布转账回执事件（数据从业务上下文中获取）<br><img src=\"\\images\\pasted-33.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-34.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-35.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-36.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-37.png\" alt=\"upload successful\"></p>\n<p>3、在新线程中异步回执（订阅到2.3发布的回执事件后与2并行执行）<br><img src=\"\\images\\pasted-38.png\" alt=\"upload successful\"></p>\n<p>上述逻辑，经过实际测试，存在严重问题，问题如下：<br>异步回执时，拿到的数据并不是实际预期的数据，而被篡改了，可以看见的是，执行异步回执时，拿到了list循环遍历后续的数据。</p>\n<p>分析问题，很明显，我们看到了2.1这么一行代码：<br><img src=\"\\images\\pasted-39.png\" alt=\"upload successful\"><br>那么，当前2.2转账完成后，发出2.3异步回执事件，3执行回执是异步的（并行的），此时下一次循环完全可能已经再次执行了2.1这行代码，那么就有问题！！！  为什么？</p>\n<p>上述判断只是初次分析，但经过进一步分析，我们发现其实3中的数据已经在2.3中将数据封装好，3只是从封装好的数据中取出相应的数据而已，2.3是同步执行过程，那么，下一次2.1执行时，一定是在上一次2.3执行完成之后！</p>\n<p>但是，经测试，这儿确实是有问题的，<br>于是，再次分析：<br>2.1进行数据转换时，通过源码分析，我们得出，此处只是将数据的值一个一个的set到业务上下文的数据对象中，那么意味着什么？  业务上下午serviceContext是一个全局对象，进入执行逻辑前已经初始化完成，那么，其内存已经开辟完成，意味着该对象中数据对象的内存也已开辟完成。那么，set值只是为那一块内存进行了赋值操作<br>2.3通过getEntityObject将数据赋给新的对象I，那么，此时I和业务上下午中的数据对象都是指向同一块内存区域<br>3/2.1 此时3和下一个2.1并行执行，3中获取数据对象的值，而1.2给上下文数据对象赋予新的值， 那么，3是从这块内存区域取值，1.2是给这块内存区域赋值，一旦1.2执行在前，那么3拿到的当然是重新赋予的值。</p>\n<p>通过上述分析，我们知道了问题根源，那么，如何改造？<br>很简单<br>修改2.1的代码为<br><img src=\"\\images\\pasted-40.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-41.png\" alt=\"upload successful\"><br>很显然，同样是给业务上下午数据对象赋值，与上面的方案区别在于，此处是将上下午数据对象指向的新的内存地址。<br>那么执行2.3时，通过getEntityObject将数据赋给新的对象I，其所指向的内存地址也是这块新的地址<br>执行3/2.1时，3依旧从这块内存地址取值，而2.1则是将上下午数据对象指向另一块内存地址，毫不冲突，更谈不上数据篡改。</p>\n<p>下面图示的方式给与说明：<br><img src=\"\\images\\pasted-42.png\" alt=\"upload successful\"></p>\n"},{"title":"jdk8-dump异常","author":"Xiang Chuang","date":"2018-09-10T02:36:00.000Z","_content":"![upload successful](\\images\\pasted-1.png)\n易极付代扣应用疑似存在内存泄漏，因此，尝试进行dump分析，后发现dump一直失败，报错如上，dump命令为：\n jmap -F -dump:format=b,file=盘符:/XXX.hprof <pid>\n\n原因分析：\nhttps://bugs.java.com/view_bug.do?bug_id=8044416\n\n\n\n解决方案： \n1、jmap -dump:format=b,file=盘符:/XXX.hprof <pid>，同时应用启动时，jvm参数-XX:+StartAttachListener\n    use flag -XX:+StartAttachListener in target java process and make sure you run jmap within the same user as main java process\n\n2、升级jdk版本到1.8.0_60以上8u60(Fixed)9b64(Fixed) ","source":"_posts/jdk8-dump异常.md","raw":"title: jdk8-dump异常\nauthor: Xiang Chuang\ntags:\n  - java\n  - jdk8\n  - dump\ncategories:\n  - 这些年，那些坑\ndate: 2018-09-10 10:36:00\n---\n![upload successful](\\images\\pasted-1.png)\n易极付代扣应用疑似存在内存泄漏，因此，尝试进行dump分析，后发现dump一直失败，报错如上，dump命令为：\n jmap -F -dump:format=b,file=盘符:/XXX.hprof <pid>\n\n原因分析：\nhttps://bugs.java.com/view_bug.do?bug_id=8044416\n\n\n\n解决方案： \n1、jmap -dump:format=b,file=盘符:/XXX.hprof <pid>，同时应用启动时，jvm参数-XX:+StartAttachListener\n    use flag -XX:+StartAttachListener in target java process and make sure you run jmap within the same user as main java process\n\n2、升级jdk版本到1.8.0_60以上8u60(Fixed)9b64(Fixed) ","slug":"jdk8-dump异常","published":1,"updated":"2019-09-30T07:34:10.837Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3e5th2k001ap966hpb5fgmd","content":"<p><img src=\"\\images\\pasted-1.png\" alt=\"upload successful\"><br>易极付代扣应用疑似存在内存泄漏，因此，尝试进行dump分析，后发现dump一直失败，报错如上，dump命令为：<br> jmap -F -dump:format=b,file=盘符:/XXX.hprof <pid></pid></p>\n<p>原因分析：<br><a href=\"https://bugs.java.com/view_bug.do?bug_id=8044416\" target=\"_blank\" rel=\"noopener\">https://bugs.java.com/view_bug.do?bug_id=8044416</a></p>\n<p>解决方案：<br>1、jmap -dump:format=b,file=盘符:/XXX.hprof <pid>，同时应用启动时，jvm参数-XX:+StartAttachListener<br>    use flag -XX:+StartAttachListener in target java process and make sure you run jmap within the same user as main java process</pid></p>\n<p>2、升级jdk版本到1.8.0_60以上8u60(Fixed)9b64(Fixed) </p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"\\images\\pasted-1.png\" alt=\"upload successful\"><br>易极付代扣应用疑似存在内存泄漏，因此，尝试进行dump分析，后发现dump一直失败，报错如上，dump命令为：<br> jmap -F -dump:format=b,file=盘符:/XXX.hprof <pid></pid></p>\n<p>原因分析：<br><a href=\"https://bugs.java.com/view_bug.do?bug_id=8044416\" target=\"_blank\" rel=\"noopener\">https://bugs.java.com/view_bug.do?bug_id=8044416</a></p>\n<p>解决方案：<br>1、jmap -dump:format=b,file=盘符:/XXX.hprof <pid>，同时应用启动时，jvm参数-XX:+StartAttachListener<br>    use flag -XX:+StartAttachListener in target java process and make sure you run jmap within the same user as main java process</pid></p>\n<p>2、升级jdk版本到1.8.0_60以上8u60(Fixed)9b64(Fixed) </p>\n"},{"title":"linux-tail命令不生效","author":"Xiang Chuang","date":"2017-07-20T04:30:00.000Z","_content":"tail: option used in invalid context -- 1\n\n遇到此类命令使用不合法的警告时，可以which tail或者whereis tail 看看命令是否被使用了别名","source":"_posts/linux-tail命令不生效.md","raw":"title: linux-tail命令不生效\nauthor: Xiang Chuang\ntags:\n  - linux\n  - tail\ncategories:\n  - 爱学爱问\ndate: 2017-07-20 12:30:00\n---\ntail: option used in invalid context -- 1\n\n遇到此类命令使用不合法的警告时，可以which tail或者whereis tail 看看命令是否被使用了别名","slug":"linux-tail命令不生效","published":1,"updated":"2019-09-30T07:34:10.837Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3e5th2l001cp966vdytjt9l","content":"<p>tail: option used in invalid context – 1</p>\n<p>遇到此类命令使用不合法的警告时，可以which tail或者whereis tail 看看命令是否被使用了别名</p>\n","site":{"data":{}},"excerpt":"","more":"<p>tail: option used in invalid context – 1</p>\n<p>遇到此类命令使用不合法的警告时，可以which tail或者whereis tail 看看命令是否被使用了别名</p>\n"},{"title":"maven-Failed to execute goal org.apache.maven.plugins:maven-enforcer-plugin:","author":"Xiang Chuang","date":"2017-07-20T04:30:00.000Z","_content":"maven带的强制或者自定义得强制，导致打包不过。\n\ninfo：\n\nutil:jar:2.2.20150520\nFound Banned Dependency: org.slf4j:slf4j-log4j12:jar:1.7.10\nUse 'mvn dependency:tree' to locate the source of the banned dependencies.\n\n\n禁止依赖org.slf4j:slf4j-log4j12:jar，因此打包不过，需要排除依赖","source":"_posts/maven-Failed-to-execute-goal-org-apache-maven-plugins-maven-enforcer-plugin.md","raw":"title: 'maven-Failed to execute goal org.apache.maven.plugins:maven-enforcer-plugin:'\nauthor: Xiang Chuang\ntags:\n  - maven\ncategories:\n  - 爱学爱问\ndate: 2017-07-20 12:30:00\n---\nmaven带的强制或者自定义得强制，导致打包不过。\n\ninfo：\n\nutil:jar:2.2.20150520\nFound Banned Dependency: org.slf4j:slf4j-log4j12:jar:1.7.10\nUse 'mvn dependency:tree' to locate the source of the banned dependencies.\n\n\n禁止依赖org.slf4j:slf4j-log4j12:jar，因此打包不过，需要排除依赖","slug":"maven-Failed-to-execute-goal-org-apache-maven-plugins-maven-enforcer-plugin","published":1,"updated":"2019-09-30T07:34:10.837Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3e5th2m001fp966dzqlef4f","content":"<p>maven带的强制或者自定义得强制，导致打包不过。</p>\n<p>info：</p>\n<p>util:jar:2.2.20150520<br>Found Banned Dependency: org.slf4j:slf4j-log4j12:jar:1.7.10<br>Use ‘mvn dependency:tree’ to locate the source of the banned dependencies.</p>\n<p>禁止依赖org.slf4j:slf4j-log4j12:jar，因此打包不过，需要排除依赖</p>\n","site":{"data":{}},"excerpt":"","more":"<p>maven带的强制或者自定义得强制，导致打包不过。</p>\n<p>info：</p>\n<p>util:jar:2.2.20150520<br>Found Banned Dependency: org.slf4j:slf4j-log4j12:jar:1.7.10<br>Use ‘mvn dependency:tree’ to locate the source of the banned dependencies.</p>\n<p>禁止依赖org.slf4j:slf4j-log4j12:jar，因此打包不过，需要排除依赖</p>\n"},{"title":"maven-No plugin found for prefix 'tomcat7'","author":"Xiang Chuang","date":"2017-07-20T04:30:00.000Z","_content":"没有tomcat7插件\n解决：在parent中\n\n <plugin>\n         <groupId>org.apache.tomcat.maven</groupId>\n         <artifactId>tomcat7-maven-plugin</artifactId>\n         <version>2.2</version>\n         <configuration>\n             <port>8091</port>\n             <uriEncoding>UTF-8</uriEncoding>\n             <path>/</path>\n         </configuration>\n       </plugin>","source":"_posts/maven-No-plugin-found-for-prefix-tomcat7.md","raw":"title: maven-No plugin found for prefix 'tomcat7'\nauthor: Xiang Chuang\ntags:\n  - maven\ncategories:\n  - 爱学爱问\ndate: 2017-07-20 12:30:00\n---\n没有tomcat7插件\n解决：在parent中\n\n <plugin>\n         <groupId>org.apache.tomcat.maven</groupId>\n         <artifactId>tomcat7-maven-plugin</artifactId>\n         <version>2.2</version>\n         <configuration>\n             <port>8091</port>\n             <uriEncoding>UTF-8</uriEncoding>\n             <path>/</path>\n         </configuration>\n       </plugin>","slug":"maven-No-plugin-found-for-prefix-tomcat7","published":1,"updated":"2019-09-30T07:34:10.838Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3e5th2n001hp966bjajzkxq","content":"<p>没有tomcat7插件<br>解决：在parent中</p>\n <plugin><br>         <groupid>org.apache.tomcat.maven</groupid><br>         <artifactid>tomcat7-maven-plugin</artifactid><br>         <version>2.2</version><br>         <configuration><br>             <port>8091</port><br>             <uriencoding>UTF-8</uriencoding><br>             <path>/</path><br>         </configuration><br>       </plugin>","site":{"data":{}},"excerpt":"","more":"<p>没有tomcat7插件<br>解决：在parent中</p>\n <plugin><br>         <groupid>org.apache.tomcat.maven</groupid><br>         <artifactid>tomcat7-maven-plugin</artifactid><br>         <version>2.2</version><br>         <configuration><br>             <port>8091</port><br>             <uriencoding>UTF-8</uriencoding><br>             <path>/</path><br>         </configuration><br>       </plugin>"},{"title":"maven-Plugin execution not covered by lifecycle configuration","author":"Xiang Chuang","date":"2017-07-20T04:30:00.000Z","_content":"description:Project build lifecycle mapping can be configured in a project’s pom.xml, contributed by Eclipse plugins, or defaulted to the commonly used Maven plugins shipped with m2e. We call these “lifecycle mapping metadata sources”. m2e will create error marker like below for all plugin executions that do not have lifecycle mapping in any of the mapping metadata sources.\n\nM2Eclipse matches plugin executions to actions using combination of plugin groupId, artifactId, version range and goal. There are three basic actions that M2Eclipse can be instructed to do with a plugin execution – ignore, execute and delegate to a project configurator(recommended).","source":"_posts/maven-Plugin-execution-not-covered-by-lifecycle-configuration.md","raw":"title: maven-Plugin execution not covered by lifecycle configuration\nauthor: Xiang Chuang\ntags:\n  - maven\ncategories:\n  - 爱学爱问\ndate: 2017-07-20 12:30:00\n---\ndescription:Project build lifecycle mapping can be configured in a project’s pom.xml, contributed by Eclipse plugins, or defaulted to the commonly used Maven plugins shipped with m2e. We call these “lifecycle mapping metadata sources”. m2e will create error marker like below for all plugin executions that do not have lifecycle mapping in any of the mapping metadata sources.\n\nM2Eclipse matches plugin executions to actions using combination of plugin groupId, artifactId, version range and goal. There are three basic actions that M2Eclipse can be instructed to do with a plugin execution – ignore, execute and delegate to a project configurator(recommended).","slug":"maven-Plugin-execution-not-covered-by-lifecycle-configuration","published":1,"updated":"2019-09-30T07:34:10.838Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3e5th2o001lp966evhdns57","content":"<p>description:Project build lifecycle mapping can be configured in a project’s pom.xml, contributed by Eclipse plugins, or defaulted to the commonly used Maven plugins shipped with m2e. We call these “lifecycle mapping metadata sources”. m2e will create error marker like below for all plugin executions that do not have lifecycle mapping in any of the mapping metadata sources.</p>\n<p>M2Eclipse matches plugin executions to actions using combination of plugin groupId, artifactId, version range and goal. There are three basic actions that M2Eclipse can be instructed to do with a plugin execution – ignore, execute and delegate to a project configurator(recommended).</p>\n","site":{"data":{}},"excerpt":"","more":"<p>description:Project build lifecycle mapping can be configured in a project’s pom.xml, contributed by Eclipse plugins, or defaulted to the commonly used Maven plugins shipped with m2e. We call these “lifecycle mapping metadata sources”. m2e will create error marker like below for all plugin executions that do not have lifecycle mapping in any of the mapping metadata sources.</p>\n<p>M2Eclipse matches plugin executions to actions using combination of plugin groupId, artifactId, version range and goal. There are three basic actions that M2Eclipse can be instructed to do with a plugin execution – ignore, execute and delegate to a project configurator(recommended).</p>\n"},{"title":"mongo-查询报no property found on","author":"Xiang Chuang","date":"2018-12-07T07:11:00.000Z","_content":"No property null found on entity com.yiji.dtrace.core.SpanId to bind constructor parameter to!\n\n现象：线上和本地都没问题，同样的应用同样的数据，就测试环境有问题\n\n\n如果有自定义转换器走这，没得 就会默认\n\n![upload successful](\\images\\pasted-6.png)\n\n![upload successful](\\images\\pasted-7.png)\n加载构造函数，这里是通过java8新特性，直接获取到了构造函数的入参名称，然后以此为key获取mongo集合对应的值\n![upload successful](\\images\\pasted-8.png)\n\n![upload successful](\\images\\pasted-9.png)\n\n![upload successful](\\images\\pasted-10.png)\n\n![upload successful](\\images\\pasted-11.png)\n根据构造函数的入参获取mongo查出来的值，问题出在constructor.getParameters()获取入参时候， 取得了一个null\n\n![upload successful](\\images\\pasted-12.png)\n\nNo property null found on entity com.yiji.dtrace.core.SpanId to bind constructor parameter to!\n\n问题在于：\n测试环境apm启动时，使用了javaagent代理，代理本身就是apm的，里面也有com.yiji.dtrace.core.SpanId，因此出现了冲突！！！！！\n\njava8通过以下类提供了反射获取方法参数名成的能力\n\n![upload successful](\\images\\pasted-14.png)\n\n![upload successful](\\images\\pasted-15.png)","source":"_posts/mongo-查询报no-property-found-on.md","raw":"title: mongo-查询报no property found on\nauthor: Xiang Chuang\ntags:\n  - db\n  - mongo\ncategories:\n  - 这些年，那些坑\ndate: 2018-12-07 15:11:00\n---\nNo property null found on entity com.yiji.dtrace.core.SpanId to bind constructor parameter to!\n\n现象：线上和本地都没问题，同样的应用同样的数据，就测试环境有问题\n\n\n如果有自定义转换器走这，没得 就会默认\n\n![upload successful](\\images\\pasted-6.png)\n\n![upload successful](\\images\\pasted-7.png)\n加载构造函数，这里是通过java8新特性，直接获取到了构造函数的入参名称，然后以此为key获取mongo集合对应的值\n![upload successful](\\images\\pasted-8.png)\n\n![upload successful](\\images\\pasted-9.png)\n\n![upload successful](\\images\\pasted-10.png)\n\n![upload successful](\\images\\pasted-11.png)\n根据构造函数的入参获取mongo查出来的值，问题出在constructor.getParameters()获取入参时候， 取得了一个null\n\n![upload successful](\\images\\pasted-12.png)\n\nNo property null found on entity com.yiji.dtrace.core.SpanId to bind constructor parameter to!\n\n问题在于：\n测试环境apm启动时，使用了javaagent代理，代理本身就是apm的，里面也有com.yiji.dtrace.core.SpanId，因此出现了冲突！！！！！\n\njava8通过以下类提供了反射获取方法参数名成的能力\n\n![upload successful](\\images\\pasted-14.png)\n\n![upload successful](\\images\\pasted-15.png)","slug":"mongo-查询报no-property-found-on","published":1,"updated":"2019-09-30T07:34:10.838Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3e5th2p001op966bhrsu3jm","content":"<p>No property null found on entity com.yiji.dtrace.core.SpanId to bind constructor parameter to!</p>\n<p>现象：线上和本地都没问题，同样的应用同样的数据，就测试环境有问题</p>\n<p>如果有自定义转换器走这，没得 就会默认</p>\n<p><img src=\"\\images\\pasted-6.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-7.png\" alt=\"upload successful\"><br>加载构造函数，这里是通过java8新特性，直接获取到了构造函数的入参名称，然后以此为key获取mongo集合对应的值<br><img src=\"\\images\\pasted-8.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-9.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-10.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-11.png\" alt=\"upload successful\"><br>根据构造函数的入参获取mongo查出来的值，问题出在constructor.getParameters()获取入参时候， 取得了一个null</p>\n<p><img src=\"\\images\\pasted-12.png\" alt=\"upload successful\"></p>\n<p>No property null found on entity com.yiji.dtrace.core.SpanId to bind constructor parameter to!</p>\n<p>问题在于：<br>测试环境apm启动时，使用了javaagent代理，代理本身就是apm的，里面也有com.yiji.dtrace.core.SpanId，因此出现了冲突！！！！！</p>\n<p>java8通过以下类提供了反射获取方法参数名成的能力</p>\n<p><img src=\"\\images\\pasted-14.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-15.png\" alt=\"upload successful\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>No property null found on entity com.yiji.dtrace.core.SpanId to bind constructor parameter to!</p>\n<p>现象：线上和本地都没问题，同样的应用同样的数据，就测试环境有问题</p>\n<p>如果有自定义转换器走这，没得 就会默认</p>\n<p><img src=\"\\images\\pasted-6.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-7.png\" alt=\"upload successful\"><br>加载构造函数，这里是通过java8新特性，直接获取到了构造函数的入参名称，然后以此为key获取mongo集合对应的值<br><img src=\"\\images\\pasted-8.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-9.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-10.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-11.png\" alt=\"upload successful\"><br>根据构造函数的入参获取mongo查出来的值，问题出在constructor.getParameters()获取入参时候， 取得了一个null</p>\n<p><img src=\"\\images\\pasted-12.png\" alt=\"upload successful\"></p>\n<p>No property null found on entity com.yiji.dtrace.core.SpanId to bind constructor parameter to!</p>\n<p>问题在于：<br>测试环境apm启动时，使用了javaagent代理，代理本身就是apm的，里面也有com.yiji.dtrace.core.SpanId，因此出现了冲突！！！！！</p>\n<p>java8通过以下类提供了反射获取方法参数名成的能力</p>\n<p><img src=\"\\images\\pasted-14.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-15.png\" alt=\"upload successful\"></p>\n"},{"title":"maven-默认jdk版本","author":"Xiang Chuang","date":"2017-07-20T04:30:00.000Z","_content":"修改maven默认的jdk版本，想改彻底需要在maven的全局配文件（settings.xml）增加以下信息：\n\n在profiles 节点下增加：\n\n![upload successful](\\images\\pasted-55.png)\n<profile>\n    <id>jdk-1.6</id>\n    <activation>\n        <activeByDefault>true</activeByDefault>\n        <jdk>1.6</jdk>\n    </activation>\n    <properties>\n        <maven.compiler.source>1.6</maven.compiler.source>\n        <maven.compiler.target>1.6</maven.compiler.target>\n        <maven.compiler.compilerVersion>1.6</maven.compiler.compilerVersion>\n    </properties>\n</profile> ","source":"_posts/maven-默认jdk版本.md","raw":"title: maven-默认jdk版本\nauthor: Xiang Chuang\ntags:\n  - maven\n  - jdk\ncategories:\n  - 爱学爱问\ndate: 2017-07-20 12:30:00\n---\n修改maven默认的jdk版本，想改彻底需要在maven的全局配文件（settings.xml）增加以下信息：\n\n在profiles 节点下增加：\n\n![upload successful](\\images\\pasted-55.png)\n<profile>\n    <id>jdk-1.6</id>\n    <activation>\n        <activeByDefault>true</activeByDefault>\n        <jdk>1.6</jdk>\n    </activation>\n    <properties>\n        <maven.compiler.source>1.6</maven.compiler.source>\n        <maven.compiler.target>1.6</maven.compiler.target>\n        <maven.compiler.compilerVersion>1.6</maven.compiler.compilerVersion>\n    </properties>\n</profile> ","slug":"maven-默认jdk版本","published":1,"updated":"2019-09-30T07:34:10.838Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3e5th2p001sp966cfe2wv07","content":"<p>修改maven默认的jdk版本，想改彻底需要在maven的全局配文件（settings.xml）增加以下信息：</p>\n<p>在profiles 节点下增加：</p>\n<p><img src=\"\\images\\pasted-55.png\" alt=\"upload successful\"></p>\n<profile><br>    <id>jdk-1.6</id><br>    <activation><br>        <activebydefault>true</activebydefault><br>        <jdk>1.6</jdk><br>    </activation><br>    <properties><br>        &lt;maven.compiler.source&gt;1.6&lt;/maven.compiler.source&gt;<br>        &lt;maven.compiler.target&gt;1.6&lt;/maven.compiler.target&gt;<br>        &lt;maven.compiler.compilerVersion&gt;1.6&lt;/maven.compiler.compilerVersion&gt;<br>    </properties><br></profile> ","site":{"data":{}},"excerpt":"","more":"<p>修改maven默认的jdk版本，想改彻底需要在maven的全局配文件（settings.xml）增加以下信息：</p>\n<p>在profiles 节点下增加：</p>\n<p><img src=\"\\images\\pasted-55.png\" alt=\"upload successful\"></p>\n<profile><br>    <id>jdk-1.6</id><br>    <activation><br>        <activebydefault>true</activebydefault><br>        <jdk>1.6</jdk><br>    </activation><br>    <properties><br>        &lt;maven.compiler.source&gt;1.6&lt;/maven.compiler.source&gt;<br>        &lt;maven.compiler.target&gt;1.6&lt;/maven.compiler.target&gt;<br>        &lt;maven.compiler.compilerVersion&gt;1.6&lt;/maven.compiler.compilerVersion&gt;<br>    </properties><br></profile> "},{"title":"mysql -TIMESTAMP","author":"Xiang Chuang","date":"2017-07-20T04:30:00.000Z","_content":"The TIMESTAMP data type is used for values that contain both date and time parts. TIMESTAMP has a range of '1970-01-01 00:00:01' UTC to '2038-01-19 03:14:07' UTCThe TIMESTAMP data type is used for values that contain both date and time parts. TIMESTAMP has a range of '1970-01-01 00:00:01' UTC to '2038-01-19 03:14:07' UTC\n\n\nUTC+8: 2038-01-19 11:14:07","source":"_posts/mysql-TIMESTAMP.md","raw":"title: mysql -TIMESTAMP\nauthor: Xiang Chuang\ntags:\n  - mysql\n  - db\ncategories:\n  - 爱学爱问\ndate: 2017-07-20 12:30:00\n---\nThe TIMESTAMP data type is used for values that contain both date and time parts. TIMESTAMP has a range of '1970-01-01 00:00:01' UTC to '2038-01-19 03:14:07' UTCThe TIMESTAMP data type is used for values that contain both date and time parts. TIMESTAMP has a range of '1970-01-01 00:00:01' UTC to '2038-01-19 03:14:07' UTC\n\n\nUTC+8: 2038-01-19 11:14:07","slug":"mysql-TIMESTAMP","published":1,"updated":"2019-09-30T07:34:10.838Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3e5th2q001vp966hhvyhpel","content":"<p>The TIMESTAMP data type is used for values that contain both date and time parts. TIMESTAMP has a range of ‘1970-01-01 00:00:01’ UTC to ‘2038-01-19 03:14:07’ UTCThe TIMESTAMP data type is used for values that contain both date and time parts. TIMESTAMP has a range of ‘1970-01-01 00:00:01’ UTC to ‘2038-01-19 03:14:07’ UTC</p>\n<p>UTC+8: 2038-01-19 11:14:07</p>\n","site":{"data":{}},"excerpt":"","more":"<p>The TIMESTAMP data type is used for values that contain both date and time parts. TIMESTAMP has a range of ‘1970-01-01 00:00:01’ UTC to ‘2038-01-19 03:14:07’ UTCThe TIMESTAMP data type is used for values that contain both date and time parts. TIMESTAMP has a range of ‘1970-01-01 00:00:01’ UTC to ‘2038-01-19 03:14:07’ UTC</p>\n<p>UTC+8: 2038-01-19 11:14:07</p>\n"},{"title":"rabbitmq-报not equivalent错","author":"Xiang Chuang","date":"2018-07-19T09:28:00.000Z","_content":"问题：\n支付引擎往monitor发送监控mq消息时，报错：\n2018-07-19 15:54:35.423 ERROR [AMQP Connection 10.21.30.153:5672] CachingConnectionFactory-- Channel shutdown: channel error; protocol method: #method<channel.close>(reply-code=406, reply-text=PRECONDITION_FAILED - parameters for queue 'queue.monitor.logmsg' in vhost '/' not equivalent, class-id=50, method-id=10)\nCaused by: com.rabbitmq.client.ShutdownSignalException: channel error; protocol method: #method<channel.close>(reply-code=406, reply-text=PRECONDITION_FAILED - parameters for queue 'queue.monitor.logmsg' in vhost '/' not equivalent, class-id=50, method-id=10)\n\n原因：\n支付引擎使用monitor客户端发送mq消息，由如下逻辑：\n![upload successful](\\images\\pasted-43.png)\n\n![upload successful](\\images\\pasted-44.png)\n\n![upload successful](\\images\\pasted-45.png)\n\n![upload successful](\\images\\pasted-46.png)\n问题出在：new Queue(XXX);\n我们来看看参数：true、false、false。  但是mq服务器上当前的队列是monitor系统通过spring集成创建的，参数为：\nfalse、false、true  同样的队列名，参数不一致，mq会报上述错误\n![upload successful](\\images\\pasted-47.png)\n\n![upload successful](\\images\\pasted-48.png)\n解决方案：\n合理的方案：保持参数一致\n临时方案：停止monitor，这是队列自动删除了，启动支付引擎，创建队列，再启动monitor，因为monitor是采用spring方式创建队列，不会尝试重新创建","source":"_posts/rabbitmq-报not-equivalent错.md","raw":"title: rabbitmq-报not equivalent错\nauthor: Xiang Chuang\ntags:\n  - rabbitmq\n  - 消息队列\ncategories:\n  - 这些年，那些坑\ndate: 2018-07-19 17:28:00\n---\n问题：\n支付引擎往monitor发送监控mq消息时，报错：\n2018-07-19 15:54:35.423 ERROR [AMQP Connection 10.21.30.153:5672] CachingConnectionFactory-- Channel shutdown: channel error; protocol method: #method<channel.close>(reply-code=406, reply-text=PRECONDITION_FAILED - parameters for queue 'queue.monitor.logmsg' in vhost '/' not equivalent, class-id=50, method-id=10)\nCaused by: com.rabbitmq.client.ShutdownSignalException: channel error; protocol method: #method<channel.close>(reply-code=406, reply-text=PRECONDITION_FAILED - parameters for queue 'queue.monitor.logmsg' in vhost '/' not equivalent, class-id=50, method-id=10)\n\n原因：\n支付引擎使用monitor客户端发送mq消息，由如下逻辑：\n![upload successful](\\images\\pasted-43.png)\n\n![upload successful](\\images\\pasted-44.png)\n\n![upload successful](\\images\\pasted-45.png)\n\n![upload successful](\\images\\pasted-46.png)\n问题出在：new Queue(XXX);\n我们来看看参数：true、false、false。  但是mq服务器上当前的队列是monitor系统通过spring集成创建的，参数为：\nfalse、false、true  同样的队列名，参数不一致，mq会报上述错误\n![upload successful](\\images\\pasted-47.png)\n\n![upload successful](\\images\\pasted-48.png)\n解决方案：\n合理的方案：保持参数一致\n临时方案：停止monitor，这是队列自动删除了，启动支付引擎，创建队列，再启动monitor，因为monitor是采用spring方式创建队列，不会尝试重新创建","slug":"rabbitmq-报not-equivalent错","published":1,"updated":"2019-09-30T07:34:10.838Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3e5th2r001zp966fcfle4n5","content":"<p>问题：<br>支付引擎往monitor发送监控mq消息时，报错：<br>2018-07-19 15:54:35.423 ERROR [AMQP Connection 10.21.30.153:5672] CachingConnectionFactory– Channel shutdown: channel error; protocol method: #method&lt;channel.close&gt;(reply-code=406, reply-text=PRECONDITION_FAILED - parameters for queue ‘queue.monitor.logmsg’ in vhost ‘/‘ not equivalent, class-id=50, method-id=10)<br>Caused by: com.rabbitmq.client.ShutdownSignalException: channel error; protocol method: #method&lt;channel.close&gt;(reply-code=406, reply-text=PRECONDITION_FAILED - parameters for queue ‘queue.monitor.logmsg’ in vhost ‘/‘ not equivalent, class-id=50, method-id=10)</p>\n<p>原因：<br>支付引擎使用monitor客户端发送mq消息，由如下逻辑：<br><img src=\"\\images\\pasted-43.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-44.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-45.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-46.png\" alt=\"upload successful\"><br>问题出在：new Queue(XXX);<br>我们来看看参数：true、false、false。  但是mq服务器上当前的队列是monitor系统通过spring集成创建的，参数为：<br>false、false、true  同样的队列名，参数不一致，mq会报上述错误<br><img src=\"\\images\\pasted-47.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-48.png\" alt=\"upload successful\"><br>解决方案：<br>合理的方案：保持参数一致<br>临时方案：停止monitor，这是队列自动删除了，启动支付引擎，创建队列，再启动monitor，因为monitor是采用spring方式创建队列，不会尝试重新创建</p>\n","site":{"data":{}},"excerpt":"","more":"<p>问题：<br>支付引擎往monitor发送监控mq消息时，报错：<br>2018-07-19 15:54:35.423 ERROR [AMQP Connection 10.21.30.153:5672] CachingConnectionFactory– Channel shutdown: channel error; protocol method: #method&lt;channel.close&gt;(reply-code=406, reply-text=PRECONDITION_FAILED - parameters for queue ‘queue.monitor.logmsg’ in vhost ‘/‘ not equivalent, class-id=50, method-id=10)<br>Caused by: com.rabbitmq.client.ShutdownSignalException: channel error; protocol method: #method&lt;channel.close&gt;(reply-code=406, reply-text=PRECONDITION_FAILED - parameters for queue ‘queue.monitor.logmsg’ in vhost ‘/‘ not equivalent, class-id=50, method-id=10)</p>\n<p>原因：<br>支付引擎使用monitor客户端发送mq消息，由如下逻辑：<br><img src=\"\\images\\pasted-43.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-44.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-45.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-46.png\" alt=\"upload successful\"><br>问题出在：new Queue(XXX);<br>我们来看看参数：true、false、false。  但是mq服务器上当前的队列是monitor系统通过spring集成创建的，参数为：<br>false、false、true  同样的队列名，参数不一致，mq会报上述错误<br><img src=\"\\images\\pasted-47.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-48.png\" alt=\"upload successful\"><br>解决方案：<br>合理的方案：保持参数一致<br>临时方案：停止monitor，这是队列自动删除了，启动支付引擎，创建队列，再启动monitor，因为monitor是采用spring方式创建队列，不会尝试重新创建</p>\n"},{"title":"mysql数据库wait_timeout问题","author":"Xiang Chuang","date":"2019-07-11T06:59:00.000Z","_content":"背景：近日与猪方合作一项目，项目交付后，对方反馈测试环境老是出现数据库异常（下面给出堆栈日志），并且对方的其他应用没有问题。但交付前，此项目在我们的环境（代码、数据库等都是我们的）中测试并无问题。\n\n问题现象：\n```\nat java.lang.Thread.run(Thread.java:748)\nCaused by: com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure\n\nThe last packet successfully received from the server was 56,397 milliseconds ago.  The last packet sent successfully to the server was 0 milliseconds ag\no.\n        at sun.reflect.GeneratedConstructorAccessor47.newInstance(Unknown Source)\n        at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n        at java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n        at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)\n        at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:981)\n        at com.mysql.jdbc.MysqlIO.reuseAndReadPacket(MysqlIO.java:3465)\n        at com.mysql.jdbc.MysqlIO.reuseAndReadPacket(MysqlIO.java:3365)\n        at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3805)\n        at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2478)\n        at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2625)\n        at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2547)\n        at com.mysql.jdbc.ConnectionImpl.setAutoCommit(ConnectionImpl.java:4874)\n        at com.alibaba.druid.pool.DruidPooledConnection.setAutoCommit(DruidPooledConnection.java:712)\n        at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:225)\n        ... 45 common frames omitted\nCaused by: java.io.EOFException: Can not read response from server. Expected to read 4 bytes, read 0 bytes before connection was unexpectedly lost.\n        at com.mysql.jdbc.MysqlIO.readFully(MysqlIO.java:2957)\n        at com.mysql.jdbc.MysqlIO.reuseAndReadPacket(MysqlIO.java:3375)\n        ... 53 common frames omitted\n2019-07-11 13:41:00.311 [TxId:test_1562754979799^1562754982427^117,SpanId:2404734433174193776] [INFO ] c.z.c.p.b.a.i.w.WithdrawTransImpl:116 - 查询交易结\n束TradeQueryResult [sucAmount=0, transDate=null]\n2019-07-11 13:42:47.097 [TxId:,SpanId:] [INFO ] c.z.c.c.a.r.DefaultRealtimeMonitor:52 - realtime monitor request end, api server return message : LOOP\n2019-07-11 13:42:47.097 [TxId:,SpanId:] [INFO ] c.z.c.c.a.r.DefaultRealtimeMonitor:49 - realtime monitor request begin, url -> http://api.config.zhubajie\n.la/realtime/pull\n2019-07-11 13:44:00.415 [TxId:192.168.25.11.1015^1561538402946^21456,Span\n```\n看到这段日志，我注意到“Caused by: com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure The last packet successfully received from the server was 56,397 milliseconds ago.  The last packet sent successfully to the server was 0 milliseconds ag\no.”， 56397毫秒，这个数字很扎眼！！！ 因为我们使用的druid连接池，最小生存时间和需要关闭的空闲连接时间都是60s，说明了一个问题，所拿到的连接未超过60s，所以仍在连接池中，但是该连接貌似是失效了。分析到这儿，我猜测猪方mysql数据库的wait_timeout估计是进行了修改且小于56.397秒（默认是8小时，我们工时使用默认值），于是来到猪方的数据库，\n```\nshow global variables like '%timeout';\nconnect_timeout\t10\ndelayed_insert_timeout\t300\nhave_statement_timeout\tYES\ninnodb_flush_log_at_timeout\t1\ninnodb_lock_wait_timeout\t120\ninnodb_rollback_on_timeout\tOFF\ninteractive_timeout\t30\nlock_wait_timeout\t31536000\nnet_read_timeout\t5\nnet_write_timeout\t5\nrpl_semi_sync_master_timeout\t10000\nrpl_stop_slave_timeout\t31536000\nslave_net_timeout\t60\nthread_pool_idle_timeout\t60\ntokudb_last_lock_timeout\t\ntokudb_lock_timeout\t4000\nwait_timeout\t30\n```\n好吧，猜想正确，他们讲wait_timeout设置成了30s。\n\n同时他们自己的连接池配置是\n```\n dataSource.setTimeBetweenEvictionRunsMillis(5000);\n dataSource.setMinEvictableIdleTimeMillis(30000);\n```\n而我们的连接池配置是\n```\n dataSource.setTimeBetweenEvictionRunsMillis(60000);\n dataSource.setMinEvictableIdleTimeMillis(60000);\n```\n\n问题解决！！！\n\n关于wait_timeout，这个参数到底要不要重新设置值没有固定的标准，保障数据库的可用性和性能即可，但应用层必须根据wait_timeout的实际情况进行相应的配置：\n1、最大空闲时间不能大于wait_timeout\n2、可以尝试在数据库连接中增加autoReconnect=true\n3、testWhileIdle=\"true\" timeBetweenEvictionRunsMillis=\"10000\" validationQuery=\"select 1\"\n\n猪方连接池：\n![upload successful](\\images\\pasted-92.png)\n我方连接池：\n\n![upload successful](\\images\\pasted-94.png)","source":"_posts/mysql数据库wait-timeout问题.md","raw":"title: mysql数据库wait_timeout问题\nauthor: Xiang Chuang\ntags:\n  - mysql\n  - 连接池\ncategories:\n  - 这些年，那些坑\ndate: 2019-07-11 14:59:00\n---\n背景：近日与猪方合作一项目，项目交付后，对方反馈测试环境老是出现数据库异常（下面给出堆栈日志），并且对方的其他应用没有问题。但交付前，此项目在我们的环境（代码、数据库等都是我们的）中测试并无问题。\n\n问题现象：\n```\nat java.lang.Thread.run(Thread.java:748)\nCaused by: com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure\n\nThe last packet successfully received from the server was 56,397 milliseconds ago.  The last packet sent successfully to the server was 0 milliseconds ag\no.\n        at sun.reflect.GeneratedConstructorAccessor47.newInstance(Unknown Source)\n        at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n        at java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n        at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)\n        at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:981)\n        at com.mysql.jdbc.MysqlIO.reuseAndReadPacket(MysqlIO.java:3465)\n        at com.mysql.jdbc.MysqlIO.reuseAndReadPacket(MysqlIO.java:3365)\n        at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3805)\n        at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2478)\n        at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2625)\n        at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2547)\n        at com.mysql.jdbc.ConnectionImpl.setAutoCommit(ConnectionImpl.java:4874)\n        at com.alibaba.druid.pool.DruidPooledConnection.setAutoCommit(DruidPooledConnection.java:712)\n        at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:225)\n        ... 45 common frames omitted\nCaused by: java.io.EOFException: Can not read response from server. Expected to read 4 bytes, read 0 bytes before connection was unexpectedly lost.\n        at com.mysql.jdbc.MysqlIO.readFully(MysqlIO.java:2957)\n        at com.mysql.jdbc.MysqlIO.reuseAndReadPacket(MysqlIO.java:3375)\n        ... 53 common frames omitted\n2019-07-11 13:41:00.311 [TxId:test_1562754979799^1562754982427^117,SpanId:2404734433174193776] [INFO ] c.z.c.p.b.a.i.w.WithdrawTransImpl:116 - 查询交易结\n束TradeQueryResult [sucAmount=0, transDate=null]\n2019-07-11 13:42:47.097 [TxId:,SpanId:] [INFO ] c.z.c.c.a.r.DefaultRealtimeMonitor:52 - realtime monitor request end, api server return message : LOOP\n2019-07-11 13:42:47.097 [TxId:,SpanId:] [INFO ] c.z.c.c.a.r.DefaultRealtimeMonitor:49 - realtime monitor request begin, url -> http://api.config.zhubajie\n.la/realtime/pull\n2019-07-11 13:44:00.415 [TxId:192.168.25.11.1015^1561538402946^21456,Span\n```\n看到这段日志，我注意到“Caused by: com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure The last packet successfully received from the server was 56,397 milliseconds ago.  The last packet sent successfully to the server was 0 milliseconds ag\no.”， 56397毫秒，这个数字很扎眼！！！ 因为我们使用的druid连接池，最小生存时间和需要关闭的空闲连接时间都是60s，说明了一个问题，所拿到的连接未超过60s，所以仍在连接池中，但是该连接貌似是失效了。分析到这儿，我猜测猪方mysql数据库的wait_timeout估计是进行了修改且小于56.397秒（默认是8小时，我们工时使用默认值），于是来到猪方的数据库，\n```\nshow global variables like '%timeout';\nconnect_timeout\t10\ndelayed_insert_timeout\t300\nhave_statement_timeout\tYES\ninnodb_flush_log_at_timeout\t1\ninnodb_lock_wait_timeout\t120\ninnodb_rollback_on_timeout\tOFF\ninteractive_timeout\t30\nlock_wait_timeout\t31536000\nnet_read_timeout\t5\nnet_write_timeout\t5\nrpl_semi_sync_master_timeout\t10000\nrpl_stop_slave_timeout\t31536000\nslave_net_timeout\t60\nthread_pool_idle_timeout\t60\ntokudb_last_lock_timeout\t\ntokudb_lock_timeout\t4000\nwait_timeout\t30\n```\n好吧，猜想正确，他们讲wait_timeout设置成了30s。\n\n同时他们自己的连接池配置是\n```\n dataSource.setTimeBetweenEvictionRunsMillis(5000);\n dataSource.setMinEvictableIdleTimeMillis(30000);\n```\n而我们的连接池配置是\n```\n dataSource.setTimeBetweenEvictionRunsMillis(60000);\n dataSource.setMinEvictableIdleTimeMillis(60000);\n```\n\n问题解决！！！\n\n关于wait_timeout，这个参数到底要不要重新设置值没有固定的标准，保障数据库的可用性和性能即可，但应用层必须根据wait_timeout的实际情况进行相应的配置：\n1、最大空闲时间不能大于wait_timeout\n2、可以尝试在数据库连接中增加autoReconnect=true\n3、testWhileIdle=\"true\" timeBetweenEvictionRunsMillis=\"10000\" validationQuery=\"select 1\"\n\n猪方连接池：\n![upload successful](\\images\\pasted-92.png)\n我方连接池：\n\n![upload successful](\\images\\pasted-94.png)","slug":"mysql数据库wait-timeout问题","published":1,"updated":"2019-09-30T07:34:10.838Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3e5th2r0021p966ee8psmk7","content":"<p>背景：近日与猪方合作一项目，项目交付后，对方反馈测试环境老是出现数据库异常（下面给出堆栈日志），并且对方的其他应用没有问题。但交付前，此项目在我们的环境（代码、数据库等都是我们的）中测试并无问题。</p>\n<p>问题现象：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">at java.lang.Thread.run(Thread.java:748)</span><br><span class=\"line\">Caused by: com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure</span><br><span class=\"line\"></span><br><span class=\"line\">The last packet successfully received from the server was 56,397 milliseconds ago.  The last packet sent successfully to the server was 0 milliseconds ag</span><br><span class=\"line\">o.</span><br><span class=\"line\">        at sun.reflect.GeneratedConstructorAccessor47.newInstance(Unknown Source)</span><br><span class=\"line\">        at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)</span><br><span class=\"line\">        at java.lang.reflect.Constructor.newInstance(Constructor.java:423)</span><br><span class=\"line\">        at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)</span><br><span class=\"line\">        at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:981)</span><br><span class=\"line\">        at com.mysql.jdbc.MysqlIO.reuseAndReadPacket(MysqlIO.java:3465)</span><br><span class=\"line\">        at com.mysql.jdbc.MysqlIO.reuseAndReadPacket(MysqlIO.java:3365)</span><br><span class=\"line\">        at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3805)</span><br><span class=\"line\">        at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2478)</span><br><span class=\"line\">        at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2625)</span><br><span class=\"line\">        at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2547)</span><br><span class=\"line\">        at com.mysql.jdbc.ConnectionImpl.setAutoCommit(ConnectionImpl.java:4874)</span><br><span class=\"line\">        at com.alibaba.druid.pool.DruidPooledConnection.setAutoCommit(DruidPooledConnection.java:712)</span><br><span class=\"line\">        at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:225)</span><br><span class=\"line\">        ... 45 common frames omitted</span><br><span class=\"line\">Caused by: java.io.EOFException: Can not read response from server. Expected to read 4 bytes, read 0 bytes before connection was unexpectedly lost.</span><br><span class=\"line\">        at com.mysql.jdbc.MysqlIO.readFully(MysqlIO.java:2957)</span><br><span class=\"line\">        at com.mysql.jdbc.MysqlIO.reuseAndReadPacket(MysqlIO.java:3375)</span><br><span class=\"line\">        ... 53 common frames omitted</span><br><span class=\"line\">2019-07-11 13:41:00.311 [TxId:test_1562754979799^1562754982427^117,SpanId:2404734433174193776] [INFO ] c.z.c.p.b.a.i.w.WithdrawTransImpl:116 - 查询交易结</span><br><span class=\"line\">束TradeQueryResult [sucAmount=0, transDate=null]</span><br><span class=\"line\">2019-07-11 13:42:47.097 [TxId:,SpanId:] [INFO ] c.z.c.c.a.r.DefaultRealtimeMonitor:52 - realtime monitor request end, api server return message : LOOP</span><br><span class=\"line\">2019-07-11 13:42:47.097 [TxId:,SpanId:] [INFO ] c.z.c.c.a.r.DefaultRealtimeMonitor:49 - realtime monitor request begin, url -&gt; http://api.config.zhubajie</span><br><span class=\"line\">.la/realtime/pull</span><br><span class=\"line\">2019-07-11 13:44:00.415 [TxId:192.168.25.11.1015^1561538402946^21456,Span</span><br></pre></td></tr></table></figure></p>\n<p>看到这段日志，我注意到“Caused by: com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure The last packet successfully received from the server was 56,397 milliseconds ago.  The last packet sent successfully to the server was 0 milliseconds ag<br>o.”， 56397毫秒，这个数字很扎眼！！！ 因为我们使用的druid连接池，最小生存时间和需要关闭的空闲连接时间都是60s，说明了一个问题，所拿到的连接未超过60s，所以仍在连接池中，但是该连接貌似是失效了。分析到这儿，我猜测猪方mysql数据库的wait_timeout估计是进行了修改且小于56.397秒（默认是8小时，我们工时使用默认值），于是来到猪方的数据库，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show global variables like &apos;%timeout&apos;;</span><br><span class=\"line\">connect_timeout\t10</span><br><span class=\"line\">delayed_insert_timeout\t300</span><br><span class=\"line\">have_statement_timeout\tYES</span><br><span class=\"line\">innodb_flush_log_at_timeout\t1</span><br><span class=\"line\">innodb_lock_wait_timeout\t120</span><br><span class=\"line\">innodb_rollback_on_timeout\tOFF</span><br><span class=\"line\">interactive_timeout\t30</span><br><span class=\"line\">lock_wait_timeout\t31536000</span><br><span class=\"line\">net_read_timeout\t5</span><br><span class=\"line\">net_write_timeout\t5</span><br><span class=\"line\">rpl_semi_sync_master_timeout\t10000</span><br><span class=\"line\">rpl_stop_slave_timeout\t31536000</span><br><span class=\"line\">slave_net_timeout\t60</span><br><span class=\"line\">thread_pool_idle_timeout\t60</span><br><span class=\"line\">tokudb_last_lock_timeout\t</span><br><span class=\"line\">tokudb_lock_timeout\t4000</span><br><span class=\"line\">wait_timeout\t30</span><br></pre></td></tr></table></figure></p>\n<p>好吧，猜想正确，他们讲wait_timeout设置成了30s。</p>\n<p>同时他们自己的连接池配置是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataSource.setTimeBetweenEvictionRunsMillis(5000);</span><br><span class=\"line\">dataSource.setMinEvictableIdleTimeMillis(30000);</span><br></pre></td></tr></table></figure></p>\n<p>而我们的连接池配置是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataSource.setTimeBetweenEvictionRunsMillis(60000);</span><br><span class=\"line\">dataSource.setMinEvictableIdleTimeMillis(60000);</span><br></pre></td></tr></table></figure></p>\n<p>问题解决！！！</p>\n<p>关于wait_timeout，这个参数到底要不要重新设置值没有固定的标准，保障数据库的可用性和性能即可，但应用层必须根据wait_timeout的实际情况进行相应的配置：<br>1、最大空闲时间不能大于wait_timeout<br>2、可以尝试在数据库连接中增加autoReconnect=true<br>3、testWhileIdle=”true” timeBetweenEvictionRunsMillis=”10000” validationQuery=”select 1”</p>\n<p>猪方连接池：<br><img src=\"\\images\\pasted-92.png\" alt=\"upload successful\"><br>我方连接池：</p>\n<p><img src=\"\\images\\pasted-94.png\" alt=\"upload successful\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>背景：近日与猪方合作一项目，项目交付后，对方反馈测试环境老是出现数据库异常（下面给出堆栈日志），并且对方的其他应用没有问题。但交付前，此项目在我们的环境（代码、数据库等都是我们的）中测试并无问题。</p>\n<p>问题现象：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">at java.lang.Thread.run(Thread.java:748)</span><br><span class=\"line\">Caused by: com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure</span><br><span class=\"line\"></span><br><span class=\"line\">The last packet successfully received from the server was 56,397 milliseconds ago.  The last packet sent successfully to the server was 0 milliseconds ag</span><br><span class=\"line\">o.</span><br><span class=\"line\">        at sun.reflect.GeneratedConstructorAccessor47.newInstance(Unknown Source)</span><br><span class=\"line\">        at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)</span><br><span class=\"line\">        at java.lang.reflect.Constructor.newInstance(Constructor.java:423)</span><br><span class=\"line\">        at com.mysql.jdbc.Util.handleNewInstance(Util.java:404)</span><br><span class=\"line\">        at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:981)</span><br><span class=\"line\">        at com.mysql.jdbc.MysqlIO.reuseAndReadPacket(MysqlIO.java:3465)</span><br><span class=\"line\">        at com.mysql.jdbc.MysqlIO.reuseAndReadPacket(MysqlIO.java:3365)</span><br><span class=\"line\">        at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3805)</span><br><span class=\"line\">        at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2478)</span><br><span class=\"line\">        at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2625)</span><br><span class=\"line\">        at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2547)</span><br><span class=\"line\">        at com.mysql.jdbc.ConnectionImpl.setAutoCommit(ConnectionImpl.java:4874)</span><br><span class=\"line\">        at com.alibaba.druid.pool.DruidPooledConnection.setAutoCommit(DruidPooledConnection.java:712)</span><br><span class=\"line\">        at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:225)</span><br><span class=\"line\">        ... 45 common frames omitted</span><br><span class=\"line\">Caused by: java.io.EOFException: Can not read response from server. Expected to read 4 bytes, read 0 bytes before connection was unexpectedly lost.</span><br><span class=\"line\">        at com.mysql.jdbc.MysqlIO.readFully(MysqlIO.java:2957)</span><br><span class=\"line\">        at com.mysql.jdbc.MysqlIO.reuseAndReadPacket(MysqlIO.java:3375)</span><br><span class=\"line\">        ... 53 common frames omitted</span><br><span class=\"line\">2019-07-11 13:41:00.311 [TxId:test_1562754979799^1562754982427^117,SpanId:2404734433174193776] [INFO ] c.z.c.p.b.a.i.w.WithdrawTransImpl:116 - 查询交易结</span><br><span class=\"line\">束TradeQueryResult [sucAmount=0, transDate=null]</span><br><span class=\"line\">2019-07-11 13:42:47.097 [TxId:,SpanId:] [INFO ] c.z.c.c.a.r.DefaultRealtimeMonitor:52 - realtime monitor request end, api server return message : LOOP</span><br><span class=\"line\">2019-07-11 13:42:47.097 [TxId:,SpanId:] [INFO ] c.z.c.c.a.r.DefaultRealtimeMonitor:49 - realtime monitor request begin, url -&gt; http://api.config.zhubajie</span><br><span class=\"line\">.la/realtime/pull</span><br><span class=\"line\">2019-07-11 13:44:00.415 [TxId:192.168.25.11.1015^1561538402946^21456,Span</span><br></pre></td></tr></table></figure></p>\n<p>看到这段日志，我注意到“Caused by: com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure The last packet successfully received from the server was 56,397 milliseconds ago.  The last packet sent successfully to the server was 0 milliseconds ag<br>o.”， 56397毫秒，这个数字很扎眼！！！ 因为我们使用的druid连接池，最小生存时间和需要关闭的空闲连接时间都是60s，说明了一个问题，所拿到的连接未超过60s，所以仍在连接池中，但是该连接貌似是失效了。分析到这儿，我猜测猪方mysql数据库的wait_timeout估计是进行了修改且小于56.397秒（默认是8小时，我们工时使用默认值），于是来到猪方的数据库，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show global variables like &apos;%timeout&apos;;</span><br><span class=\"line\">connect_timeout\t10</span><br><span class=\"line\">delayed_insert_timeout\t300</span><br><span class=\"line\">have_statement_timeout\tYES</span><br><span class=\"line\">innodb_flush_log_at_timeout\t1</span><br><span class=\"line\">innodb_lock_wait_timeout\t120</span><br><span class=\"line\">innodb_rollback_on_timeout\tOFF</span><br><span class=\"line\">interactive_timeout\t30</span><br><span class=\"line\">lock_wait_timeout\t31536000</span><br><span class=\"line\">net_read_timeout\t5</span><br><span class=\"line\">net_write_timeout\t5</span><br><span class=\"line\">rpl_semi_sync_master_timeout\t10000</span><br><span class=\"line\">rpl_stop_slave_timeout\t31536000</span><br><span class=\"line\">slave_net_timeout\t60</span><br><span class=\"line\">thread_pool_idle_timeout\t60</span><br><span class=\"line\">tokudb_last_lock_timeout\t</span><br><span class=\"line\">tokudb_lock_timeout\t4000</span><br><span class=\"line\">wait_timeout\t30</span><br></pre></td></tr></table></figure></p>\n<p>好吧，猜想正确，他们讲wait_timeout设置成了30s。</p>\n<p>同时他们自己的连接池配置是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataSource.setTimeBetweenEvictionRunsMillis(5000);</span><br><span class=\"line\">dataSource.setMinEvictableIdleTimeMillis(30000);</span><br></pre></td></tr></table></figure></p>\n<p>而我们的连接池配置是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataSource.setTimeBetweenEvictionRunsMillis(60000);</span><br><span class=\"line\">dataSource.setMinEvictableIdleTimeMillis(60000);</span><br></pre></td></tr></table></figure></p>\n<p>问题解决！！！</p>\n<p>关于wait_timeout，这个参数到底要不要重新设置值没有固定的标准，保障数据库的可用性和性能即可，但应用层必须根据wait_timeout的实际情况进行相应的配置：<br>1、最大空闲时间不能大于wait_timeout<br>2、可以尝试在数据库连接中增加autoReconnect=true<br>3、testWhileIdle=”true” timeBetweenEvictionRunsMillis=”10000” validationQuery=”select 1”</p>\n<p>猪方连接池：<br><img src=\"\\images\\pasted-92.png\" alt=\"upload successful\"><br>我方连接池：</p>\n<p><img src=\"\\images\\pasted-94.png\" alt=\"upload successful\"></p>\n"},{"title":"struts2-no action in maven","author":"Xiang Chuang","date":"2017-07-20T04:30:00.000Z","_content":"原因：convention插件默认不扫描jar中的action\n 解决方案：http://struts.apache.org/release/2.3.x/docs/convention-plugin.html#ConventionPlugin-Actionsinjarfiles(struts2convention插件说明)\n    <!-- the jar URL can contain a path to the jar file and a trailing \"!/\" -->\n    <constant name=\"struts.convention.action.includeJars\" value=\".*?/Imanage\\w*.*?jar(!/)?\"/>  匹配 前缀为Imanage的所有jar\n    \n![upload successful](\\images\\pasted-56.png)","source":"_posts/struts2-no-action-in-maven.md","raw":"title: struts2-no action in maven\nauthor: Xiang Chuang\ntags:\n  - struts2\ncategories:\n  - 爱学爱问\ndate: 2017-07-20 12:30:00\n---\n原因：convention插件默认不扫描jar中的action\n 解决方案：http://struts.apache.org/release/2.3.x/docs/convention-plugin.html#ConventionPlugin-Actionsinjarfiles(struts2convention插件说明)\n    <!-- the jar URL can contain a path to the jar file and a trailing \"!/\" -->\n    <constant name=\"struts.convention.action.includeJars\" value=\".*?/Imanage\\w*.*?jar(!/)?\"/>  匹配 前缀为Imanage的所有jar\n    \n![upload successful](\\images\\pasted-56.png)","slug":"struts2-no-action-in-maven","published":1,"updated":"2019-09-30T07:34:10.838Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3e5th2s0024p966jdjzjtuu","content":"<p>原因：convention插件默认不扫描jar中的action<br> 解决方案：<a href=\"http://struts.apache.org/release/2.3.x/docs/convention-plugin.html#ConventionPlugin-Actionsinjarfiles(struts2convention插件说明)\" target=\"_blank\" rel=\"noopener\">http://struts.apache.org/release/2.3.x/docs/convention-plugin.html#ConventionPlugin-Actionsinjarfiles(struts2convention插件说明)</a><br>    <!-- the jar URL can contain a path to the jar file and a trailing \"!/\" --><br>    <constant name=\"struts.convention.action.includeJars\" value=\".*?/Imanage\\w*.*?jar(!/)?\">  匹配 前缀为Imanage的所有jar</constant></p>\n<p><img src=\"\\images\\pasted-56.png\" alt=\"upload successful\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>原因：convention插件默认不扫描jar中的action<br> 解决方案：<a href=\"http://struts.apache.org/release/2.3.x/docs/convention-plugin.html#ConventionPlugin-Actionsinjarfiles(struts2convention插件说明)\" target=\"_blank\" rel=\"noopener\">http://struts.apache.org/release/2.3.x/docs/convention-plugin.html#ConventionPlugin-Actionsinjarfiles(struts2convention插件说明)</a><br>    <!-- the jar URL can contain a path to the jar file and a trailing \"!/\" --><br>    <constant name=\"struts.convention.action.includeJars\" value=\".*?/Imanage\\w*.*?jar(!/)?\">  匹配 前缀为Imanage的所有jar</constant></p>\n<p><img src=\"\\images\\pasted-56.png\" alt=\"upload successful\"></p>\n"},{"title":"zookeeper-反复重连问题","author":"Xiang Chuang","date":"2018-09-10T10:09:00.000Z","_content":"现象，zk后台日志发现频繁刷如下日志\nRefusing session request for client /192.168.46.4:48551 as it has seen zxid 0x3cdf3127 our last zxid is 0x5bba6c client must try another server\n\n大量刷日志导致zk性能下降，最终导致依赖于zk的服务不可用\n\n经分析：\n日志来源代码为 org.apache.zookeeper.server.ZooKeeperServer\n\n![upload successful](\\images\\pasted-18.png)\nlastProcessedZxid在zk中用于记录版本信息，即客户端与服务端版本控制\n\n后经反馈得知，18.09.07由于snet环境zk日志量大，曾情况过zk数据目录数据，当时导致各应用zk不可用，要求各应用重启，后续大部分应用重启完成后业务正常使用，但并没有核对所有系统是否都重启\n\n因此，部分没有重启的应用本地的版本信息还是老的信息，拿此信息与zk服务端交互，由于版本信息不对，导致zk拒绝连接，从而客户端又频繁发起重连尝试。。。\n\n解决，一旦发起过zk数据目录删除，或者迁移，请务必确保所有应用全部重启以获取最新的版本信息","source":"_posts/zookeeper-反复重连问题.md","raw":"title: zookeeper-反复重连问题\nauthor: Xiang Chuang\ntags:\n  - zookeeper\ncategories:\n  - 这些年，那些坑\ndate: 2018-09-10 18:09:00\n---\n现象，zk后台日志发现频繁刷如下日志\nRefusing session request for client /192.168.46.4:48551 as it has seen zxid 0x3cdf3127 our last zxid is 0x5bba6c client must try another server\n\n大量刷日志导致zk性能下降，最终导致依赖于zk的服务不可用\n\n经分析：\n日志来源代码为 org.apache.zookeeper.server.ZooKeeperServer\n\n![upload successful](\\images\\pasted-18.png)\nlastProcessedZxid在zk中用于记录版本信息，即客户端与服务端版本控制\n\n后经反馈得知，18.09.07由于snet环境zk日志量大，曾情况过zk数据目录数据，当时导致各应用zk不可用，要求各应用重启，后续大部分应用重启完成后业务正常使用，但并没有核对所有系统是否都重启\n\n因此，部分没有重启的应用本地的版本信息还是老的信息，拿此信息与zk服务端交互，由于版本信息不对，导致zk拒绝连接，从而客户端又频繁发起重连尝试。。。\n\n解决，一旦发起过zk数据目录删除，或者迁移，请务必确保所有应用全部重启以获取最新的版本信息","slug":"zookeeper-反复重连问题","published":1,"updated":"2019-09-30T07:34:10.839Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3e5th2t0026p9661rujmq0k","content":"<p>现象，zk后台日志发现频繁刷如下日志<br>Refusing session request for client /192.168.46.4:48551 as it has seen zxid 0x3cdf3127 our last zxid is 0x5bba6c client must try another server</p>\n<p>大量刷日志导致zk性能下降，最终导致依赖于zk的服务不可用</p>\n<p>经分析：<br>日志来源代码为 org.apache.zookeeper.server.ZooKeeperServer</p>\n<p><img src=\"\\images\\pasted-18.png\" alt=\"upload successful\"><br>lastProcessedZxid在zk中用于记录版本信息，即客户端与服务端版本控制</p>\n<p>后经反馈得知，18.09.07由于snet环境zk日志量大，曾情况过zk数据目录数据，当时导致各应用zk不可用，要求各应用重启，后续大部分应用重启完成后业务正常使用，但并没有核对所有系统是否都重启</p>\n<p>因此，部分没有重启的应用本地的版本信息还是老的信息，拿此信息与zk服务端交互，由于版本信息不对，导致zk拒绝连接，从而客户端又频繁发起重连尝试。。。</p>\n<p>解决，一旦发起过zk数据目录删除，或者迁移，请务必确保所有应用全部重启以获取最新的版本信息</p>\n","site":{"data":{}},"excerpt":"","more":"<p>现象，zk后台日志发现频繁刷如下日志<br>Refusing session request for client /192.168.46.4:48551 as it has seen zxid 0x3cdf3127 our last zxid is 0x5bba6c client must try another server</p>\n<p>大量刷日志导致zk性能下降，最终导致依赖于zk的服务不可用</p>\n<p>经分析：<br>日志来源代码为 org.apache.zookeeper.server.ZooKeeperServer</p>\n<p><img src=\"\\images\\pasted-18.png\" alt=\"upload successful\"><br>lastProcessedZxid在zk中用于记录版本信息，即客户端与服务端版本控制</p>\n<p>后经反馈得知，18.09.07由于snet环境zk日志量大，曾情况过zk数据目录数据，当时导致各应用zk不可用，要求各应用重启，后续大部分应用重启完成后业务正常使用，但并没有核对所有系统是否都重启</p>\n<p>因此，部分没有重启的应用本地的版本信息还是老的信息，拿此信息与zk服务端交互，由于版本信息不对，导致zk拒绝连接，从而客户端又频繁发起重连尝试。。。</p>\n<p>解决，一旦发起过zk数据目录删除，或者迁移，请务必确保所有应用全部重启以获取最新的版本信息</p>\n"},{"title":"springboot-spring-boot-starter-actuator","author":"Xiang Chuang","date":"2018-07-12T08:03:00.000Z","_content":"应用监控管理\n自定义健康检测器，实现org.springframework.boot.actuate.health.AbstractHealthIndicator\n充分利用java.lang.management.ManagementFactory，获取系统资源情况\n\n易极付：\n基于spring-boot的应用健康监控：\ndubboHealthIndicator      dubbo健康检查\ndeadlockedThreadsHealthIndicator  死锁线程检查\nthreadsCountHealthIndicator 线程数量检查，阈值2000\nsystemLoadHealthIndicator cpu负载检查，阈值1/3\nrabbitHealthIndicator rabbitmq可用性检查\nsessionYedisHealthIndicator  sessionRedis可用性检查\ntomcatHealthIndicator 线程占用数量 阈值1半，   tomcat默认最大线程400\nyedisHealthIndicator redis可用性检查\ndiskSpaceHealthIndicator 硬盘空间检查 阈值management.health.diskspace.threshold=524288000\ndataSourceHealthIndicator  使用select 1检查连接 （spring-boot提供）\n\n![upload successful](\\images\\pasted-17.png)","source":"_posts/springboot-spring-boot-starter-actuator.md","raw":"title: springboot-spring-boot-starter-actuator\nauthor: Xiang Chuang\ntags:\n  - spring\n  - springboot\n  - 应用监控检查\ncategories:\n  - 爱学爱问\ndate: 2018-07-12 16:03:00\n---\n应用监控管理\n自定义健康检测器，实现org.springframework.boot.actuate.health.AbstractHealthIndicator\n充分利用java.lang.management.ManagementFactory，获取系统资源情况\n\n易极付：\n基于spring-boot的应用健康监控：\ndubboHealthIndicator      dubbo健康检查\ndeadlockedThreadsHealthIndicator  死锁线程检查\nthreadsCountHealthIndicator 线程数量检查，阈值2000\nsystemLoadHealthIndicator cpu负载检查，阈值1/3\nrabbitHealthIndicator rabbitmq可用性检查\nsessionYedisHealthIndicator  sessionRedis可用性检查\ntomcatHealthIndicator 线程占用数量 阈值1半，   tomcat默认最大线程400\nyedisHealthIndicator redis可用性检查\ndiskSpaceHealthIndicator 硬盘空间检查 阈值management.health.diskspace.threshold=524288000\ndataSourceHealthIndicator  使用select 1检查连接 （spring-boot提供）\n\n![upload successful](\\images\\pasted-17.png)","slug":"springboot-spring-boot-starter-actuator","published":1,"updated":"2019-09-30T07:34:10.838Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3e5th2u0029p966ns6jcddg","content":"<p>应用监控管理<br>自定义健康检测器，实现org.springframework.boot.actuate.health.AbstractHealthIndicator<br>充分利用java.lang.management.ManagementFactory，获取系统资源情况</p>\n<p>易极付：<br>基于spring-boot的应用健康监控：<br>dubboHealthIndicator      dubbo健康检查<br>deadlockedThreadsHealthIndicator  死锁线程检查<br>threadsCountHealthIndicator 线程数量检查，阈值2000<br>systemLoadHealthIndicator cpu负载检查，阈值1/3<br>rabbitHealthIndicator rabbitmq可用性检查<br>sessionYedisHealthIndicator  sessionRedis可用性检查<br>tomcatHealthIndicator 线程占用数量 阈值1半，   tomcat默认最大线程400<br>yedisHealthIndicator redis可用性检查<br>diskSpaceHealthIndicator 硬盘空间检查 阈值management.health.diskspace.threshold=524288000<br>dataSourceHealthIndicator  使用select 1检查连接 （spring-boot提供）</p>\n<p><img src=\"\\images\\pasted-17.png\" alt=\"upload successful\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>应用监控管理<br>自定义健康检测器，实现org.springframework.boot.actuate.health.AbstractHealthIndicator<br>充分利用java.lang.management.ManagementFactory，获取系统资源情况</p>\n<p>易极付：<br>基于spring-boot的应用健康监控：<br>dubboHealthIndicator      dubbo健康检查<br>deadlockedThreadsHealthIndicator  死锁线程检查<br>threadsCountHealthIndicator 线程数量检查，阈值2000<br>systemLoadHealthIndicator cpu负载检查，阈值1/3<br>rabbitHealthIndicator rabbitmq可用性检查<br>sessionYedisHealthIndicator  sessionRedis可用性检查<br>tomcatHealthIndicator 线程占用数量 阈值1半，   tomcat默认最大线程400<br>yedisHealthIndicator redis可用性检查<br>diskSpaceHealthIndicator 硬盘空间检查 阈值management.health.diskspace.threshold=524288000<br>dataSourceHealthIndicator  使用select 1检查连接 （spring-boot提供）</p>\n<p><img src=\"\\images\\pasted-17.png\" alt=\"upload successful\"></p>\n"},{"title":"内存泄漏-案例分析","author":"Xiang Chuang","date":"2018-07-09T06:24:00.000Z","_content":"问题描述：代扣网关启动一段时间后，监控发现系统随着运行时间越长越缓慢（第一时间考虑是否内存泄漏）\n\n现象：1、一个很简单的代码块执行耗时很长，甚至长达30S以上\n          2、老年代频繁进行内存回收，但是回收后却仍旧占用了很多内存，且随着时间推移，占用的越来越多，只到系统                       down掉 \n          3、青年代内存频繁回收（该原因是青年代内存分配不合理，可考虑青年代占总堆内存3：8，但是不能太大，如果太                   大，当青年代回收时，如果需要晋升到老年代的对象占内容大于老年代可用空间的一般，将会导致Full GC）\n\n原因推测：\n            上述现象第一反应是疑似出现内存泄漏\n处理过程：1、系统挂掉（重启）前，dump内存镜像文件，  jmap -dump:format=b,file=盘符:/XXX.hprof <pid>\n                 2、使用mat工具分析dump文件\n                 3、找出引起内存泄漏的对象\n                 4、分析解决方案\n           \n\n附：\n1、执行缓慢的代码日志：下面是一段for循环代码块，每次循环先校验再入库，逻辑简单，但发现异常的慢！\n2018-07-04 08:39:06.511 INFO  [DubboServerHandler-172.20.30.60:20939-99] BatchDeductCheckNode-00060000030000000001807040838510002- 代扣请求校验\n2018-07-04 08:39:06.539 INFO  [DubboServerHandler-172.20.30.60:20939-99] BatchDeductCheckNode-00060000030000000001807040838510002- 插入流水信息到代扣流水表和流水附表 \n2018-07-04 08:39:06.596 INFO  [DubboServerHandler-172.20.30.60:20939-99] BatchDeductCheckNode-00060000030000000001807040838510002- 代扣请求校验\n2018-07-04 08:39:06.613 INFO  [DubboServerHandler-172.20.30.60:20939-99] BatchDeductCheckNode-00060000030000000001807040838510002- 插入流水信息到代扣流水表和流水附表 \n2018-07-04 08:39:06.673 INFO  [DubboServerHandler-172.20.30.60:20939-99] BatchDeductCheckNode-00060000030000000001807040838510002- 代扣请求校验\n2018-07-04 08:39:06.696 INFO  [DubboServerHandler-172.20.30.60:20939-99] BatchDeductCheckNode-00060000030000000001807040838510002- 插入流水信息到代扣流水表和流水附表 \n2018-07-04 08:39:39.615 INFO  [DubboServerHandler-172.20.30.60:20939-99] BatchDeductCheckNode-00060000030000000001807040838510002- 代扣请求校验\n2018-07-04 08:39:39.618 INFO  [DubboServerHandler-172.20.30.60:20939-99] BatchDeductCheckNode-00060000030000000001807040838510002- 插入流水信息到代扣流水表和流水附表 \n2、GC日志：老年代CMS策略垃圾回收日志，反复回收，但依旧回收不了内存，内存消耗的原来越多\n2018-07-09T14:24:21.701+0800: 337412.009: [GC (CMS Initial Mark) [1 CMS-initial-mark: 4302687K(5183936K)] 4971300K(6106880K), 0.0621324 secs] [Times: user=0.73 sys=0.00, real=0.07 secs] \n2018-07-09T14:24:21.764+0800: 337412.072: [CMS-concurrent-mark-start]\n2018-07-09T14:24:22.900+0800: 337413.208: [GC (Allocation Failure) 337413.208: [ParNew: 760830K->17436K(922944K), 0.0174147 secs] 5063517K->4320664K(6106880K), 0.0180025 secs] [Times: user=0.11 sys=0.01, real=0.02 secs] \n2018-07-09T14:24:25.524+0800: 337415.832: [CMS-concurrent-mark: 3.607/3.760 secs] [Times: user=16.27 sys=0.18, real=3.75 secs] \n2018-07-09T14:24:25.524+0800: 337415.832: [CMS-concurrent-preclean-start]\n2018-07-09T14:24:25.571+0800: 337415.879: [CMS-concurrent-preclean: 0.045/0.047 secs] [Times: user=0.07 sys=0.01, real=0.05 secs] \n2018-07-09T14:24:25.571+0800: 337415.879: [CMS-concurrent-abortable-preclean-start]\n CMS: abort preclean due to time 2018-07-09T14:24:30.647+0800: 337420.955: [CMS-concurrent-abortable-preclean: 3.287/5.076 secs] [Times: user=4.95 sys=0.24, real=5.08 secs] \n2018-07-09T14:24:30.658+0800: 337420.966: [GC (CMS Final Remark) [YG occupancy: 617178 K (922944 K)]337420.966: [Rescan (parallel) , 0.0603228 secs]337421.027: [weak refs processing, 0.0000841 secs]337421.027: [class unloading, 0.1254411 secs]337421.152: [scrub symbol table, 0.0445538 secs]337421.197: [scrub string table, 0.0066675 secs][1 CMS-remark: 4303227K(5183936K)] 4920406K(6106880K), 0.2439490 secs] [Times: user=0.90 sys=0.01, real=0.24 secs] \n2018-07-09T14:24:30.903+0800: 337421.211: [CMS-concurrent-sweep-start]\n2018-07-09T14:24:31.941+0800: 337422.249: [GC (Allocation Failure) 337422.249: [ParNew: 755804K->24447K(922944K), 0.0350291 secs] 5059025K->4328220K(6106880K), 0.0357587 secs] [Times: user=0.18 sys=0.00, real=0.04 secs] \n2018-07-09T14:24:33.862+0800: 337424.170: [CMS-concurrent-sweep: 2.815/2.958 secs] [Times: user=4.72 sys=0.24, real=2.96 secs] \n2018-07-09T14:24:33.862+0800: 337424.170: [CMS-concurrent-reset-start]\n2018-07-09T14:24:33.877+0800: 337424.185: [CMS-concurrent-reset: 0.015/0.015 secs] [Times: user=0.02 sys=0.00, real=0.02 secs] \n2018-07-09T14:24:35.886+0800: 337426.194: [GC (CMS Initial Mark) [1 CMS-initial-mark: 4303632K(5183936K)] 4520863K(6106880K), 0.0222239 secs] [Times: user=0.21 sys=0.00, real=0.02 secs] \n2018-07-09T14:24:35.910+0800: 337426.218: [CMS-concurrent-mark-start]\n2018-07-09T14:24:39.373+0800: 337429.681: [CMS-concurrent-mark: 3.449/3.463 secs] [Times: user=14.73 sys=0.10, real=3.46 secs] \n2018-07-09T14:24:39.373+0800: 337429.681: [CMS-concurrent-preclean-start]\n2018-07-09T14:24:39.396+0800: 337429.704: [CMS-concurrent-preclean: 0.023/0.023 secs] [Times: user=0.02 sys=0.00, real=0.02 secs] \n2018-07-09T14:24:39.396+0800: 337429.704: [CMS-concurrent-abortable-preclean-start]\n CMS: abort preclean due to time 2018-07-09T14:24:44.405+0800: 337434.713: [CMS-concurrent-abortable-preclean: 3.247/5.009 secs] [Times: user=3.97 sys=0.16, real=5.01 secs] \n2018-07-09T14:24:44.415+0800: 337434.723: [GC (CMS Final Remark) [YG occupancy: 553150 K (922944 K)]337434.723: [Rescan (parallel) , 0.0524846 secs]337434.776: [weak refs processing, 0.0000721 secs]337434.776: [class unloading, 0.1203949 secs]337434.896: [scrub symbol table, 0.0454455 secs]337434.942: [scrub string table, 0.0063738 secs][1 CMS-remark: 4303632K(5183936K)] 4856783K(6106880K), 0.2322675 secs] [Times: user=0.83 sys=0.00, real=0.23 secs] \n2018-07-09T14:24:44.648+0800: 337434.956: [CMS-concurrent-sweep-start]\n2018-07-09T14:24:47.150+0800: 337437.458: [CMS-concurrent-sweep: 2.492/2.501 secs] [Times: user=2.85 sys=0.03, real=2.50 secs] \n2018-07-09T14:24:47.150+0800: 337437.458: [CMS-concurrent-reset-start]\n2018-07-09T14:24:47.165+0800: 337437.473: [CMS-concurrent-reset: 0.015/0.015 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] \n3、mat分析情况：\n\n![upload successful](\\images\\pasted-2.png)\n\n![upload successful](\\images\\pasted-3.png)\n\n![upload successful](\\images\\pasted-4.png)\n\n![upload successful](\\images\\pasted-5.png)","source":"_posts/内存泄漏案例分析.md","raw":"title: 内存泄漏-案例分析\nauthor: Xiang Chuang\ntags:\n  - java\n  - 内存泄漏\n  - mat\ncategories:\n  - 这些年，那些坑\ndate: 2018-07-09 14:24:00\n---\n问题描述：代扣网关启动一段时间后，监控发现系统随着运行时间越长越缓慢（第一时间考虑是否内存泄漏）\n\n现象：1、一个很简单的代码块执行耗时很长，甚至长达30S以上\n          2、老年代频繁进行内存回收，但是回收后却仍旧占用了很多内存，且随着时间推移，占用的越来越多，只到系统                       down掉 \n          3、青年代内存频繁回收（该原因是青年代内存分配不合理，可考虑青年代占总堆内存3：8，但是不能太大，如果太                   大，当青年代回收时，如果需要晋升到老年代的对象占内容大于老年代可用空间的一般，将会导致Full GC）\n\n原因推测：\n            上述现象第一反应是疑似出现内存泄漏\n处理过程：1、系统挂掉（重启）前，dump内存镜像文件，  jmap -dump:format=b,file=盘符:/XXX.hprof <pid>\n                 2、使用mat工具分析dump文件\n                 3、找出引起内存泄漏的对象\n                 4、分析解决方案\n           \n\n附：\n1、执行缓慢的代码日志：下面是一段for循环代码块，每次循环先校验再入库，逻辑简单，但发现异常的慢！\n2018-07-04 08:39:06.511 INFO  [DubboServerHandler-172.20.30.60:20939-99] BatchDeductCheckNode-00060000030000000001807040838510002- 代扣请求校验\n2018-07-04 08:39:06.539 INFO  [DubboServerHandler-172.20.30.60:20939-99] BatchDeductCheckNode-00060000030000000001807040838510002- 插入流水信息到代扣流水表和流水附表 \n2018-07-04 08:39:06.596 INFO  [DubboServerHandler-172.20.30.60:20939-99] BatchDeductCheckNode-00060000030000000001807040838510002- 代扣请求校验\n2018-07-04 08:39:06.613 INFO  [DubboServerHandler-172.20.30.60:20939-99] BatchDeductCheckNode-00060000030000000001807040838510002- 插入流水信息到代扣流水表和流水附表 \n2018-07-04 08:39:06.673 INFO  [DubboServerHandler-172.20.30.60:20939-99] BatchDeductCheckNode-00060000030000000001807040838510002- 代扣请求校验\n2018-07-04 08:39:06.696 INFO  [DubboServerHandler-172.20.30.60:20939-99] BatchDeductCheckNode-00060000030000000001807040838510002- 插入流水信息到代扣流水表和流水附表 \n2018-07-04 08:39:39.615 INFO  [DubboServerHandler-172.20.30.60:20939-99] BatchDeductCheckNode-00060000030000000001807040838510002- 代扣请求校验\n2018-07-04 08:39:39.618 INFO  [DubboServerHandler-172.20.30.60:20939-99] BatchDeductCheckNode-00060000030000000001807040838510002- 插入流水信息到代扣流水表和流水附表 \n2、GC日志：老年代CMS策略垃圾回收日志，反复回收，但依旧回收不了内存，内存消耗的原来越多\n2018-07-09T14:24:21.701+0800: 337412.009: [GC (CMS Initial Mark) [1 CMS-initial-mark: 4302687K(5183936K)] 4971300K(6106880K), 0.0621324 secs] [Times: user=0.73 sys=0.00, real=0.07 secs] \n2018-07-09T14:24:21.764+0800: 337412.072: [CMS-concurrent-mark-start]\n2018-07-09T14:24:22.900+0800: 337413.208: [GC (Allocation Failure) 337413.208: [ParNew: 760830K->17436K(922944K), 0.0174147 secs] 5063517K->4320664K(6106880K), 0.0180025 secs] [Times: user=0.11 sys=0.01, real=0.02 secs] \n2018-07-09T14:24:25.524+0800: 337415.832: [CMS-concurrent-mark: 3.607/3.760 secs] [Times: user=16.27 sys=0.18, real=3.75 secs] \n2018-07-09T14:24:25.524+0800: 337415.832: [CMS-concurrent-preclean-start]\n2018-07-09T14:24:25.571+0800: 337415.879: [CMS-concurrent-preclean: 0.045/0.047 secs] [Times: user=0.07 sys=0.01, real=0.05 secs] \n2018-07-09T14:24:25.571+0800: 337415.879: [CMS-concurrent-abortable-preclean-start]\n CMS: abort preclean due to time 2018-07-09T14:24:30.647+0800: 337420.955: [CMS-concurrent-abortable-preclean: 3.287/5.076 secs] [Times: user=4.95 sys=0.24, real=5.08 secs] \n2018-07-09T14:24:30.658+0800: 337420.966: [GC (CMS Final Remark) [YG occupancy: 617178 K (922944 K)]337420.966: [Rescan (parallel) , 0.0603228 secs]337421.027: [weak refs processing, 0.0000841 secs]337421.027: [class unloading, 0.1254411 secs]337421.152: [scrub symbol table, 0.0445538 secs]337421.197: [scrub string table, 0.0066675 secs][1 CMS-remark: 4303227K(5183936K)] 4920406K(6106880K), 0.2439490 secs] [Times: user=0.90 sys=0.01, real=0.24 secs] \n2018-07-09T14:24:30.903+0800: 337421.211: [CMS-concurrent-sweep-start]\n2018-07-09T14:24:31.941+0800: 337422.249: [GC (Allocation Failure) 337422.249: [ParNew: 755804K->24447K(922944K), 0.0350291 secs] 5059025K->4328220K(6106880K), 0.0357587 secs] [Times: user=0.18 sys=0.00, real=0.04 secs] \n2018-07-09T14:24:33.862+0800: 337424.170: [CMS-concurrent-sweep: 2.815/2.958 secs] [Times: user=4.72 sys=0.24, real=2.96 secs] \n2018-07-09T14:24:33.862+0800: 337424.170: [CMS-concurrent-reset-start]\n2018-07-09T14:24:33.877+0800: 337424.185: [CMS-concurrent-reset: 0.015/0.015 secs] [Times: user=0.02 sys=0.00, real=0.02 secs] \n2018-07-09T14:24:35.886+0800: 337426.194: [GC (CMS Initial Mark) [1 CMS-initial-mark: 4303632K(5183936K)] 4520863K(6106880K), 0.0222239 secs] [Times: user=0.21 sys=0.00, real=0.02 secs] \n2018-07-09T14:24:35.910+0800: 337426.218: [CMS-concurrent-mark-start]\n2018-07-09T14:24:39.373+0800: 337429.681: [CMS-concurrent-mark: 3.449/3.463 secs] [Times: user=14.73 sys=0.10, real=3.46 secs] \n2018-07-09T14:24:39.373+0800: 337429.681: [CMS-concurrent-preclean-start]\n2018-07-09T14:24:39.396+0800: 337429.704: [CMS-concurrent-preclean: 0.023/0.023 secs] [Times: user=0.02 sys=0.00, real=0.02 secs] \n2018-07-09T14:24:39.396+0800: 337429.704: [CMS-concurrent-abortable-preclean-start]\n CMS: abort preclean due to time 2018-07-09T14:24:44.405+0800: 337434.713: [CMS-concurrent-abortable-preclean: 3.247/5.009 secs] [Times: user=3.97 sys=0.16, real=5.01 secs] \n2018-07-09T14:24:44.415+0800: 337434.723: [GC (CMS Final Remark) [YG occupancy: 553150 K (922944 K)]337434.723: [Rescan (parallel) , 0.0524846 secs]337434.776: [weak refs processing, 0.0000721 secs]337434.776: [class unloading, 0.1203949 secs]337434.896: [scrub symbol table, 0.0454455 secs]337434.942: [scrub string table, 0.0063738 secs][1 CMS-remark: 4303632K(5183936K)] 4856783K(6106880K), 0.2322675 secs] [Times: user=0.83 sys=0.00, real=0.23 secs] \n2018-07-09T14:24:44.648+0800: 337434.956: [CMS-concurrent-sweep-start]\n2018-07-09T14:24:47.150+0800: 337437.458: [CMS-concurrent-sweep: 2.492/2.501 secs] [Times: user=2.85 sys=0.03, real=2.50 secs] \n2018-07-09T14:24:47.150+0800: 337437.458: [CMS-concurrent-reset-start]\n2018-07-09T14:24:47.165+0800: 337437.473: [CMS-concurrent-reset: 0.015/0.015 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] \n3、mat分析情况：\n\n![upload successful](\\images\\pasted-2.png)\n\n![upload successful](\\images\\pasted-3.png)\n\n![upload successful](\\images\\pasted-4.png)\n\n![upload successful](\\images\\pasted-5.png)","slug":"内存泄漏案例分析","published":1,"updated":"2019-09-30T07:34:10.839Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3e5th2u002cp966o3t3hkwj","content":"<p>问题描述：代扣网关启动一段时间后，监控发现系统随着运行时间越长越缓慢（第一时间考虑是否内存泄漏）</p>\n<p>现象：1、一个很简单的代码块执行耗时很长，甚至长达30S以上<br>          2、老年代频繁进行内存回收，但是回收后却仍旧占用了很多内存，且随着时间推移，占用的越来越多，只到系统                       down掉<br>          3、青年代内存频繁回收（该原因是青年代内存分配不合理，可考虑青年代占总堆内存3：8，但是不能太大，如果太                   大，当青年代回收时，如果需要晋升到老年代的对象占内容大于老年代可用空间的一般，将会导致Full GC）</p>\n<p>原因推测：<br>            上述现象第一反应是疑似出现内存泄漏<br>处理过程：1、系统挂掉（重启）前，dump内存镜像文件，  jmap -dump:format=b,file=盘符:/XXX.hprof <pid><br>                 2、使用mat工具分析dump文件<br>                 3、找出引起内存泄漏的对象<br>                 4、分析解决方案</pid></p>\n<p>附：<br>1、执行缓慢的代码日志：下面是一段for循环代码块，每次循环先校验再入库，逻辑简单，但发现异常的慢！<br>2018-07-04 08:39:06.511 INFO  [DubboServerHandler-172.20.30.60:20939-99] BatchDeductCheckNode-00060000030000000001807040838510002- 代扣请求校验<br>2018-07-04 08:39:06.539 INFO  [DubboServerHandler-172.20.30.60:20939-99] BatchDeductCheckNode-00060000030000000001807040838510002- 插入流水信息到代扣流水表和流水附表<br>2018-07-04 08:39:06.596 INFO  [DubboServerHandler-172.20.30.60:20939-99] BatchDeductCheckNode-00060000030000000001807040838510002- 代扣请求校验<br>2018-07-04 08:39:06.613 INFO  [DubboServerHandler-172.20.30.60:20939-99] BatchDeductCheckNode-00060000030000000001807040838510002- 插入流水信息到代扣流水表和流水附表<br>2018-07-04 08:39:06.673 INFO  [DubboServerHandler-172.20.30.60:20939-99] BatchDeductCheckNode-00060000030000000001807040838510002- 代扣请求校验<br>2018-07-04 08:39:06.696 INFO  [DubboServerHandler-172.20.30.60:20939-99] BatchDeductCheckNode-00060000030000000001807040838510002- 插入流水信息到代扣流水表和流水附表<br>2018-07-04 08:39:39.615 INFO  [DubboServerHandler-172.20.30.60:20939-99] BatchDeductCheckNode-00060000030000000001807040838510002- 代扣请求校验<br>2018-07-04 08:39:39.618 INFO  [DubboServerHandler-172.20.30.60:20939-99] BatchDeductCheckNode-00060000030000000001807040838510002- 插入流水信息到代扣流水表和流水附表<br>2、GC日志：老年代CMS策略垃圾回收日志，反复回收，但依旧回收不了内存，内存消耗的原来越多<br>2018-07-09T14:24:21.701+0800: 337412.009: [GC (CMS Initial Mark) [1 CMS-initial-mark: 4302687K(5183936K)] 4971300K(6106880K), 0.0621324 secs] [Times: user=0.73 sys=0.00, real=0.07 secs]<br>2018-07-09T14:24:21.764+0800: 337412.072: [CMS-concurrent-mark-start]<br>2018-07-09T14:24:22.900+0800: 337413.208: [GC (Allocation Failure) 337413.208: [ParNew: 760830K-&gt;17436K(922944K), 0.0174147 secs] 5063517K-&gt;4320664K(6106880K), 0.0180025 secs] [Times: user=0.11 sys=0.01, real=0.02 secs]<br>2018-07-09T14:24:25.524+0800: 337415.832: [CMS-concurrent-mark: 3.607/3.760 secs] [Times: user=16.27 sys=0.18, real=3.75 secs]<br>2018-07-09T14:24:25.524+0800: 337415.832: [CMS-concurrent-preclean-start]<br>2018-07-09T14:24:25.571+0800: 337415.879: [CMS-concurrent-preclean: 0.045/0.047 secs] [Times: user=0.07 sys=0.01, real=0.05 secs]<br>2018-07-09T14:24:25.571+0800: 337415.879: [CMS-concurrent-abortable-preclean-start]<br> CMS: abort preclean due to time 2018-07-09T14:24:30.647+0800: 337420.955: [CMS-concurrent-abortable-preclean: 3.287/5.076 secs] [Times: user=4.95 sys=0.24, real=5.08 secs]<br>2018-07-09T14:24:30.658+0800: 337420.966: [GC (CMS Final Remark) [YG occupancy: 617178 K (922944 K)]337420.966: [Rescan (parallel) , 0.0603228 secs]337421.027: [weak refs processing, 0.0000841 secs]337421.027: [class unloading, 0.1254411 secs]337421.152: [scrub symbol table, 0.0445538 secs]337421.197: [scrub string table, 0.0066675 secs][1 CMS-remark: 4303227K(5183936K)] 4920406K(6106880K), 0.2439490 secs] [Times: user=0.90 sys=0.01, real=0.24 secs]<br>2018-07-09T14:24:30.903+0800: 337421.211: [CMS-concurrent-sweep-start]<br>2018-07-09T14:24:31.941+0800: 337422.249: [GC (Allocation Failure) 337422.249: [ParNew: 755804K-&gt;24447K(922944K), 0.0350291 secs] 5059025K-&gt;4328220K(6106880K), 0.0357587 secs] [Times: user=0.18 sys=0.00, real=0.04 secs]<br>2018-07-09T14:24:33.862+0800: 337424.170: [CMS-concurrent-sweep: 2.815/2.958 secs] [Times: user=4.72 sys=0.24, real=2.96 secs]<br>2018-07-09T14:24:33.862+0800: 337424.170: [CMS-concurrent-reset-start]<br>2018-07-09T14:24:33.877+0800: 337424.185: [CMS-concurrent-reset: 0.015/0.015 secs] [Times: user=0.02 sys=0.00, real=0.02 secs]<br>2018-07-09T14:24:35.886+0800: 337426.194: [GC (CMS Initial Mark) [1 CMS-initial-mark: 4303632K(5183936K)] 4520863K(6106880K), 0.0222239 secs] [Times: user=0.21 sys=0.00, real=0.02 secs]<br>2018-07-09T14:24:35.910+0800: 337426.218: [CMS-concurrent-mark-start]<br>2018-07-09T14:24:39.373+0800: 337429.681: [CMS-concurrent-mark: 3.449/3.463 secs] [Times: user=14.73 sys=0.10, real=3.46 secs]<br>2018-07-09T14:24:39.373+0800: 337429.681: [CMS-concurrent-preclean-start]<br>2018-07-09T14:24:39.396+0800: 337429.704: [CMS-concurrent-preclean: 0.023/0.023 secs] [Times: user=0.02 sys=0.00, real=0.02 secs]<br>2018-07-09T14:24:39.396+0800: 337429.704: [CMS-concurrent-abortable-preclean-start]<br> CMS: abort preclean due to time 2018-07-09T14:24:44.405+0800: 337434.713: [CMS-concurrent-abortable-preclean: 3.247/5.009 secs] [Times: user=3.97 sys=0.16, real=5.01 secs]<br>2018-07-09T14:24:44.415+0800: 337434.723: [GC (CMS Final Remark) [YG occupancy: 553150 K (922944 K)]337434.723: [Rescan (parallel) , 0.0524846 secs]337434.776: [weak refs processing, 0.0000721 secs]337434.776: [class unloading, 0.1203949 secs]337434.896: [scrub symbol table, 0.0454455 secs]337434.942: [scrub string table, 0.0063738 secs][1 CMS-remark: 4303632K(5183936K)] 4856783K(6106880K), 0.2322675 secs] [Times: user=0.83 sys=0.00, real=0.23 secs]<br>2018-07-09T14:24:44.648+0800: 337434.956: [CMS-concurrent-sweep-start]<br>2018-07-09T14:24:47.150+0800: 337437.458: [CMS-concurrent-sweep: 2.492/2.501 secs] [Times: user=2.85 sys=0.03, real=2.50 secs]<br>2018-07-09T14:24:47.150+0800: 337437.458: [CMS-concurrent-reset-start]<br>2018-07-09T14:24:47.165+0800: 337437.473: [CMS-concurrent-reset: 0.015/0.015 secs] [Times: user=0.01 sys=0.00, real=0.01 secs]<br>3、mat分析情况：</p>\n<p><img src=\"\\images\\pasted-2.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-3.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-4.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-5.png\" alt=\"upload successful\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>问题描述：代扣网关启动一段时间后，监控发现系统随着运行时间越长越缓慢（第一时间考虑是否内存泄漏）</p>\n<p>现象：1、一个很简单的代码块执行耗时很长，甚至长达30S以上<br>          2、老年代频繁进行内存回收，但是回收后却仍旧占用了很多内存，且随着时间推移，占用的越来越多，只到系统                       down掉<br>          3、青年代内存频繁回收（该原因是青年代内存分配不合理，可考虑青年代占总堆内存3：8，但是不能太大，如果太                   大，当青年代回收时，如果需要晋升到老年代的对象占内容大于老年代可用空间的一般，将会导致Full GC）</p>\n<p>原因推测：<br>            上述现象第一反应是疑似出现内存泄漏<br>处理过程：1、系统挂掉（重启）前，dump内存镜像文件，  jmap -dump:format=b,file=盘符:/XXX.hprof <pid><br>                 2、使用mat工具分析dump文件<br>                 3、找出引起内存泄漏的对象<br>                 4、分析解决方案</pid></p>\n<p>附：<br>1、执行缓慢的代码日志：下面是一段for循环代码块，每次循环先校验再入库，逻辑简单，但发现异常的慢！<br>2018-07-04 08:39:06.511 INFO  [DubboServerHandler-172.20.30.60:20939-99] BatchDeductCheckNode-00060000030000000001807040838510002- 代扣请求校验<br>2018-07-04 08:39:06.539 INFO  [DubboServerHandler-172.20.30.60:20939-99] BatchDeductCheckNode-00060000030000000001807040838510002- 插入流水信息到代扣流水表和流水附表<br>2018-07-04 08:39:06.596 INFO  [DubboServerHandler-172.20.30.60:20939-99] BatchDeductCheckNode-00060000030000000001807040838510002- 代扣请求校验<br>2018-07-04 08:39:06.613 INFO  [DubboServerHandler-172.20.30.60:20939-99] BatchDeductCheckNode-00060000030000000001807040838510002- 插入流水信息到代扣流水表和流水附表<br>2018-07-04 08:39:06.673 INFO  [DubboServerHandler-172.20.30.60:20939-99] BatchDeductCheckNode-00060000030000000001807040838510002- 代扣请求校验<br>2018-07-04 08:39:06.696 INFO  [DubboServerHandler-172.20.30.60:20939-99] BatchDeductCheckNode-00060000030000000001807040838510002- 插入流水信息到代扣流水表和流水附表<br>2018-07-04 08:39:39.615 INFO  [DubboServerHandler-172.20.30.60:20939-99] BatchDeductCheckNode-00060000030000000001807040838510002- 代扣请求校验<br>2018-07-04 08:39:39.618 INFO  [DubboServerHandler-172.20.30.60:20939-99] BatchDeductCheckNode-00060000030000000001807040838510002- 插入流水信息到代扣流水表和流水附表<br>2、GC日志：老年代CMS策略垃圾回收日志，反复回收，但依旧回收不了内存，内存消耗的原来越多<br>2018-07-09T14:24:21.701+0800: 337412.009: [GC (CMS Initial Mark) [1 CMS-initial-mark: 4302687K(5183936K)] 4971300K(6106880K), 0.0621324 secs] [Times: user=0.73 sys=0.00, real=0.07 secs]<br>2018-07-09T14:24:21.764+0800: 337412.072: [CMS-concurrent-mark-start]<br>2018-07-09T14:24:22.900+0800: 337413.208: [GC (Allocation Failure) 337413.208: [ParNew: 760830K-&gt;17436K(922944K), 0.0174147 secs] 5063517K-&gt;4320664K(6106880K), 0.0180025 secs] [Times: user=0.11 sys=0.01, real=0.02 secs]<br>2018-07-09T14:24:25.524+0800: 337415.832: [CMS-concurrent-mark: 3.607/3.760 secs] [Times: user=16.27 sys=0.18, real=3.75 secs]<br>2018-07-09T14:24:25.524+0800: 337415.832: [CMS-concurrent-preclean-start]<br>2018-07-09T14:24:25.571+0800: 337415.879: [CMS-concurrent-preclean: 0.045/0.047 secs] [Times: user=0.07 sys=0.01, real=0.05 secs]<br>2018-07-09T14:24:25.571+0800: 337415.879: [CMS-concurrent-abortable-preclean-start]<br> CMS: abort preclean due to time 2018-07-09T14:24:30.647+0800: 337420.955: [CMS-concurrent-abortable-preclean: 3.287/5.076 secs] [Times: user=4.95 sys=0.24, real=5.08 secs]<br>2018-07-09T14:24:30.658+0800: 337420.966: [GC (CMS Final Remark) [YG occupancy: 617178 K (922944 K)]337420.966: [Rescan (parallel) , 0.0603228 secs]337421.027: [weak refs processing, 0.0000841 secs]337421.027: [class unloading, 0.1254411 secs]337421.152: [scrub symbol table, 0.0445538 secs]337421.197: [scrub string table, 0.0066675 secs][1 CMS-remark: 4303227K(5183936K)] 4920406K(6106880K), 0.2439490 secs] [Times: user=0.90 sys=0.01, real=0.24 secs]<br>2018-07-09T14:24:30.903+0800: 337421.211: [CMS-concurrent-sweep-start]<br>2018-07-09T14:24:31.941+0800: 337422.249: [GC (Allocation Failure) 337422.249: [ParNew: 755804K-&gt;24447K(922944K), 0.0350291 secs] 5059025K-&gt;4328220K(6106880K), 0.0357587 secs] [Times: user=0.18 sys=0.00, real=0.04 secs]<br>2018-07-09T14:24:33.862+0800: 337424.170: [CMS-concurrent-sweep: 2.815/2.958 secs] [Times: user=4.72 sys=0.24, real=2.96 secs]<br>2018-07-09T14:24:33.862+0800: 337424.170: [CMS-concurrent-reset-start]<br>2018-07-09T14:24:33.877+0800: 337424.185: [CMS-concurrent-reset: 0.015/0.015 secs] [Times: user=0.02 sys=0.00, real=0.02 secs]<br>2018-07-09T14:24:35.886+0800: 337426.194: [GC (CMS Initial Mark) [1 CMS-initial-mark: 4303632K(5183936K)] 4520863K(6106880K), 0.0222239 secs] [Times: user=0.21 sys=0.00, real=0.02 secs]<br>2018-07-09T14:24:35.910+0800: 337426.218: [CMS-concurrent-mark-start]<br>2018-07-09T14:24:39.373+0800: 337429.681: [CMS-concurrent-mark: 3.449/3.463 secs] [Times: user=14.73 sys=0.10, real=3.46 secs]<br>2018-07-09T14:24:39.373+0800: 337429.681: [CMS-concurrent-preclean-start]<br>2018-07-09T14:24:39.396+0800: 337429.704: [CMS-concurrent-preclean: 0.023/0.023 secs] [Times: user=0.02 sys=0.00, real=0.02 secs]<br>2018-07-09T14:24:39.396+0800: 337429.704: [CMS-concurrent-abortable-preclean-start]<br> CMS: abort preclean due to time 2018-07-09T14:24:44.405+0800: 337434.713: [CMS-concurrent-abortable-preclean: 3.247/5.009 secs] [Times: user=3.97 sys=0.16, real=5.01 secs]<br>2018-07-09T14:24:44.415+0800: 337434.723: [GC (CMS Final Remark) [YG occupancy: 553150 K (922944 K)]337434.723: [Rescan (parallel) , 0.0524846 secs]337434.776: [weak refs processing, 0.0000721 secs]337434.776: [class unloading, 0.1203949 secs]337434.896: [scrub symbol table, 0.0454455 secs]337434.942: [scrub string table, 0.0063738 secs][1 CMS-remark: 4303632K(5183936K)] 4856783K(6106880K), 0.2322675 secs] [Times: user=0.83 sys=0.00, real=0.23 secs]<br>2018-07-09T14:24:44.648+0800: 337434.956: [CMS-concurrent-sweep-start]<br>2018-07-09T14:24:47.150+0800: 337437.458: [CMS-concurrent-sweep: 2.492/2.501 secs] [Times: user=2.85 sys=0.03, real=2.50 secs]<br>2018-07-09T14:24:47.150+0800: 337437.458: [CMS-concurrent-reset-start]<br>2018-07-09T14:24:47.165+0800: 337437.473: [CMS-concurrent-reset: 0.015/0.015 secs] [Times: user=0.01 sys=0.00, real=0.01 secs]<br>3、mat分析情况：</p>\n<p><img src=\"\\images\\pasted-2.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-3.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-4.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-5.png\" alt=\"upload successful\"></p>\n"},{"title":"围绕dubbo底层原理漫谈微服务","author":"Xiang Chuang","date":"2019-05-06T09:56:00.000Z","_content":"## 说在前面\n&emsp;&emsp;本文将从dubbo底层原理的角度深入探讨dubbo实现机制，同时，聊一聊当下为什么流行微服务架构，并介绍基于dubbo进行微服务架构的特点。需要说明的是，本文的出发点为dubbo，最终引申到微服务架构，后续会有专门的文章以微服务架构为出发点，详细探讨如何进行企业级微服务架构。\n\n## 概述\n+ [XXX](#partI)\n+ [XXX](#partII)\n+ [XXX](#partIII)\n+ [XXX](#partIV)\n\n----------------------------------","source":"_posts/围绕dubbo底层原理漫谈微服务.md","raw":"title: 围绕dubbo底层原理漫谈微服务\nauthor: Xiang Chuang\ntags:\n  - dubbo\n  - 微服务\ncategories:\n  - 专题研讨\ndate: 2019-05-06 17:56:00\n---\n## 说在前面\n&emsp;&emsp;本文将从dubbo底层原理的角度深入探讨dubbo实现机制，同时，聊一聊当下为什么流行微服务架构，并介绍基于dubbo进行微服务架构的特点。需要说明的是，本文的出发点为dubbo，最终引申到微服务架构，后续会有专门的文章以微服务架构为出发点，详细探讨如何进行企业级微服务架构。\n\n## 概述\n+ [XXX](#partI)\n+ [XXX](#partII)\n+ [XXX](#partIII)\n+ [XXX](#partIV)\n\n----------------------------------","slug":"围绕dubbo底层原理漫谈微服务","published":1,"updated":"2019-09-30T07:34:10.839Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3e5th2v002fp966ow63rg6k","content":"<h2 id=\"说在前面\"><a href=\"#说在前面\" class=\"headerlink\" title=\"说在前面\"></a>说在前面</h2><p>&emsp;&emsp;本文将从dubbo底层原理的角度深入探讨dubbo实现机制，同时，聊一聊当下为什么流行微服务架构，并介绍基于dubbo进行微服务架构的特点。需要说明的是，本文的出发点为dubbo，最终引申到微服务架构，后续会有专门的文章以微服务架构为出发点，详细探讨如何进行企业级微服务架构。</p>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><ul>\n<li><a href=\"#partI\">XXX</a></li>\n<li><a href=\"#partII\">XXX</a></li>\n<li><a href=\"#partIII\">XXX</a></li>\n<li><a href=\"#partIV\">XXX</a></li>\n</ul>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"说在前面\"><a href=\"#说在前面\" class=\"headerlink\" title=\"说在前面\"></a>说在前面</h2><p>&emsp;&emsp;本文将从dubbo底层原理的角度深入探讨dubbo实现机制，同时，聊一聊当下为什么流行微服务架构，并介绍基于dubbo进行微服务架构的特点。需要说明的是，本文的出发点为dubbo，最终引申到微服务架构，后续会有专门的文章以微服务架构为出发点，详细探讨如何进行企业级微服务架构。</p>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><ul>\n<li><a href=\"#partI\">XXX</a></li>\n<li><a href=\"#partII\">XXX</a></li>\n<li><a href=\"#partIII\">XXX</a></li>\n<li><a href=\"#partIV\">XXX</a></li>\n</ul>\n<hr>\n"},{"title":"应用停机-优雅停机问题","author":"Xiang Chuang","date":"2018-07-17T06:28:00.000Z","_content":"优雅停机问题，new对象的时候，应用classloader可能已经关闭了哦！\n\nTomcatEmbeddedWebappClassLoader\n  context: ROOT\n  delegate: true\n----------> Parent Classloader:\nsun.misc.Launcher$AppClassLoader@14dad5dc\n\n![upload successful](\\images\\pasted-19.png)\n\n![upload successful](\\images\\pasted-20.png)\n\n![upload successful](\\images\\pasted-21.png)\n\n理论分析：\nspring-boot启动：\n1、new SpringApplication(Main.class).run(args);\n     1.1、加载SpringApplicationRunListeners并执行started()\n     1.2、createAndRefreshContext \n            1.2.1、Create and configure the environment\n            1.2.2、Create, load, refresh and run the ApplicationContext                                        【org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext】\n            1.2.3、Add boot specific singleton beans->springApplicationArguments\n            1.2.4、Load the sources->Main方法\n            1.2.5、SpringApplicationRunListeners执行contextLoaded\n            1.2.6、Refresh the context->AbstractApplicationContext\n                        1.2.6.1、Prepare this context for refreshing.\n                        1.2.6.2、Tell the subclass to refresh the internal bean factory.\n                        1.2.6.3、Prepare the bean factory for use in this context.\n                        1.2.6.4、Allows post-processing of the bean factory in context subclasses.\n                   【org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer】\n                        1.2.6.5、Invoke factory processors registered as beans in the context.\n                        1.2.6.6、Register bean processors that intercept bean creation.\n                        1.2.6.7、Initialize message source for this context.\n                        1.2.6.8、Initialize event multicaster for this context.\n                        1.2.6.9、Initialize other special beans in specific context subclasses.\n                        1.2.6.10、Check for listener beans and register them.\n                        1.2.6.11、Instantiate all remaining (non-lazy-init) singletons.\n                        1.2.6.12、Last step: publish corresponding event.\n                        1.2.7、registerShutdownHook（注册jvm关闭钩子，钩子执行AbstractApplicationContext.doClose()）\n        1.3、call finished listener（可以做自己的事哦，yijiboot在这里就注册系统关闭钩子）\n        eg:com.yiji.boot.core.listener.YijiApplicationRunListener \n        new ShutdownThread().register();  ->shutdownApp();\n\nspring-boot关闭： AbstractApplicationContext.doClose()\n    1、Publish shutdown event.\n        earlyApplicationEvents（里面对应的事件，延迟执行）\n        eg：我们配置的dubbo关闭钩子就是同步执行的\n    2、Stop all Lifecycle beans, to avoid delays during individual destruction.\n    3、Destroy all cached singletons in the context's BeanFactory.\n    4、Close the state of this context itself.\n    5、Let subclasses do some final clean-up if they wish...\n    【org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.doClose()】\n![upload successful](\\images\\pasted-22.png)\n18.07.12\n又出问题啦\n自主化发布时，直接替换项目包，项目自动重启了，且，没有消费掉dubbo\n\n经分析：\n账务系统采用的依旧是war包的方式，部署在tomcat容器的。\n\n因此，替换war包后，项目自动重启，首先关闭tomcat容器，calssloader注销，然后注销springbean（这时候就出问题啦，因此某些bean已经不存在，不可使用）\n![upload successful](\\images\\pasted-23.png)","source":"_posts/应用停机-优雅停机问题.md","raw":"title: 应用停机-优雅停机问题\nauthor: Xiang Chuang\ntags:\n  - 优雅停机\ncategories:\n  - 这些年，那些坑\ndate: 2018-07-17 14:28:00\n---\n优雅停机问题，new对象的时候，应用classloader可能已经关闭了哦！\n\nTomcatEmbeddedWebappClassLoader\n  context: ROOT\n  delegate: true\n----------> Parent Classloader:\nsun.misc.Launcher$AppClassLoader@14dad5dc\n\n![upload successful](\\images\\pasted-19.png)\n\n![upload successful](\\images\\pasted-20.png)\n\n![upload successful](\\images\\pasted-21.png)\n\n理论分析：\nspring-boot启动：\n1、new SpringApplication(Main.class).run(args);\n     1.1、加载SpringApplicationRunListeners并执行started()\n     1.2、createAndRefreshContext \n            1.2.1、Create and configure the environment\n            1.2.2、Create, load, refresh and run the ApplicationContext                                        【org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext】\n            1.2.3、Add boot specific singleton beans->springApplicationArguments\n            1.2.4、Load the sources->Main方法\n            1.2.5、SpringApplicationRunListeners执行contextLoaded\n            1.2.6、Refresh the context->AbstractApplicationContext\n                        1.2.6.1、Prepare this context for refreshing.\n                        1.2.6.2、Tell the subclass to refresh the internal bean factory.\n                        1.2.6.3、Prepare the bean factory for use in this context.\n                        1.2.6.4、Allows post-processing of the bean factory in context subclasses.\n                   【org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer】\n                        1.2.6.5、Invoke factory processors registered as beans in the context.\n                        1.2.6.6、Register bean processors that intercept bean creation.\n                        1.2.6.7、Initialize message source for this context.\n                        1.2.6.8、Initialize event multicaster for this context.\n                        1.2.6.9、Initialize other special beans in specific context subclasses.\n                        1.2.6.10、Check for listener beans and register them.\n                        1.2.6.11、Instantiate all remaining (non-lazy-init) singletons.\n                        1.2.6.12、Last step: publish corresponding event.\n                        1.2.7、registerShutdownHook（注册jvm关闭钩子，钩子执行AbstractApplicationContext.doClose()）\n        1.3、call finished listener（可以做自己的事哦，yijiboot在这里就注册系统关闭钩子）\n        eg:com.yiji.boot.core.listener.YijiApplicationRunListener \n        new ShutdownThread().register();  ->shutdownApp();\n\nspring-boot关闭： AbstractApplicationContext.doClose()\n    1、Publish shutdown event.\n        earlyApplicationEvents（里面对应的事件，延迟执行）\n        eg：我们配置的dubbo关闭钩子就是同步执行的\n    2、Stop all Lifecycle beans, to avoid delays during individual destruction.\n    3、Destroy all cached singletons in the context's BeanFactory.\n    4、Close the state of this context itself.\n    5、Let subclasses do some final clean-up if they wish...\n    【org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.doClose()】\n![upload successful](\\images\\pasted-22.png)\n18.07.12\n又出问题啦\n自主化发布时，直接替换项目包，项目自动重启了，且，没有消费掉dubbo\n\n经分析：\n账务系统采用的依旧是war包的方式，部署在tomcat容器的。\n\n因此，替换war包后，项目自动重启，首先关闭tomcat容器，calssloader注销，然后注销springbean（这时候就出问题啦，因此某些bean已经不存在，不可使用）\n![upload successful](\\images\\pasted-23.png)","slug":"应用停机-优雅停机问题","published":1,"updated":"2019-09-30T07:34:10.839Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3e5th2w002jp966ftcf6t6q","content":"<p>优雅停机问题，new对象的时候，应用classloader可能已经关闭了哦！</p>\n<p>TomcatEmbeddedWebappClassLoader<br>  context: ROOT<br>  delegate: true<br>———-&gt; Parent Classloader:<br>sun.misc.Launcher$AppClassLoader@14dad5dc</p>\n<p><img src=\"\\images\\pasted-19.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-20.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-21.png\" alt=\"upload successful\"></p>\n<p>理论分析：<br>spring-boot启动：<br>1、new SpringApplication(Main.class).run(args);<br>     1.1、加载SpringApplicationRunListeners并执行started()<br>     1.2、createAndRefreshContext<br>            1.2.1、Create and configure the environment<br>            1.2.2、Create, load, refresh and run the ApplicationContext                                        【org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext】<br>            1.2.3、Add boot specific singleton beans-&gt;springApplicationArguments<br>            1.2.4、Load the sources-&gt;Main方法<br>            1.2.5、SpringApplicationRunListeners执行contextLoaded<br>            1.2.6、Refresh the context-&gt;AbstractApplicationContext<br>                        1.2.6.1、Prepare this context for refreshing.<br>                        1.2.6.2、Tell the subclass to refresh the internal bean factory.<br>                        1.2.6.3、Prepare the bean factory for use in this context.<br>                        1.2.6.4、Allows post-processing of the bean factory in context subclasses.<br>                   【org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer】<br>                        1.2.6.5、Invoke factory processors registered as beans in the context.<br>                        1.2.6.6、Register bean processors that intercept bean creation.<br>                        1.2.6.7、Initialize message source for this context.<br>                        1.2.6.8、Initialize event multicaster for this context.<br>                        1.2.6.9、Initialize other special beans in specific context subclasses.<br>                        1.2.6.10、Check for listener beans and register them.<br>                        1.2.6.11、Instantiate all remaining (non-lazy-init) singletons.<br>                        1.2.6.12、Last step: publish corresponding event.<br>                        1.2.7、registerShutdownHook（注册jvm关闭钩子，钩子执行AbstractApplicationContext.doClose()）<br>        1.3、call finished listener（可以做自己的事哦，yijiboot在这里就注册系统关闭钩子）<br>        eg:com.yiji.boot.core.listener.YijiApplicationRunListener<br>        new ShutdownThread().register();  -&gt;shutdownApp();</p>\n<p>spring-boot关闭： AbstractApplicationContext.doClose()<br>    1、Publish shutdown event.<br>        earlyApplicationEvents（里面对应的事件，延迟执行）<br>        eg：我们配置的dubbo关闭钩子就是同步执行的<br>    2、Stop all Lifecycle beans, to avoid delays during individual destruction.<br>    3、Destroy all cached singletons in the context’s BeanFactory.<br>    4、Close the state of this context itself.<br>    5、Let subclasses do some final clean-up if they wish…<br>    【org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.doClose()】<br><img src=\"\\images\\pasted-22.png\" alt=\"upload successful\"><br>18.07.12<br>又出问题啦<br>自主化发布时，直接替换项目包，项目自动重启了，且，没有消费掉dubbo</p>\n<p>经分析：<br>账务系统采用的依旧是war包的方式，部署在tomcat容器的。</p>\n<p>因此，替换war包后，项目自动重启，首先关闭tomcat容器，calssloader注销，然后注销springbean（这时候就出问题啦，因此某些bean已经不存在，不可使用）<br><img src=\"\\images\\pasted-23.png\" alt=\"upload successful\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>优雅停机问题，new对象的时候，应用classloader可能已经关闭了哦！</p>\n<p>TomcatEmbeddedWebappClassLoader<br>  context: ROOT<br>  delegate: true<br>———-&gt; Parent Classloader:<br>sun.misc.Launcher$AppClassLoader@14dad5dc</p>\n<p><img src=\"\\images\\pasted-19.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-20.png\" alt=\"upload successful\"></p>\n<p><img src=\"\\images\\pasted-21.png\" alt=\"upload successful\"></p>\n<p>理论分析：<br>spring-boot启动：<br>1、new SpringApplication(Main.class).run(args);<br>     1.1、加载SpringApplicationRunListeners并执行started()<br>     1.2、createAndRefreshContext<br>            1.2.1、Create and configure the environment<br>            1.2.2、Create, load, refresh and run the ApplicationContext                                        【org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext】<br>            1.2.3、Add boot specific singleton beans-&gt;springApplicationArguments<br>            1.2.4、Load the sources-&gt;Main方法<br>            1.2.5、SpringApplicationRunListeners执行contextLoaded<br>            1.2.6、Refresh the context-&gt;AbstractApplicationContext<br>                        1.2.6.1、Prepare this context for refreshing.<br>                        1.2.6.2、Tell the subclass to refresh the internal bean factory.<br>                        1.2.6.3、Prepare the bean factory for use in this context.<br>                        1.2.6.4、Allows post-processing of the bean factory in context subclasses.<br>                   【org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer】<br>                        1.2.6.5、Invoke factory processors registered as beans in the context.<br>                        1.2.6.6、Register bean processors that intercept bean creation.<br>                        1.2.6.7、Initialize message source for this context.<br>                        1.2.6.8、Initialize event multicaster for this context.<br>                        1.2.6.9、Initialize other special beans in specific context subclasses.<br>                        1.2.6.10、Check for listener beans and register them.<br>                        1.2.6.11、Instantiate all remaining (non-lazy-init) singletons.<br>                        1.2.6.12、Last step: publish corresponding event.<br>                        1.2.7、registerShutdownHook（注册jvm关闭钩子，钩子执行AbstractApplicationContext.doClose()）<br>        1.3、call finished listener（可以做自己的事哦，yijiboot在这里就注册系统关闭钩子）<br>        eg:com.yiji.boot.core.listener.YijiApplicationRunListener<br>        new ShutdownThread().register();  -&gt;shutdownApp();</p>\n<p>spring-boot关闭： AbstractApplicationContext.doClose()<br>    1、Publish shutdown event.<br>        earlyApplicationEvents（里面对应的事件，延迟执行）<br>        eg：我们配置的dubbo关闭钩子就是同步执行的<br>    2、Stop all Lifecycle beans, to avoid delays during individual destruction.<br>    3、Destroy all cached singletons in the context’s BeanFactory.<br>    4、Close the state of this context itself.<br>    5、Let subclasses do some final clean-up if they wish…<br>    【org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.doClose()】<br><img src=\"\\images\\pasted-22.png\" alt=\"upload successful\"><br>18.07.12<br>又出问题啦<br>自主化发布时，直接替换项目包，项目自动重启了，且，没有消费掉dubbo</p>\n<p>经分析：<br>账务系统采用的依旧是war包的方式，部署在tomcat容器的。</p>\n<p>因此，替换war包后，项目自动重启，首先关闭tomcat容器，calssloader注销，然后注销springbean（这时候就出问题啦，因此某些bean已经不存在，不可使用）<br><img src=\"\\images\\pasted-23.png\" alt=\"upload successful\"></p>\n"},{"title":"数据库-重启引发的主键问题","author":"Xiang Chuang","date":"2018-07-22T04:04:00.000Z","_content":"问题：cs系统 shut_message  自增主键id变小了。\n\n原因：cs的数据库重启了，但是应用没停止，   mysql重启后，回滚了部分自增id，（亦或者是备库当主库用）\n\n\n业务原因：本以为外网关闭了，定时任务关闭了 不会有交易\n但是，  应用监控检查发邮件了，cs通过mq接收到了请求，连接数据库失败（此时数据库连接不上）。","source":"_posts/数据库-重启引发的主键问题.md","raw":"title: 数据库-重启引发的主键问题\nauthor: Xiang Chuang\ntags:\n  - db\ncategories:\n  - 这些年，那些坑\ndate: 2018-07-22 12:04:00\n---\n问题：cs系统 shut_message  自增主键id变小了。\n\n原因：cs的数据库重启了，但是应用没停止，   mysql重启后，回滚了部分自增id，（亦或者是备库当主库用）\n\n\n业务原因：本以为外网关闭了，定时任务关闭了 不会有交易\n但是，  应用监控检查发邮件了，cs通过mq接收到了请求，连接数据库失败（此时数据库连接不上）。","slug":"数据库-重启引发的主键问题","published":1,"updated":"2019-09-30T07:34:10.839Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3e5th2x002mp9665hpycbwh","content":"<p>问题：cs系统 shut_message  自增主键id变小了。</p>\n<p>原因：cs的数据库重启了，但是应用没停止，   mysql重启后，回滚了部分自增id，（亦或者是备库当主库用）</p>\n<p>业务原因：本以为外网关闭了，定时任务关闭了 不会有交易<br>但是，  应用监控检查发邮件了，cs通过mq接收到了请求，连接数据库失败（此时数据库连接不上）。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>问题：cs系统 shut_message  自增主键id变小了。</p>\n<p>原因：cs的数据库重启了，但是应用没停止，   mysql重启后，回滚了部分自增id，（亦或者是备库当主库用）</p>\n<p>业务原因：本以为外网关闭了，定时任务关闭了 不会有交易<br>但是，  应用监控检查发邮件了，cs通过mq接收到了请求，连接数据库失败（此时数据库连接不上）。</p>\n"},{"title":"浏览器-资源加载","author":"Xiang Chuang","date":"2017-07-20T04:30:00.000Z","_content":"浏览器在同一个域名下并发加载资源（js，图片，css等）数是有限的，ie8（6个），谷歌（4-6个），\n解决：将资源尽可能分布在不同的域名下。","source":"_posts/浏览器-资源加载.md","raw":"title: 浏览器-资源加载\nauthor: Xiang Chuang\ntags:\n  - 浏览器\ncategories:\n  - 爱学爱问\ndate: 2017-07-20 12:30:00\n---\n浏览器在同一个域名下并发加载资源（js，图片，css等）数是有限的，ie8（6个），谷歌（4-6个），\n解决：将资源尽可能分布在不同的域名下。","slug":"浏览器-资源加载","published":1,"updated":"2019-09-30T07:34:10.840Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3e5th2y002pp9663qqqbr2d","content":"<p>浏览器在同一个域名下并发加载资源（js，图片，css等）数是有限的，ie8（6个），谷歌（4-6个），<br>解决：将资源尽可能分布在不同的域名下。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>浏览器在同一个域名下并发加载资源（js，图片，css等）数是有限的，ie8（6个），谷歌（4-6个），<br>解决：将资源尽可能分布在不同的域名下。</p>\n"},{"title":"淘宝架构-进化","author":"Xiang Chuang","date":"2017-07-20T04:30:00.000Z","_content":"V1.0：LAMP（Linux，Apache，MySQL，PHP） 2003年5月—2004年1月\n           注：一个主库（读写），两个从库（读） ，数据同步死锁 \n![upload successful](\\images\\pasted-57.png)\n\nV1.1：LAOP（Linux，Apache，Oracle，PHP）2004年1月—2004年5月\n            注：php访问数据库的方式很直接，短连接。 Oracle需要用到连接池、长连接才体现出其优势，但php没有很好的连接池           \n![upload successful](\\images\\pasted-58.png)\n\nV2.0：php切换为java IOE。2004年2月—2005年3月\n![upload successful](\\images\\pasted-59.png)\n\nV2.1:加入缓存，缓存只读信息，CDN  2004年10月—2007年1月\n![upload successful](\\images\\pasted-60.png)\n\nV2.2：kv缓存，tfs   模式类似于hadoop\n![upload successful](\\images\\pasted-61.png)\n","source":"_posts/淘宝架构-进化.md","raw":"title: 淘宝架构-进化\nauthor: Xiang Chuang\ntags:\n  - 架构\ncategories:\n  - 爱学爱问\ndate: 2017-07-20 12:30:00\n---\nV1.0：LAMP（Linux，Apache，MySQL，PHP） 2003年5月—2004年1月\n           注：一个主库（读写），两个从库（读） ，数据同步死锁 \n![upload successful](\\images\\pasted-57.png)\n\nV1.1：LAOP（Linux，Apache，Oracle，PHP）2004年1月—2004年5月\n            注：php访问数据库的方式很直接，短连接。 Oracle需要用到连接池、长连接才体现出其优势，但php没有很好的连接池           \n![upload successful](\\images\\pasted-58.png)\n\nV2.0：php切换为java IOE。2004年2月—2005年3月\n![upload successful](\\images\\pasted-59.png)\n\nV2.1:加入缓存，缓存只读信息，CDN  2004年10月—2007年1月\n![upload successful](\\images\\pasted-60.png)\n\nV2.2：kv缓存，tfs   模式类似于hadoop\n![upload successful](\\images\\pasted-61.png)\n","slug":"淘宝架构-进化","published":1,"updated":"2019-09-30T07:34:10.840Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3e5th2z002sp966gj7fp1e0","content":"<p>V1.0：LAMP（Linux，Apache，MySQL，PHP） 2003年5月—2004年1月<br>           注：一个主库（读写），两个从库（读） ，数据同步死锁<br><img src=\"\\images\\pasted-57.png\" alt=\"upload successful\"></p>\n<p>V1.1：LAOP（Linux，Apache，Oracle，PHP）2004年1月—2004年5月<br>            注：php访问数据库的方式很直接，短连接。 Oracle需要用到连接池、长连接才体现出其优势，但php没有很好的连接池<br><img src=\"\\images\\pasted-58.png\" alt=\"upload successful\"></p>\n<p>V2.0：php切换为java IOE。2004年2月—2005年3月<br><img src=\"\\images\\pasted-59.png\" alt=\"upload successful\"></p>\n<p>V2.1:加入缓存，缓存只读信息，CDN  2004年10月—2007年1月<br><img src=\"\\images\\pasted-60.png\" alt=\"upload successful\"></p>\n<p>V2.2：kv缓存，tfs   模式类似于hadoop<br><img src=\"\\images\\pasted-61.png\" alt=\"upload successful\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>V1.0：LAMP（Linux，Apache，MySQL，PHP） 2003年5月—2004年1月<br>           注：一个主库（读写），两个从库（读） ，数据同步死锁<br><img src=\"\\images\\pasted-57.png\" alt=\"upload successful\"></p>\n<p>V1.1：LAOP（Linux，Apache，Oracle，PHP）2004年1月—2004年5月<br>            注：php访问数据库的方式很直接，短连接。 Oracle需要用到连接池、长连接才体现出其优势，但php没有很好的连接池<br><img src=\"\\images\\pasted-58.png\" alt=\"upload successful\"></p>\n<p>V2.0：php切换为java IOE。2004年2月—2005年3月<br><img src=\"\\images\\pasted-59.png\" alt=\"upload successful\"></p>\n<p>V2.1:加入缓存，缓存只读信息，CDN  2004年10月—2007年1月<br><img src=\"\\images\\pasted-60.png\" alt=\"upload successful\"></p>\n<p>V2.2：kv缓存，tfs   模式类似于hadoop<br><img src=\"\\images\\pasted-61.png\" alt=\"upload successful\"></p>\n"},{"title":"谈一谈锁","date":"2019-04-08T14:11:18.000Z","_content":"","source":"_posts/谈一谈锁.md","raw":"---\ntitle: 谈一谈锁\ndate: 2019-04-08 22:11:18\ntags:\ncategories:\n---\n","slug":"谈一谈锁","published":1,"updated":"2019-09-30T07:34:10.840Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3e5th2z002wp966ztmu1y1u","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"G1- --xx:initiatingheapoccupancypercent变量之问","author":"Xiang Chuang","date":"2019-04-09T14:24:00.000Z","_content":"问题：该变量究竟何意？\n官方解释\n![upload successful](\\images\\pasted-0.png)\n\n疑问：整堆占用率，到底是老年代区域占用整堆比率还是所有区域占用整堆比率？\n个人认为应该是老年代占用区域\n原因：\n1、新生代默认比例为5-60%， 新生代的回收是使用殆尽时，那么，本文讨论的这个变量默认时45%，这两个是用一点冲突的\n2、工作内存调优时发现gc日志，报出占用率超过45%时，此时更像是老年代超过45%\n3、工作内存调优过程：\nmpay堆大小 1500多兆，堆内存使用率预警值90%  \na、最初时候出现预警时 堆内存占用率时 1500*60% + ？ = 1500M左右 即，差不多用光了； 时常预警\nb、后来调成 1500*25% + ？=1000M左右； 没有再预警\nc、再后来调成 1500*45% + ？ = 1350M左右 很少出现\n【？】处是老年代的占比，  如果用45%来计算，才能符合我们的现象。\n\na、 最初时候出现预警时 堆内存占用率时 1500*60% + 1500*45% ；\nb、后来调成 1500*25% + 1500*45%=975M ；\nc、再后来调成 1500*45% + 1500*45% = 1350M\n\n附：GC日志记录\n```\n2019-04-08T22:58:18.594+0800: 45124.782: [GC pause (G1 Evacuation Pause) (young) 45124.783: [G1Ergonomics (CSet Construction) start choosing CSet, _pending_cards: 13273, predicted base time: 26.68 ms, remaining time: 23.32 ms, target pause time: 50.00 ms]\n 45124.783: [G1Ergonomics (CSet Construction) add young regions to CSet, eden: 664 regions, survivors: 27 regions, predicted young region time: 15.56 ms]\n 45124.783: [G1Ergonomics (CSet Construction) finish choosing CSet, eden: 664 regions, survivors: 27 regions, old: 0 regions, predicted pause time: 42.25 ms, target pause time: 50.00 ms]\n, 0.0195542 secs]\n   [Parallel Time: 9.5 ms, GC Workers: 8]\n      [GC Worker Start (ms): Min: 45124782.9, Avg: 45124783.1, Max: 45124783.3, Diff: 0.4]\n      [Ext Root Scanning (ms): Min: 2.7, Avg: 3.0, Max: 4.5, Diff: 1.8, Sum: 24.3]\n      [Update RS (ms): Min: 1.6, Avg: 2.8, Max: 3.4, Diff: 1.8, Sum: 22.3]\n         [Processed Buffers: Min: 1, Avg: 15.6, Max: 28, Diff: 27, Sum: 125]\n      [Scan RS (ms): Min: 0.0, Avg: 0.2, Max: 0.3, Diff: 0.3, Sum: 1.5]\n      [Code Root Scanning (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.1]\n      [Object Copy (ms): Min: 2.5, Avg: 2.8, Max: 3.0, Diff: 0.4, Sum: 22.0]\n      [Termination (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]\n         [Termination Attempts: Min: 1, Avg: 1.0, Max: 1, Diff: 0, Sum: 8]\n      [GC Worker Other (ms): Min: 0.0, Avg: 0.1, Max: 0.3, Diff: 0.2, Sum: 1.0]\n      [GC Worker Total (ms): Min: 8.6, Avg: 8.9, Max: 9.2, Diff: 0.6, Sum: 71.2]\n      [GC Worker End (ms): Min: 45124791.9, Avg: 45124792.0, Max: 45124792.1, Diff: 0.2]\n   [Code Root Fixup: 0.3 ms]\n   [Code Root Purge: 0.0 ms]\n   [Clear CT: 0.8 ms]\n   [Other: 9.0 ms]\n      [Choose CSet: 0.0 ms]\n      [Ref Proc: 6.2 ms]\n      [Ref Enq: 0.4 ms]\n      [Redirty Cards: 0.3 ms]\n      [Humongous Register: 0.1 ms]\n      [Humongous Reclaim: 0.1 ms]\n      [Free CSet: 1.0 ms]\n   [Eden: 664.0M(664.0M)->0.0B(678.0M) Survivors: 27.0M->13.0M Heap: 1008.6M(1536.0M)->326.5M(1536.0M)]\n [Times: user=0.09 sys=0.00, real=0.02 secs]\n \n 2019-04-08T22:58:48.854+0800: 45155.043: [GC pause (G1 Evacuation Pause) (young) 45155.043: [G1Ergonomics (CSet Construction) start choosing CSet, _pending_cards: 12417, predicted base time: 23.87 ms, remaining time: 26.13 ms, target pause time: 50.00 ms]\n 45155.043: [G1Ergonomics (CSet Construction) add young regions to CSet, eden: 678 regions, survivors: 13 regions, predicted young region time: 9.44 ms]\n 45155.043: [G1Ergonomics (CSet Construction) finish choosing CSet, eden: 678 regions, survivors: 13 regions, old: 0 regions, predicted pause time: 33.31 ms, target pause time: 50.00 ms]\n, 0.0211469 secs]\n   [Parallel Time: 12.1 ms, GC Workers: 8]\n      [GC Worker Start (ms): Min: 45155043.0, Avg: 45155043.2, Max: 45155043.3, Diff: 0.3]\n      [Ext Root Scanning (ms): Min: 2.1, Avg: 2.5, Max: 3.8, Diff: 1.7, Sum: 20.0]\n      [Update RS (ms): Min: 1.1, Avg: 2.1, Max: 2.4, Diff: 1.4, Sum: 16.7]\n         [Processed Buffers: Min: 9, Avg: 14.8, Max: 27, Diff: 18, Sum: 118]\n      [Scan RS (ms): Min: 0.0, Avg: 0.2, Max: 0.2, Diff: 0.2, Sum: 1.3]\n      [Code Root Scanning (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.1]\n      [Object Copy (ms): Min: 6.7, Avg: 6.8, Max: 6.9, Diff: 0.2, Sum: 54.8]\n      [Termination (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]\n         [Termination Attempts: Min: 1, Avg: 1.0, Max: 1, Diff: 0, Sum: 8]\n      [GC Worker Other (ms): Min: 0.0, Avg: 0.1, Max: 0.2, Diff: 0.1, Sum: 0.6]\n      [GC Worker Total (ms): Min: 11.5, Avg: 11.7, Max: 11.9, Diff: 0.4, Sum: 93.5]\n      [GC Worker End (ms): Min: 45155054.8, Avg: 45155054.8, Max: 45155054.9, Diff: 0.1]\n   [Code Root Fixup: 0.2 ms]\n   [Code Root Purge: 0.0 ms]\n   [Clear CT: 0.6 ms]\n   [Other: 8.3 ms]\n      [Choose CSet: 0.0 ms]\n      [Ref Proc: 5.7 ms]\n      [Ref Enq: 0.6 ms]\n      [Redirty Cards: 0.4 ms]\n      [Humongous Register: 0.1 ms]\n      [Humongous Reclaim: 0.2 ms]\n      [Free CSet: 0.7 ms]\n   [Eden: 678.0M(678.0M)->0.0B(660.0M) Survivors: 13.0M->31.0M Heap: 1260.8M(1536.0M)->527.7M(1536.0M)]\n [Times: user=0.11 sys=0.00, real=0.03 secs]\n \n 45189.907: [G1Ergonomics (Concurrent Cycles) request concurrent cycle initiation, reason: occupancy higher than threshold, occupancy: 713031680 bytes, allocation request: 36578320 bytes, threshold: 724775715 bytes (45.00 %), source: concurrent humongous allocation]\n 45189.909: [G1Ergonomics (Concurrent Cycles) request concurrent cycle initiation, reason: requested by GC cause, GC cause: G1 Humongous Allocation]\n 45189.909: [G1Ergonomics (Concurrent Cycles) initiate concurrent cycle, reason: concurrent cycle initiation requested]\n2019-04-08T22:59:23.721+0800: 45189.910: [GC pause (G1 Humongous Allocation) (young) (initial-mark) 45189.910: [G1Ergonomics (CSet Construction) start choosing CSet, _pending_cards: 17533, predicted base time: 22.62 ms, remaining time: 27.38 ms, target pause time: 50.00 ms]\n 45189.910: [G1Ergonomics (CSet Construction) add young regions to CSet, eden: 625 regions, survivors: 31 regions, predicted young region time: 7.83 ms]\n 45189.910: [G1Ergonomics (CSet Construction) finish choosing CSet, eden: 625 regions, survivors: 31 regions, old: 0 regions, predicted pause time: 30.45 ms, target pause time: 50.00 ms]\n, 0.0292182 secs]\n   [Parallel Time: 17.3 ms, GC Workers: 8]\n      [GC Worker Start (ms): Min: 45189910.8, Avg: 45189911.1, Max: 45189911.4, Diff: 0.6]\n      [Ext Root Scanning (ms): Min: 4.0, Avg: 4.2, Max: 4.7, Diff: 0.8, Sum: 33.8]\n      [Update RS (ms): Min: 3.6, Avg: 3.6, Max: 3.8, Diff: 0.2, Sum: 29.2]\n         [Processed Buffers: Min: 9, Avg: 18.8, Max: 26, Diff: 17, Sum: 150]\n      [Scan RS (ms): Min: 0.0, Avg: 0.2, Max: 0.2, Diff: 0.2, Sum: 1.4]\n      [Code Root Scanning (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.1]\n      [Object Copy (ms): Min: 7.7, Avg: 7.9, Max: 8.1, Diff: 0.4, Sum: 63.3]\n      [Termination (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]\n         [Termination Attempts: Min: 1, Avg: 1.0, Max: 1, Diff: 0, Sum: 8]\n      [GC Worker Other (ms): Min: 0.0, Avg: 0.1, Max: 0.2, Diff: 0.2, Sum: 1.0]\n      [GC Worker Total (ms): Min: 15.7, Avg: 16.1, Max: 16.3, Diff: 0.6, Sum: 128.8]\n      [GC Worker End (ms): Min: 45189927.2, Avg: 45189927.2, Max: 45189927.4, Diff: 0.2]\n   [Code Root Fixup: 0.4 ms]\n   [Code Root Purge: 0.0 ms]\n   [Clear CT: 0.7 ms]\n   [Other: 10.9 ms]\n      [Choose CSet: 0.1 ms]\n      [Ref Proc: 7.0 ms]\n      [Ref Enq: 0.5 ms]\n      [Redirty Cards: 0.5 ms]\n      [Humongous Register: 0.1 ms]\n      [Humongous Reclaim: 0.5 ms]\n      [Free CSet: 0.9 ms]\n   [Eden: 625.0M(660.0M)->0.0B(660.0M) Survivors: 31.0M->31.0M Heap: 1319.5M(1536.0M)->458.2M(1536.0M)]\n [Times: user=0.14 sys=0.01, real=0.03 secs]\n \n 2019-04-08T22:59:23.751+0800: 45189.939: [GC concurrent-root-region-scan-start]\n2019-04-08T22:59:23.765+0800: 45189.953: [GC concurrent-root-region-scan-end, 0.0135482 secs]\n2019-04-08T22:59:23.765+0800: 45189.953: [GC concurrent-mark-start]\n2019-04-08T22:59:24.042+0800: 45190.231: [GC concurrent-mark-end, 0.2778332 secs]\n2019-04-08T22:59:24.045+0800: 45190.233: [GC remark 2019-04-08T22:59:24.045+0800: 45190.233: [Finalize Marking, 0.0013681 secs] 2019-04-08T22:59:24.046+0800: 45190.234: [GC ref-proc, 0.0093594 secs] 2019-04-08T22:59:24.056+0800: 45190.244: [Unloading, 0.0237148 secs], 0.0366644 secs]\n [Times: user=0.21 sys=0.01, real=0.04 secs]\n2019-04-08T22:59:24.083+0800: 45190.271: [GC cleanup 506M->506M(1536M), 0.0063516 secs]\n [Times: user=0.01 sys=0.00, real=0.00 secs]\n 45199.221: [G1Ergonomics (Concurrent Cycles) do not request concurrent cycle initiation, reason: still doing mixed collections, occupancy: 708837376 bytes, allocation request: 23411104 bytes, threshold: 724775715 bytes (45.00 %), source: concurrent humongous allocation]\n 45199.822: [G1Ergonomics (Concurrent Cycles) do not request concurrent cycle initiation, reason: still doing mixed collections, occupancy: 732954624 bytes, allocation request: 524304 bytes, threshold: 724775715 bytes (45.00 %), source: concurrent humongous allocation]\n 45199.823: [G1Ergonomics (Concurrent Cycles) do not request concurrent cycle initiation, reason: still doing mixed collections, occupancy: 734003200 bytes, allocation request: 1048592 bytes, threshold: 724775715 bytes (45.00 %), source: concurrent humongous allocation]\n 45199.824: [G1Ergonomics (Concurrent Cycles) do not request concurrent cycle initiation, reason: still doing mixed collections, occupancy: 736100352 bytes, allocation request: 680584 bytes, threshold: 724775715 bytes (45.00 %), source: concurrent humongous allocation]\n 45207.963: [G1Ergonomics (Concurrent Cycles) do not request concurrent cycle initiation, reason: still doing mixed collections, occupancy: 737148928 bytes, allocation request: 47775760 bytes, threshold: 724775715 bytes (45.00 %), source: concurrent humongous allocation]\n 45208.497: [G1Ergonomics (Concurrent Cycles) do not request concurrent cycle initiation, reason: still doing mixed collections, occupancy: 785383424 bytes, allocation request: 23411104 bytes, threshold: 724775715 bytes (45.00 %), source: concurrent humongous allocation]\n 45209.189: [G1Ergonomics (Concurrent Cycles) do not request concurrent cycle initiation, reason: still doing mixed collections, occupancy: 809500672 bytes, allocation request: 524304 bytes, threshold: 724775715 bytes (45.00 %), source: concurrent humongous allocation]\n 45223.797: [G1Ergonomics (Concurrent Cycles) do not request concurrent cycle initiation, reason: still doing mixed collections, occupancy: 810549248 bytes, allocation request: 36578320 bytes, threshold: 724775715 bytes (45.00 %), source: concurrent humongous allocation]\n 45224.628: [G1Ergonomics (Concurrent Cycles) do not request concurrent cycle initiation, reason: still doing mixed collections, occupancy: 847249408 bytes, allocation request: 17922544 bytes, threshold: 724775715 bytes (45.00 %), source: concurrent humongous allocation]\n2019-04-08T22:59:58.442+0800: 45224.630: [GC pause (G1 Humongous Allocation) (young) 45224.630: [G1Ergonomics (CSet Construction) start choosing CSet, _pending_cards: 18363, predicted base time: 22.47 ms, remaining time: 27.53 ms, target pause time: 50.00 ms]\n 45224.630: [G1Ergonomics (CSet Construction) add young regions to CSet, eden: 660 regions, survivors: 31 regions, predicted young region time: 7.16 ms]\n 45224.630: [G1Ergonomics (CSet Construction) finish choosing CSet, eden: 660 regions, survivors: 31 regions, old: 0 regions, predicted pause time: 29.63 ms, target pause time: 50.00 ms]\n 45224.660: [G1Ergonomics (Mixed GCs) start mixed GCs, reason: candidate old regions available, candidate old regions: 187 regions, reclaimable: 102606088 bytes (6.37 %), threshold: 5.00 %]\n, 0.0300491 secs]\n[Parallel Time: 16.3 ms, GC Workers: 8]\n      [GC Worker Start (ms): Min: 45224630.8, Avg: 45224631.1, Max: 45224631.3, Diff: 0.6]\n      [Ext Root Scanning (ms): Min: 2.6, Avg: 2.9, Max: 4.3, Diff: 1.7, Sum: 23.6]\n      [Update RS (ms): Min: 3.0, Avg: 3.9, Max: 4.2, Diff: 1.1, Sum: 30.8]\n         [Processed Buffers: Min: 11, Avg: 18.0, Max: 26, Diff: 15, Sum: 144]\n      [Scan RS (ms): Min: 0.0, Avg: 0.2, Max: 0.3, Diff: 0.2, Sum: 1.6]\n      [Code Root Scanning (ms): Min: 0.0, Avg: 0.0, Max: 0.1, Diff: 0.0, Sum: 0.2]\n      [Object Copy (ms): Min: 8.2, Avg: 8.4, Max: 8.6, Diff: 0.4, Sum: 67.5]\n      [Termination (ms): Min: 0.0, Avg: 0.1, Max: 0.1, Diff: 0.1, Sum: 0.7]\n         [Termination Attempts: Min: 1, Avg: 1.0, Max: 1, Diff: 0, Sum: 8]\n      [GC Worker Other (ms): Min: 0.0, Avg: 0.0, Max: 0.1, Diff: 0.0, Sum: 0.4]\n      [GC Worker Total (ms): Min: 15.3, Avg: 15.6, Max: 15.9, Diff: 0.6, Sum: 124.6]\n      [GC Worker End (ms): Min: 45224646.7, Avg: 45224646.7, Max: 45224646.7, Diff: 0.1]\n   [Code Root Fixup: 0.3 ms]\n   [Code Root Purge: 0.0 ms]\n   [Clear CT: 0.7 ms]\n   [Other: 12.8 ms]\n      [Choose CSet: 0.0 ms]\n      [Ref Proc: 7.7 ms]\n      [Ref Enq: 0.6 ms]\n      [Redirty Cards: 1.0 ms]\n      [Humongous Register: 0.2 ms]\n      [Humongous Reclaim: 0.6 ms]\n      [Free CSet: 1.7 ms]\n   [Eden: 660.0M(660.0M)->0.0B(45.0M) Survivors: 31.0M->31.0M Heap: 1479.4M(1536.0M)->630.5M(1536.0M)]\n [Times: user=0.15 sys=0.01, real=0.03 secs]\n \n 2019-04-08T22:59:59.121+0800: 45225.309: [GC pause (G1 Evacuation Pause) (mixed) 45225.309: [G1Ergonomics (CSet Construction) start choosing CSet, _pending_cards: 2204, predicted base time: 18.27 ms, remaining time: 31.73 ms, target pause time: 50.00 ms]\n 45225.309: [G1Ergonomics (CSet Construction) add young regions to CSet, eden: 45 regions, survivors: 31 regions, predicted young region time: 0.76 ms]\n 45225.309: [G1Ergonomics (CSet Construction) finish adding old regions to CSet, reason: reclaimable percentage not over threshold, old: 24 regions, max: 154 regions, reclaimable: 80229208 bytes (4.98 %), threshold: 5.00 %]\n 45225.309: [G1Ergonomics (CSet Construction) finish choosing CSet, eden: 45 regions, survivors: 31 regions, old: 24 regions, predicted pause time: 22.66 ms, target pause time: 50.00 ms]\n 45225.348: [G1Ergonomics (Mixed GCs) do not continue mixed GCs, reason: reclaimable percentage not over threshold, candidate old regions: 163 regions, reclaimable: 80229208 bytes (4.98 %), threshold: 5.00 %]\n, 0.0391519 secs]\n   [Parallel Time: 25.0 ms, GC Workers: 8]\n      [GC Worker Start (ms): Min: 45225309.4, Avg: 45225309.6, Max: 45225309.7, Diff: 0.3]\n      [Ext Root Scanning (ms): Min: 3.9, Avg: 4.4, Max: 5.2, Diff: 1.2, Sum: 35.3]\n      [Update RS (ms): Min: 0.0, Avg: 0.6, Max: 0.9, Diff: 0.9, Sum: 4.8]\n         [Processed Buffers: Min: 0, Avg: 5.4, Max: 19, Diff: 19, Sum: 43]\n      [Scan RS (ms): Min: 0.6, Avg: 0.9, Max: 1.0, Diff: 0.4, Sum: 7.1]\n      [Code Root Scanning (ms): Min: 0.0, Avg: 0.0, Max: 0.1, Diff: 0.1, Sum: 0.3]\n      [Object Copy (ms): Min: 18.4, Avg: 18.5, Max: 18.8, Diff: 0.5, Sum: 148.4]\n      [Termination (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.1]\n         [Termination Attempts: Min: 1, Avg: 1.6, Max: 3, Diff: 2, Sum: 13]\n      [GC Worker Other (ms): Min: 0.0, Avg: 0.0, Max: 0.1, Diff: 0.0, Sum: 0.3]\n      [GC Worker Total (ms): Min: 24.4, Avg: 24.5, Max: 24.7, Diff: 0.3, Sum: 196.2]\n      [GC Worker End (ms): Min: 45225334.1, Avg: 45225334.1, Max: 45225334.1, Diff: 0.0]\n   [Code Root Fixup: 0.3 ms]\n   [Code Root Purge: 0.0 ms]\n   [Clear CT: 0.9 ms]\n   [Other: 13.0 ms]\n      [Choose CSet: 0.1 ms]\n      [Ref Proc: 9.8 ms]\n      [Ref Enq: 0.6 ms]\n      [Redirty Cards: 0.7 ms]\n      [Humongous Register: 0.1 ms]\n      [Humongous Reclaim: 0.7 ms]\n      [Free CSet: 0.3 ms]\n   [Eden: 45.0M(45.0M)->0.0B(685.0M) Survivors: 31.0M->6144.0K Heap: 732.5M(1536.0M)->342.3M(1536.0M)]\n [Times: user=0.17 sys=0.01, real=0.04 secs]\n```","source":"_posts/G1垃圾回收器-xx-initiatingheapoccupancypercent变量之问.md","raw":"title: 'G1- --xx:initiatingheapoccupancypercent变量之问'\nauthor: Xiang Chuang\ncategories:\n  - 爱学爱问\ntags:\n  - GC-G1\n  - JVM\n  - GC\ndate: 2019-04-09 22:24:00\n---\n问题：该变量究竟何意？\n官方解释\n![upload successful](\\images\\pasted-0.png)\n\n疑问：整堆占用率，到底是老年代区域占用整堆比率还是所有区域占用整堆比率？\n个人认为应该是老年代占用区域\n原因：\n1、新生代默认比例为5-60%， 新生代的回收是使用殆尽时，那么，本文讨论的这个变量默认时45%，这两个是用一点冲突的\n2、工作内存调优时发现gc日志，报出占用率超过45%时，此时更像是老年代超过45%\n3、工作内存调优过程：\nmpay堆大小 1500多兆，堆内存使用率预警值90%  \na、最初时候出现预警时 堆内存占用率时 1500*60% + ？ = 1500M左右 即，差不多用光了； 时常预警\nb、后来调成 1500*25% + ？=1000M左右； 没有再预警\nc、再后来调成 1500*45% + ？ = 1350M左右 很少出现\n【？】处是老年代的占比，  如果用45%来计算，才能符合我们的现象。\n\na、 最初时候出现预警时 堆内存占用率时 1500*60% + 1500*45% ；\nb、后来调成 1500*25% + 1500*45%=975M ；\nc、再后来调成 1500*45% + 1500*45% = 1350M\n\n附：GC日志记录\n```\n2019-04-08T22:58:18.594+0800: 45124.782: [GC pause (G1 Evacuation Pause) (young) 45124.783: [G1Ergonomics (CSet Construction) start choosing CSet, _pending_cards: 13273, predicted base time: 26.68 ms, remaining time: 23.32 ms, target pause time: 50.00 ms]\n 45124.783: [G1Ergonomics (CSet Construction) add young regions to CSet, eden: 664 regions, survivors: 27 regions, predicted young region time: 15.56 ms]\n 45124.783: [G1Ergonomics (CSet Construction) finish choosing CSet, eden: 664 regions, survivors: 27 regions, old: 0 regions, predicted pause time: 42.25 ms, target pause time: 50.00 ms]\n, 0.0195542 secs]\n   [Parallel Time: 9.5 ms, GC Workers: 8]\n      [GC Worker Start (ms): Min: 45124782.9, Avg: 45124783.1, Max: 45124783.3, Diff: 0.4]\n      [Ext Root Scanning (ms): Min: 2.7, Avg: 3.0, Max: 4.5, Diff: 1.8, Sum: 24.3]\n      [Update RS (ms): Min: 1.6, Avg: 2.8, Max: 3.4, Diff: 1.8, Sum: 22.3]\n         [Processed Buffers: Min: 1, Avg: 15.6, Max: 28, Diff: 27, Sum: 125]\n      [Scan RS (ms): Min: 0.0, Avg: 0.2, Max: 0.3, Diff: 0.3, Sum: 1.5]\n      [Code Root Scanning (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.1]\n      [Object Copy (ms): Min: 2.5, Avg: 2.8, Max: 3.0, Diff: 0.4, Sum: 22.0]\n      [Termination (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]\n         [Termination Attempts: Min: 1, Avg: 1.0, Max: 1, Diff: 0, Sum: 8]\n      [GC Worker Other (ms): Min: 0.0, Avg: 0.1, Max: 0.3, Diff: 0.2, Sum: 1.0]\n      [GC Worker Total (ms): Min: 8.6, Avg: 8.9, Max: 9.2, Diff: 0.6, Sum: 71.2]\n      [GC Worker End (ms): Min: 45124791.9, Avg: 45124792.0, Max: 45124792.1, Diff: 0.2]\n   [Code Root Fixup: 0.3 ms]\n   [Code Root Purge: 0.0 ms]\n   [Clear CT: 0.8 ms]\n   [Other: 9.0 ms]\n      [Choose CSet: 0.0 ms]\n      [Ref Proc: 6.2 ms]\n      [Ref Enq: 0.4 ms]\n      [Redirty Cards: 0.3 ms]\n      [Humongous Register: 0.1 ms]\n      [Humongous Reclaim: 0.1 ms]\n      [Free CSet: 1.0 ms]\n   [Eden: 664.0M(664.0M)->0.0B(678.0M) Survivors: 27.0M->13.0M Heap: 1008.6M(1536.0M)->326.5M(1536.0M)]\n [Times: user=0.09 sys=0.00, real=0.02 secs]\n \n 2019-04-08T22:58:48.854+0800: 45155.043: [GC pause (G1 Evacuation Pause) (young) 45155.043: [G1Ergonomics (CSet Construction) start choosing CSet, _pending_cards: 12417, predicted base time: 23.87 ms, remaining time: 26.13 ms, target pause time: 50.00 ms]\n 45155.043: [G1Ergonomics (CSet Construction) add young regions to CSet, eden: 678 regions, survivors: 13 regions, predicted young region time: 9.44 ms]\n 45155.043: [G1Ergonomics (CSet Construction) finish choosing CSet, eden: 678 regions, survivors: 13 regions, old: 0 regions, predicted pause time: 33.31 ms, target pause time: 50.00 ms]\n, 0.0211469 secs]\n   [Parallel Time: 12.1 ms, GC Workers: 8]\n      [GC Worker Start (ms): Min: 45155043.0, Avg: 45155043.2, Max: 45155043.3, Diff: 0.3]\n      [Ext Root Scanning (ms): Min: 2.1, Avg: 2.5, Max: 3.8, Diff: 1.7, Sum: 20.0]\n      [Update RS (ms): Min: 1.1, Avg: 2.1, Max: 2.4, Diff: 1.4, Sum: 16.7]\n         [Processed Buffers: Min: 9, Avg: 14.8, Max: 27, Diff: 18, Sum: 118]\n      [Scan RS (ms): Min: 0.0, Avg: 0.2, Max: 0.2, Diff: 0.2, Sum: 1.3]\n      [Code Root Scanning (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.1]\n      [Object Copy (ms): Min: 6.7, Avg: 6.8, Max: 6.9, Diff: 0.2, Sum: 54.8]\n      [Termination (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]\n         [Termination Attempts: Min: 1, Avg: 1.0, Max: 1, Diff: 0, Sum: 8]\n      [GC Worker Other (ms): Min: 0.0, Avg: 0.1, Max: 0.2, Diff: 0.1, Sum: 0.6]\n      [GC Worker Total (ms): Min: 11.5, Avg: 11.7, Max: 11.9, Diff: 0.4, Sum: 93.5]\n      [GC Worker End (ms): Min: 45155054.8, Avg: 45155054.8, Max: 45155054.9, Diff: 0.1]\n   [Code Root Fixup: 0.2 ms]\n   [Code Root Purge: 0.0 ms]\n   [Clear CT: 0.6 ms]\n   [Other: 8.3 ms]\n      [Choose CSet: 0.0 ms]\n      [Ref Proc: 5.7 ms]\n      [Ref Enq: 0.6 ms]\n      [Redirty Cards: 0.4 ms]\n      [Humongous Register: 0.1 ms]\n      [Humongous Reclaim: 0.2 ms]\n      [Free CSet: 0.7 ms]\n   [Eden: 678.0M(678.0M)->0.0B(660.0M) Survivors: 13.0M->31.0M Heap: 1260.8M(1536.0M)->527.7M(1536.0M)]\n [Times: user=0.11 sys=0.00, real=0.03 secs]\n \n 45189.907: [G1Ergonomics (Concurrent Cycles) request concurrent cycle initiation, reason: occupancy higher than threshold, occupancy: 713031680 bytes, allocation request: 36578320 bytes, threshold: 724775715 bytes (45.00 %), source: concurrent humongous allocation]\n 45189.909: [G1Ergonomics (Concurrent Cycles) request concurrent cycle initiation, reason: requested by GC cause, GC cause: G1 Humongous Allocation]\n 45189.909: [G1Ergonomics (Concurrent Cycles) initiate concurrent cycle, reason: concurrent cycle initiation requested]\n2019-04-08T22:59:23.721+0800: 45189.910: [GC pause (G1 Humongous Allocation) (young) (initial-mark) 45189.910: [G1Ergonomics (CSet Construction) start choosing CSet, _pending_cards: 17533, predicted base time: 22.62 ms, remaining time: 27.38 ms, target pause time: 50.00 ms]\n 45189.910: [G1Ergonomics (CSet Construction) add young regions to CSet, eden: 625 regions, survivors: 31 regions, predicted young region time: 7.83 ms]\n 45189.910: [G1Ergonomics (CSet Construction) finish choosing CSet, eden: 625 regions, survivors: 31 regions, old: 0 regions, predicted pause time: 30.45 ms, target pause time: 50.00 ms]\n, 0.0292182 secs]\n   [Parallel Time: 17.3 ms, GC Workers: 8]\n      [GC Worker Start (ms): Min: 45189910.8, Avg: 45189911.1, Max: 45189911.4, Diff: 0.6]\n      [Ext Root Scanning (ms): Min: 4.0, Avg: 4.2, Max: 4.7, Diff: 0.8, Sum: 33.8]\n      [Update RS (ms): Min: 3.6, Avg: 3.6, Max: 3.8, Diff: 0.2, Sum: 29.2]\n         [Processed Buffers: Min: 9, Avg: 18.8, Max: 26, Diff: 17, Sum: 150]\n      [Scan RS (ms): Min: 0.0, Avg: 0.2, Max: 0.2, Diff: 0.2, Sum: 1.4]\n      [Code Root Scanning (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.1]\n      [Object Copy (ms): Min: 7.7, Avg: 7.9, Max: 8.1, Diff: 0.4, Sum: 63.3]\n      [Termination (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]\n         [Termination Attempts: Min: 1, Avg: 1.0, Max: 1, Diff: 0, Sum: 8]\n      [GC Worker Other (ms): Min: 0.0, Avg: 0.1, Max: 0.2, Diff: 0.2, Sum: 1.0]\n      [GC Worker Total (ms): Min: 15.7, Avg: 16.1, Max: 16.3, Diff: 0.6, Sum: 128.8]\n      [GC Worker End (ms): Min: 45189927.2, Avg: 45189927.2, Max: 45189927.4, Diff: 0.2]\n   [Code Root Fixup: 0.4 ms]\n   [Code Root Purge: 0.0 ms]\n   [Clear CT: 0.7 ms]\n   [Other: 10.9 ms]\n      [Choose CSet: 0.1 ms]\n      [Ref Proc: 7.0 ms]\n      [Ref Enq: 0.5 ms]\n      [Redirty Cards: 0.5 ms]\n      [Humongous Register: 0.1 ms]\n      [Humongous Reclaim: 0.5 ms]\n      [Free CSet: 0.9 ms]\n   [Eden: 625.0M(660.0M)->0.0B(660.0M) Survivors: 31.0M->31.0M Heap: 1319.5M(1536.0M)->458.2M(1536.0M)]\n [Times: user=0.14 sys=0.01, real=0.03 secs]\n \n 2019-04-08T22:59:23.751+0800: 45189.939: [GC concurrent-root-region-scan-start]\n2019-04-08T22:59:23.765+0800: 45189.953: [GC concurrent-root-region-scan-end, 0.0135482 secs]\n2019-04-08T22:59:23.765+0800: 45189.953: [GC concurrent-mark-start]\n2019-04-08T22:59:24.042+0800: 45190.231: [GC concurrent-mark-end, 0.2778332 secs]\n2019-04-08T22:59:24.045+0800: 45190.233: [GC remark 2019-04-08T22:59:24.045+0800: 45190.233: [Finalize Marking, 0.0013681 secs] 2019-04-08T22:59:24.046+0800: 45190.234: [GC ref-proc, 0.0093594 secs] 2019-04-08T22:59:24.056+0800: 45190.244: [Unloading, 0.0237148 secs], 0.0366644 secs]\n [Times: user=0.21 sys=0.01, real=0.04 secs]\n2019-04-08T22:59:24.083+0800: 45190.271: [GC cleanup 506M->506M(1536M), 0.0063516 secs]\n [Times: user=0.01 sys=0.00, real=0.00 secs]\n 45199.221: [G1Ergonomics (Concurrent Cycles) do not request concurrent cycle initiation, reason: still doing mixed collections, occupancy: 708837376 bytes, allocation request: 23411104 bytes, threshold: 724775715 bytes (45.00 %), source: concurrent humongous allocation]\n 45199.822: [G1Ergonomics (Concurrent Cycles) do not request concurrent cycle initiation, reason: still doing mixed collections, occupancy: 732954624 bytes, allocation request: 524304 bytes, threshold: 724775715 bytes (45.00 %), source: concurrent humongous allocation]\n 45199.823: [G1Ergonomics (Concurrent Cycles) do not request concurrent cycle initiation, reason: still doing mixed collections, occupancy: 734003200 bytes, allocation request: 1048592 bytes, threshold: 724775715 bytes (45.00 %), source: concurrent humongous allocation]\n 45199.824: [G1Ergonomics (Concurrent Cycles) do not request concurrent cycle initiation, reason: still doing mixed collections, occupancy: 736100352 bytes, allocation request: 680584 bytes, threshold: 724775715 bytes (45.00 %), source: concurrent humongous allocation]\n 45207.963: [G1Ergonomics (Concurrent Cycles) do not request concurrent cycle initiation, reason: still doing mixed collections, occupancy: 737148928 bytes, allocation request: 47775760 bytes, threshold: 724775715 bytes (45.00 %), source: concurrent humongous allocation]\n 45208.497: [G1Ergonomics (Concurrent Cycles) do not request concurrent cycle initiation, reason: still doing mixed collections, occupancy: 785383424 bytes, allocation request: 23411104 bytes, threshold: 724775715 bytes (45.00 %), source: concurrent humongous allocation]\n 45209.189: [G1Ergonomics (Concurrent Cycles) do not request concurrent cycle initiation, reason: still doing mixed collections, occupancy: 809500672 bytes, allocation request: 524304 bytes, threshold: 724775715 bytes (45.00 %), source: concurrent humongous allocation]\n 45223.797: [G1Ergonomics (Concurrent Cycles) do not request concurrent cycle initiation, reason: still doing mixed collections, occupancy: 810549248 bytes, allocation request: 36578320 bytes, threshold: 724775715 bytes (45.00 %), source: concurrent humongous allocation]\n 45224.628: [G1Ergonomics (Concurrent Cycles) do not request concurrent cycle initiation, reason: still doing mixed collections, occupancy: 847249408 bytes, allocation request: 17922544 bytes, threshold: 724775715 bytes (45.00 %), source: concurrent humongous allocation]\n2019-04-08T22:59:58.442+0800: 45224.630: [GC pause (G1 Humongous Allocation) (young) 45224.630: [G1Ergonomics (CSet Construction) start choosing CSet, _pending_cards: 18363, predicted base time: 22.47 ms, remaining time: 27.53 ms, target pause time: 50.00 ms]\n 45224.630: [G1Ergonomics (CSet Construction) add young regions to CSet, eden: 660 regions, survivors: 31 regions, predicted young region time: 7.16 ms]\n 45224.630: [G1Ergonomics (CSet Construction) finish choosing CSet, eden: 660 regions, survivors: 31 regions, old: 0 regions, predicted pause time: 29.63 ms, target pause time: 50.00 ms]\n 45224.660: [G1Ergonomics (Mixed GCs) start mixed GCs, reason: candidate old regions available, candidate old regions: 187 regions, reclaimable: 102606088 bytes (6.37 %), threshold: 5.00 %]\n, 0.0300491 secs]\n[Parallel Time: 16.3 ms, GC Workers: 8]\n      [GC Worker Start (ms): Min: 45224630.8, Avg: 45224631.1, Max: 45224631.3, Diff: 0.6]\n      [Ext Root Scanning (ms): Min: 2.6, Avg: 2.9, Max: 4.3, Diff: 1.7, Sum: 23.6]\n      [Update RS (ms): Min: 3.0, Avg: 3.9, Max: 4.2, Diff: 1.1, Sum: 30.8]\n         [Processed Buffers: Min: 11, Avg: 18.0, Max: 26, Diff: 15, Sum: 144]\n      [Scan RS (ms): Min: 0.0, Avg: 0.2, Max: 0.3, Diff: 0.2, Sum: 1.6]\n      [Code Root Scanning (ms): Min: 0.0, Avg: 0.0, Max: 0.1, Diff: 0.0, Sum: 0.2]\n      [Object Copy (ms): Min: 8.2, Avg: 8.4, Max: 8.6, Diff: 0.4, Sum: 67.5]\n      [Termination (ms): Min: 0.0, Avg: 0.1, Max: 0.1, Diff: 0.1, Sum: 0.7]\n         [Termination Attempts: Min: 1, Avg: 1.0, Max: 1, Diff: 0, Sum: 8]\n      [GC Worker Other (ms): Min: 0.0, Avg: 0.0, Max: 0.1, Diff: 0.0, Sum: 0.4]\n      [GC Worker Total (ms): Min: 15.3, Avg: 15.6, Max: 15.9, Diff: 0.6, Sum: 124.6]\n      [GC Worker End (ms): Min: 45224646.7, Avg: 45224646.7, Max: 45224646.7, Diff: 0.1]\n   [Code Root Fixup: 0.3 ms]\n   [Code Root Purge: 0.0 ms]\n   [Clear CT: 0.7 ms]\n   [Other: 12.8 ms]\n      [Choose CSet: 0.0 ms]\n      [Ref Proc: 7.7 ms]\n      [Ref Enq: 0.6 ms]\n      [Redirty Cards: 1.0 ms]\n      [Humongous Register: 0.2 ms]\n      [Humongous Reclaim: 0.6 ms]\n      [Free CSet: 1.7 ms]\n   [Eden: 660.0M(660.0M)->0.0B(45.0M) Survivors: 31.0M->31.0M Heap: 1479.4M(1536.0M)->630.5M(1536.0M)]\n [Times: user=0.15 sys=0.01, real=0.03 secs]\n \n 2019-04-08T22:59:59.121+0800: 45225.309: [GC pause (G1 Evacuation Pause) (mixed) 45225.309: [G1Ergonomics (CSet Construction) start choosing CSet, _pending_cards: 2204, predicted base time: 18.27 ms, remaining time: 31.73 ms, target pause time: 50.00 ms]\n 45225.309: [G1Ergonomics (CSet Construction) add young regions to CSet, eden: 45 regions, survivors: 31 regions, predicted young region time: 0.76 ms]\n 45225.309: [G1Ergonomics (CSet Construction) finish adding old regions to CSet, reason: reclaimable percentage not over threshold, old: 24 regions, max: 154 regions, reclaimable: 80229208 bytes (4.98 %), threshold: 5.00 %]\n 45225.309: [G1Ergonomics (CSet Construction) finish choosing CSet, eden: 45 regions, survivors: 31 regions, old: 24 regions, predicted pause time: 22.66 ms, target pause time: 50.00 ms]\n 45225.348: [G1Ergonomics (Mixed GCs) do not continue mixed GCs, reason: reclaimable percentage not over threshold, candidate old regions: 163 regions, reclaimable: 80229208 bytes (4.98 %), threshold: 5.00 %]\n, 0.0391519 secs]\n   [Parallel Time: 25.0 ms, GC Workers: 8]\n      [GC Worker Start (ms): Min: 45225309.4, Avg: 45225309.6, Max: 45225309.7, Diff: 0.3]\n      [Ext Root Scanning (ms): Min: 3.9, Avg: 4.4, Max: 5.2, Diff: 1.2, Sum: 35.3]\n      [Update RS (ms): Min: 0.0, Avg: 0.6, Max: 0.9, Diff: 0.9, Sum: 4.8]\n         [Processed Buffers: Min: 0, Avg: 5.4, Max: 19, Diff: 19, Sum: 43]\n      [Scan RS (ms): Min: 0.6, Avg: 0.9, Max: 1.0, Diff: 0.4, Sum: 7.1]\n      [Code Root Scanning (ms): Min: 0.0, Avg: 0.0, Max: 0.1, Diff: 0.1, Sum: 0.3]\n      [Object Copy (ms): Min: 18.4, Avg: 18.5, Max: 18.8, Diff: 0.5, Sum: 148.4]\n      [Termination (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.1]\n         [Termination Attempts: Min: 1, Avg: 1.6, Max: 3, Diff: 2, Sum: 13]\n      [GC Worker Other (ms): Min: 0.0, Avg: 0.0, Max: 0.1, Diff: 0.0, Sum: 0.3]\n      [GC Worker Total (ms): Min: 24.4, Avg: 24.5, Max: 24.7, Diff: 0.3, Sum: 196.2]\n      [GC Worker End (ms): Min: 45225334.1, Avg: 45225334.1, Max: 45225334.1, Diff: 0.0]\n   [Code Root Fixup: 0.3 ms]\n   [Code Root Purge: 0.0 ms]\n   [Clear CT: 0.9 ms]\n   [Other: 13.0 ms]\n      [Choose CSet: 0.1 ms]\n      [Ref Proc: 9.8 ms]\n      [Ref Enq: 0.6 ms]\n      [Redirty Cards: 0.7 ms]\n      [Humongous Register: 0.1 ms]\n      [Humongous Reclaim: 0.7 ms]\n      [Free CSet: 0.3 ms]\n   [Eden: 45.0M(45.0M)->0.0B(685.0M) Survivors: 31.0M->6144.0K Heap: 732.5M(1536.0M)->342.3M(1536.0M)]\n [Times: user=0.17 sys=0.01, real=0.04 secs]\n```","slug":"G1垃圾回收器-xx-initiatingheapoccupancypercent变量之问","published":1,"updated":"2019-09-30T07:34:10.836Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3e5th7f005wp966sagat8hf","content":"<p>问题：该变量究竟何意？<br>官方解释<br><img src=\"\\images\\pasted-0.png\" alt=\"upload successful\"></p>\n<p>疑问：整堆占用率，到底是老年代区域占用整堆比率还是所有区域占用整堆比率？<br>个人认为应该是老年代占用区域<br>原因：<br>1、新生代默认比例为5-60%， 新生代的回收是使用殆尽时，那么，本文讨论的这个变量默认时45%，这两个是用一点冲突的<br>2、工作内存调优时发现gc日志，报出占用率超过45%时，此时更像是老年代超过45%<br>3、工作内存调优过程：<br>mpay堆大小 1500多兆，堆内存使用率预警值90%<br>a、最初时候出现预警时 堆内存占用率时 1500<em>60% + ？ = 1500M左右 即，差不多用光了； 时常预警<br>b、后来调成 1500</em>25% + ？=1000M左右； 没有再预警<br>c、再后来调成 1500*45% + ？ = 1350M左右 很少出现<br>【？】处是老年代的占比，  如果用45%来计算，才能符合我们的现象。</p>\n<p>a、 最初时候出现预警时 堆内存占用率时 1500<em>60% + 1500</em>45% ；<br>b、后来调成 1500<em>25% + 1500</em>45%=975M ；<br>c、再后来调成 1500<em>45% + 1500</em>45% = 1350M</p>\n<p>附：GC日志记录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2019-04-08T22:58:18.594+0800: 45124.782: [GC pause (G1 Evacuation Pause) (young) 45124.783: [G1Ergonomics (CSet Construction) start choosing CSet, _pending_cards: 13273, predicted base time: 26.68 ms, remaining time: 23.32 ms, target pause time: 50.00 ms]</span><br><span class=\"line\"> 45124.783: [G1Ergonomics (CSet Construction) add young regions to CSet, eden: 664 regions, survivors: 27 regions, predicted young region time: 15.56 ms]</span><br><span class=\"line\"> 45124.783: [G1Ergonomics (CSet Construction) finish choosing CSet, eden: 664 regions, survivors: 27 regions, old: 0 regions, predicted pause time: 42.25 ms, target pause time: 50.00 ms]</span><br><span class=\"line\">, 0.0195542 secs]</span><br><span class=\"line\">   [Parallel Time: 9.5 ms, GC Workers: 8]</span><br><span class=\"line\">      [GC Worker Start (ms): Min: 45124782.9, Avg: 45124783.1, Max: 45124783.3, Diff: 0.4]</span><br><span class=\"line\">      [Ext Root Scanning (ms): Min: 2.7, Avg: 3.0, Max: 4.5, Diff: 1.8, Sum: 24.3]</span><br><span class=\"line\">      [Update RS (ms): Min: 1.6, Avg: 2.8, Max: 3.4, Diff: 1.8, Sum: 22.3]</span><br><span class=\"line\">         [Processed Buffers: Min: 1, Avg: 15.6, Max: 28, Diff: 27, Sum: 125]</span><br><span class=\"line\">      [Scan RS (ms): Min: 0.0, Avg: 0.2, Max: 0.3, Diff: 0.3, Sum: 1.5]</span><br><span class=\"line\">      [Code Root Scanning (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.1]</span><br><span class=\"line\">      [Object Copy (ms): Min: 2.5, Avg: 2.8, Max: 3.0, Diff: 0.4, Sum: 22.0]</span><br><span class=\"line\">      [Termination (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]</span><br><span class=\"line\">         [Termination Attempts: Min: 1, Avg: 1.0, Max: 1, Diff: 0, Sum: 8]</span><br><span class=\"line\">      [GC Worker Other (ms): Min: 0.0, Avg: 0.1, Max: 0.3, Diff: 0.2, Sum: 1.0]</span><br><span class=\"line\">      [GC Worker Total (ms): Min: 8.6, Avg: 8.9, Max: 9.2, Diff: 0.6, Sum: 71.2]</span><br><span class=\"line\">      [GC Worker End (ms): Min: 45124791.9, Avg: 45124792.0, Max: 45124792.1, Diff: 0.2]</span><br><span class=\"line\">   [Code Root Fixup: 0.3 ms]</span><br><span class=\"line\">   [Code Root Purge: 0.0 ms]</span><br><span class=\"line\">   [Clear CT: 0.8 ms]</span><br><span class=\"line\">   [Other: 9.0 ms]</span><br><span class=\"line\">      [Choose CSet: 0.0 ms]</span><br><span class=\"line\">      [Ref Proc: 6.2 ms]</span><br><span class=\"line\">      [Ref Enq: 0.4 ms]</span><br><span class=\"line\">      [Redirty Cards: 0.3 ms]</span><br><span class=\"line\">      [Humongous Register: 0.1 ms]</span><br><span class=\"line\">      [Humongous Reclaim: 0.1 ms]</span><br><span class=\"line\">      [Free CSet: 1.0 ms]</span><br><span class=\"line\">   [Eden: 664.0M(664.0M)-&gt;0.0B(678.0M) Survivors: 27.0M-&gt;13.0M Heap: 1008.6M(1536.0M)-&gt;326.5M(1536.0M)]</span><br><span class=\"line\"> [Times: user=0.09 sys=0.00, real=0.02 secs]</span><br><span class=\"line\"> </span><br><span class=\"line\"> 2019-04-08T22:58:48.854+0800: 45155.043: [GC pause (G1 Evacuation Pause) (young) 45155.043: [G1Ergonomics (CSet Construction) start choosing CSet, _pending_cards: 12417, predicted base time: 23.87 ms, remaining time: 26.13 ms, target pause time: 50.00 ms]</span><br><span class=\"line\"> 45155.043: [G1Ergonomics (CSet Construction) add young regions to CSet, eden: 678 regions, survivors: 13 regions, predicted young region time: 9.44 ms]</span><br><span class=\"line\"> 45155.043: [G1Ergonomics (CSet Construction) finish choosing CSet, eden: 678 regions, survivors: 13 regions, old: 0 regions, predicted pause time: 33.31 ms, target pause time: 50.00 ms]</span><br><span class=\"line\">, 0.0211469 secs]</span><br><span class=\"line\">   [Parallel Time: 12.1 ms, GC Workers: 8]</span><br><span class=\"line\">      [GC Worker Start (ms): Min: 45155043.0, Avg: 45155043.2, Max: 45155043.3, Diff: 0.3]</span><br><span class=\"line\">      [Ext Root Scanning (ms): Min: 2.1, Avg: 2.5, Max: 3.8, Diff: 1.7, Sum: 20.0]</span><br><span class=\"line\">      [Update RS (ms): Min: 1.1, Avg: 2.1, Max: 2.4, Diff: 1.4, Sum: 16.7]</span><br><span class=\"line\">         [Processed Buffers: Min: 9, Avg: 14.8, Max: 27, Diff: 18, Sum: 118]</span><br><span class=\"line\">      [Scan RS (ms): Min: 0.0, Avg: 0.2, Max: 0.2, Diff: 0.2, Sum: 1.3]</span><br><span class=\"line\">      [Code Root Scanning (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.1]</span><br><span class=\"line\">      [Object Copy (ms): Min: 6.7, Avg: 6.8, Max: 6.9, Diff: 0.2, Sum: 54.8]</span><br><span class=\"line\">      [Termination (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]</span><br><span class=\"line\">         [Termination Attempts: Min: 1, Avg: 1.0, Max: 1, Diff: 0, Sum: 8]</span><br><span class=\"line\">      [GC Worker Other (ms): Min: 0.0, Avg: 0.1, Max: 0.2, Diff: 0.1, Sum: 0.6]</span><br><span class=\"line\">      [GC Worker Total (ms): Min: 11.5, Avg: 11.7, Max: 11.9, Diff: 0.4, Sum: 93.5]</span><br><span class=\"line\">      [GC Worker End (ms): Min: 45155054.8, Avg: 45155054.8, Max: 45155054.9, Diff: 0.1]</span><br><span class=\"line\">   [Code Root Fixup: 0.2 ms]</span><br><span class=\"line\">   [Code Root Purge: 0.0 ms]</span><br><span class=\"line\">   [Clear CT: 0.6 ms]</span><br><span class=\"line\">   [Other: 8.3 ms]</span><br><span class=\"line\">      [Choose CSet: 0.0 ms]</span><br><span class=\"line\">      [Ref Proc: 5.7 ms]</span><br><span class=\"line\">      [Ref Enq: 0.6 ms]</span><br><span class=\"line\">      [Redirty Cards: 0.4 ms]</span><br><span class=\"line\">      [Humongous Register: 0.1 ms]</span><br><span class=\"line\">      [Humongous Reclaim: 0.2 ms]</span><br><span class=\"line\">      [Free CSet: 0.7 ms]</span><br><span class=\"line\">   [Eden: 678.0M(678.0M)-&gt;0.0B(660.0M) Survivors: 13.0M-&gt;31.0M Heap: 1260.8M(1536.0M)-&gt;527.7M(1536.0M)]</span><br><span class=\"line\"> [Times: user=0.11 sys=0.00, real=0.03 secs]</span><br><span class=\"line\"> </span><br><span class=\"line\"> 45189.907: [G1Ergonomics (Concurrent Cycles) request concurrent cycle initiation, reason: occupancy higher than threshold, occupancy: 713031680 bytes, allocation request: 36578320 bytes, threshold: 724775715 bytes (45.00 %), source: concurrent humongous allocation]</span><br><span class=\"line\"> 45189.909: [G1Ergonomics (Concurrent Cycles) request concurrent cycle initiation, reason: requested by GC cause, GC cause: G1 Humongous Allocation]</span><br><span class=\"line\"> 45189.909: [G1Ergonomics (Concurrent Cycles) initiate concurrent cycle, reason: concurrent cycle initiation requested]</span><br><span class=\"line\">2019-04-08T22:59:23.721+0800: 45189.910: [GC pause (G1 Humongous Allocation) (young) (initial-mark) 45189.910: [G1Ergonomics (CSet Construction) start choosing CSet, _pending_cards: 17533, predicted base time: 22.62 ms, remaining time: 27.38 ms, target pause time: 50.00 ms]</span><br><span class=\"line\"> 45189.910: [G1Ergonomics (CSet Construction) add young regions to CSet, eden: 625 regions, survivors: 31 regions, predicted young region time: 7.83 ms]</span><br><span class=\"line\"> 45189.910: [G1Ergonomics (CSet Construction) finish choosing CSet, eden: 625 regions, survivors: 31 regions, old: 0 regions, predicted pause time: 30.45 ms, target pause time: 50.00 ms]</span><br><span class=\"line\">, 0.0292182 secs]</span><br><span class=\"line\">   [Parallel Time: 17.3 ms, GC Workers: 8]</span><br><span class=\"line\">      [GC Worker Start (ms): Min: 45189910.8, Avg: 45189911.1, Max: 45189911.4, Diff: 0.6]</span><br><span class=\"line\">      [Ext Root Scanning (ms): Min: 4.0, Avg: 4.2, Max: 4.7, Diff: 0.8, Sum: 33.8]</span><br><span class=\"line\">      [Update RS (ms): Min: 3.6, Avg: 3.6, Max: 3.8, Diff: 0.2, Sum: 29.2]</span><br><span class=\"line\">         [Processed Buffers: Min: 9, Avg: 18.8, Max: 26, Diff: 17, Sum: 150]</span><br><span class=\"line\">      [Scan RS (ms): Min: 0.0, Avg: 0.2, Max: 0.2, Diff: 0.2, Sum: 1.4]</span><br><span class=\"line\">      [Code Root Scanning (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.1]</span><br><span class=\"line\">      [Object Copy (ms): Min: 7.7, Avg: 7.9, Max: 8.1, Diff: 0.4, Sum: 63.3]</span><br><span class=\"line\">      [Termination (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]</span><br><span class=\"line\">         [Termination Attempts: Min: 1, Avg: 1.0, Max: 1, Diff: 0, Sum: 8]</span><br><span class=\"line\">      [GC Worker Other (ms): Min: 0.0, Avg: 0.1, Max: 0.2, Diff: 0.2, Sum: 1.0]</span><br><span class=\"line\">      [GC Worker Total (ms): Min: 15.7, Avg: 16.1, Max: 16.3, Diff: 0.6, Sum: 128.8]</span><br><span class=\"line\">      [GC Worker End (ms): Min: 45189927.2, Avg: 45189927.2, Max: 45189927.4, Diff: 0.2]</span><br><span class=\"line\">   [Code Root Fixup: 0.4 ms]</span><br><span class=\"line\">   [Code Root Purge: 0.0 ms]</span><br><span class=\"line\">   [Clear CT: 0.7 ms]</span><br><span class=\"line\">   [Other: 10.9 ms]</span><br><span class=\"line\">      [Choose CSet: 0.1 ms]</span><br><span class=\"line\">      [Ref Proc: 7.0 ms]</span><br><span class=\"line\">      [Ref Enq: 0.5 ms]</span><br><span class=\"line\">      [Redirty Cards: 0.5 ms]</span><br><span class=\"line\">      [Humongous Register: 0.1 ms]</span><br><span class=\"line\">      [Humongous Reclaim: 0.5 ms]</span><br><span class=\"line\">      [Free CSet: 0.9 ms]</span><br><span class=\"line\">   [Eden: 625.0M(660.0M)-&gt;0.0B(660.0M) Survivors: 31.0M-&gt;31.0M Heap: 1319.5M(1536.0M)-&gt;458.2M(1536.0M)]</span><br><span class=\"line\"> [Times: user=0.14 sys=0.01, real=0.03 secs]</span><br><span class=\"line\"> </span><br><span class=\"line\"> 2019-04-08T22:59:23.751+0800: 45189.939: [GC concurrent-root-region-scan-start]</span><br><span class=\"line\">2019-04-08T22:59:23.765+0800: 45189.953: [GC concurrent-root-region-scan-end, 0.0135482 secs]</span><br><span class=\"line\">2019-04-08T22:59:23.765+0800: 45189.953: [GC concurrent-mark-start]</span><br><span class=\"line\">2019-04-08T22:59:24.042+0800: 45190.231: [GC concurrent-mark-end, 0.2778332 secs]</span><br><span class=\"line\">2019-04-08T22:59:24.045+0800: 45190.233: [GC remark 2019-04-08T22:59:24.045+0800: 45190.233: [Finalize Marking, 0.0013681 secs] 2019-04-08T22:59:24.046+0800: 45190.234: [GC ref-proc, 0.0093594 secs] 2019-04-08T22:59:24.056+0800: 45190.244: [Unloading, 0.0237148 secs], 0.0366644 secs]</span><br><span class=\"line\"> [Times: user=0.21 sys=0.01, real=0.04 secs]</span><br><span class=\"line\">2019-04-08T22:59:24.083+0800: 45190.271: [GC cleanup 506M-&gt;506M(1536M), 0.0063516 secs]</span><br><span class=\"line\"> [Times: user=0.01 sys=0.00, real=0.00 secs]</span><br><span class=\"line\"> 45199.221: [G1Ergonomics (Concurrent Cycles) do not request concurrent cycle initiation, reason: still doing mixed collections, occupancy: 708837376 bytes, allocation request: 23411104 bytes, threshold: 724775715 bytes (45.00 %), source: concurrent humongous allocation]</span><br><span class=\"line\"> 45199.822: [G1Ergonomics (Concurrent Cycles) do not request concurrent cycle initiation, reason: still doing mixed collections, occupancy: 732954624 bytes, allocation request: 524304 bytes, threshold: 724775715 bytes (45.00 %), source: concurrent humongous allocation]</span><br><span class=\"line\"> 45199.823: [G1Ergonomics (Concurrent Cycles) do not request concurrent cycle initiation, reason: still doing mixed collections, occupancy: 734003200 bytes, allocation request: 1048592 bytes, threshold: 724775715 bytes (45.00 %), source: concurrent humongous allocation]</span><br><span class=\"line\"> 45199.824: [G1Ergonomics (Concurrent Cycles) do not request concurrent cycle initiation, reason: still doing mixed collections, occupancy: 736100352 bytes, allocation request: 680584 bytes, threshold: 724775715 bytes (45.00 %), source: concurrent humongous allocation]</span><br><span class=\"line\"> 45207.963: [G1Ergonomics (Concurrent Cycles) do not request concurrent cycle initiation, reason: still doing mixed collections, occupancy: 737148928 bytes, allocation request: 47775760 bytes, threshold: 724775715 bytes (45.00 %), source: concurrent humongous allocation]</span><br><span class=\"line\"> 45208.497: [G1Ergonomics (Concurrent Cycles) do not request concurrent cycle initiation, reason: still doing mixed collections, occupancy: 785383424 bytes, allocation request: 23411104 bytes, threshold: 724775715 bytes (45.00 %), source: concurrent humongous allocation]</span><br><span class=\"line\"> 45209.189: [G1Ergonomics (Concurrent Cycles) do not request concurrent cycle initiation, reason: still doing mixed collections, occupancy: 809500672 bytes, allocation request: 524304 bytes, threshold: 724775715 bytes (45.00 %), source: concurrent humongous allocation]</span><br><span class=\"line\"> 45223.797: [G1Ergonomics (Concurrent Cycles) do not request concurrent cycle initiation, reason: still doing mixed collections, occupancy: 810549248 bytes, allocation request: 36578320 bytes, threshold: 724775715 bytes (45.00 %), source: concurrent humongous allocation]</span><br><span class=\"line\"> 45224.628: [G1Ergonomics (Concurrent Cycles) do not request concurrent cycle initiation, reason: still doing mixed collections, occupancy: 847249408 bytes, allocation request: 17922544 bytes, threshold: 724775715 bytes (45.00 %), source: concurrent humongous allocation]</span><br><span class=\"line\">2019-04-08T22:59:58.442+0800: 45224.630: [GC pause (G1 Humongous Allocation) (young) 45224.630: [G1Ergonomics (CSet Construction) start choosing CSet, _pending_cards: 18363, predicted base time: 22.47 ms, remaining time: 27.53 ms, target pause time: 50.00 ms]</span><br><span class=\"line\"> 45224.630: [G1Ergonomics (CSet Construction) add young regions to CSet, eden: 660 regions, survivors: 31 regions, predicted young region time: 7.16 ms]</span><br><span class=\"line\"> 45224.630: [G1Ergonomics (CSet Construction) finish choosing CSet, eden: 660 regions, survivors: 31 regions, old: 0 regions, predicted pause time: 29.63 ms, target pause time: 50.00 ms]</span><br><span class=\"line\"> 45224.660: [G1Ergonomics (Mixed GCs) start mixed GCs, reason: candidate old regions available, candidate old regions: 187 regions, reclaimable: 102606088 bytes (6.37 %), threshold: 5.00 %]</span><br><span class=\"line\">, 0.0300491 secs]</span><br><span class=\"line\">[Parallel Time: 16.3 ms, GC Workers: 8]</span><br><span class=\"line\">      [GC Worker Start (ms): Min: 45224630.8, Avg: 45224631.1, Max: 45224631.3, Diff: 0.6]</span><br><span class=\"line\">      [Ext Root Scanning (ms): Min: 2.6, Avg: 2.9, Max: 4.3, Diff: 1.7, Sum: 23.6]</span><br><span class=\"line\">      [Update RS (ms): Min: 3.0, Avg: 3.9, Max: 4.2, Diff: 1.1, Sum: 30.8]</span><br><span class=\"line\">         [Processed Buffers: Min: 11, Avg: 18.0, Max: 26, Diff: 15, Sum: 144]</span><br><span class=\"line\">      [Scan RS (ms): Min: 0.0, Avg: 0.2, Max: 0.3, Diff: 0.2, Sum: 1.6]</span><br><span class=\"line\">      [Code Root Scanning (ms): Min: 0.0, Avg: 0.0, Max: 0.1, Diff: 0.0, Sum: 0.2]</span><br><span class=\"line\">      [Object Copy (ms): Min: 8.2, Avg: 8.4, Max: 8.6, Diff: 0.4, Sum: 67.5]</span><br><span class=\"line\">      [Termination (ms): Min: 0.0, Avg: 0.1, Max: 0.1, Diff: 0.1, Sum: 0.7]</span><br><span class=\"line\">         [Termination Attempts: Min: 1, Avg: 1.0, Max: 1, Diff: 0, Sum: 8]</span><br><span class=\"line\">      [GC Worker Other (ms): Min: 0.0, Avg: 0.0, Max: 0.1, Diff: 0.0, Sum: 0.4]</span><br><span class=\"line\">      [GC Worker Total (ms): Min: 15.3, Avg: 15.6, Max: 15.9, Diff: 0.6, Sum: 124.6]</span><br><span class=\"line\">      [GC Worker End (ms): Min: 45224646.7, Avg: 45224646.7, Max: 45224646.7, Diff: 0.1]</span><br><span class=\"line\">   [Code Root Fixup: 0.3 ms]</span><br><span class=\"line\">   [Code Root Purge: 0.0 ms]</span><br><span class=\"line\">   [Clear CT: 0.7 ms]</span><br><span class=\"line\">   [Other: 12.8 ms]</span><br><span class=\"line\">      [Choose CSet: 0.0 ms]</span><br><span class=\"line\">      [Ref Proc: 7.7 ms]</span><br><span class=\"line\">      [Ref Enq: 0.6 ms]</span><br><span class=\"line\">      [Redirty Cards: 1.0 ms]</span><br><span class=\"line\">      [Humongous Register: 0.2 ms]</span><br><span class=\"line\">      [Humongous Reclaim: 0.6 ms]</span><br><span class=\"line\">      [Free CSet: 1.7 ms]</span><br><span class=\"line\">   [Eden: 660.0M(660.0M)-&gt;0.0B(45.0M) Survivors: 31.0M-&gt;31.0M Heap: 1479.4M(1536.0M)-&gt;630.5M(1536.0M)]</span><br><span class=\"line\"> [Times: user=0.15 sys=0.01, real=0.03 secs]</span><br><span class=\"line\"> </span><br><span class=\"line\"> 2019-04-08T22:59:59.121+0800: 45225.309: [GC pause (G1 Evacuation Pause) (mixed) 45225.309: [G1Ergonomics (CSet Construction) start choosing CSet, _pending_cards: 2204, predicted base time: 18.27 ms, remaining time: 31.73 ms, target pause time: 50.00 ms]</span><br><span class=\"line\"> 45225.309: [G1Ergonomics (CSet Construction) add young regions to CSet, eden: 45 regions, survivors: 31 regions, predicted young region time: 0.76 ms]</span><br><span class=\"line\"> 45225.309: [G1Ergonomics (CSet Construction) finish adding old regions to CSet, reason: reclaimable percentage not over threshold, old: 24 regions, max: 154 regions, reclaimable: 80229208 bytes (4.98 %), threshold: 5.00 %]</span><br><span class=\"line\"> 45225.309: [G1Ergonomics (CSet Construction) finish choosing CSet, eden: 45 regions, survivors: 31 regions, old: 24 regions, predicted pause time: 22.66 ms, target pause time: 50.00 ms]</span><br><span class=\"line\"> 45225.348: [G1Ergonomics (Mixed GCs) do not continue mixed GCs, reason: reclaimable percentage not over threshold, candidate old regions: 163 regions, reclaimable: 80229208 bytes (4.98 %), threshold: 5.00 %]</span><br><span class=\"line\">, 0.0391519 secs]</span><br><span class=\"line\">   [Parallel Time: 25.0 ms, GC Workers: 8]</span><br><span class=\"line\">      [GC Worker Start (ms): Min: 45225309.4, Avg: 45225309.6, Max: 45225309.7, Diff: 0.3]</span><br><span class=\"line\">      [Ext Root Scanning (ms): Min: 3.9, Avg: 4.4, Max: 5.2, Diff: 1.2, Sum: 35.3]</span><br><span class=\"line\">      [Update RS (ms): Min: 0.0, Avg: 0.6, Max: 0.9, Diff: 0.9, Sum: 4.8]</span><br><span class=\"line\">         [Processed Buffers: Min: 0, Avg: 5.4, Max: 19, Diff: 19, Sum: 43]</span><br><span class=\"line\">      [Scan RS (ms): Min: 0.6, Avg: 0.9, Max: 1.0, Diff: 0.4, Sum: 7.1]</span><br><span class=\"line\">      [Code Root Scanning (ms): Min: 0.0, Avg: 0.0, Max: 0.1, Diff: 0.1, Sum: 0.3]</span><br><span class=\"line\">      [Object Copy (ms): Min: 18.4, Avg: 18.5, Max: 18.8, Diff: 0.5, Sum: 148.4]</span><br><span class=\"line\">      [Termination (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.1]</span><br><span class=\"line\">         [Termination Attempts: Min: 1, Avg: 1.6, Max: 3, Diff: 2, Sum: 13]</span><br><span class=\"line\">      [GC Worker Other (ms): Min: 0.0, Avg: 0.0, Max: 0.1, Diff: 0.0, Sum: 0.3]</span><br><span class=\"line\">      [GC Worker Total (ms): Min: 24.4, Avg: 24.5, Max: 24.7, Diff: 0.3, Sum: 196.2]</span><br><span class=\"line\">      [GC Worker End (ms): Min: 45225334.1, Avg: 45225334.1, Max: 45225334.1, Diff: 0.0]</span><br><span class=\"line\">   [Code Root Fixup: 0.3 ms]</span><br><span class=\"line\">   [Code Root Purge: 0.0 ms]</span><br><span class=\"line\">   [Clear CT: 0.9 ms]</span><br><span class=\"line\">   [Other: 13.0 ms]</span><br><span class=\"line\">      [Choose CSet: 0.1 ms]</span><br><span class=\"line\">      [Ref Proc: 9.8 ms]</span><br><span class=\"line\">      [Ref Enq: 0.6 ms]</span><br><span class=\"line\">      [Redirty Cards: 0.7 ms]</span><br><span class=\"line\">      [Humongous Register: 0.1 ms]</span><br><span class=\"line\">      [Humongous Reclaim: 0.7 ms]</span><br><span class=\"line\">      [Free CSet: 0.3 ms]</span><br><span class=\"line\">   [Eden: 45.0M(45.0M)-&gt;0.0B(685.0M) Survivors: 31.0M-&gt;6144.0K Heap: 732.5M(1536.0M)-&gt;342.3M(1536.0M)]</span><br><span class=\"line\"> [Times: user=0.17 sys=0.01, real=0.04 secs]</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>问题：该变量究竟何意？<br>官方解释<br><img src=\"\\images\\pasted-0.png\" alt=\"upload successful\"></p>\n<p>疑问：整堆占用率，到底是老年代区域占用整堆比率还是所有区域占用整堆比率？<br>个人认为应该是老年代占用区域<br>原因：<br>1、新生代默认比例为5-60%， 新生代的回收是使用殆尽时，那么，本文讨论的这个变量默认时45%，这两个是用一点冲突的<br>2、工作内存调优时发现gc日志，报出占用率超过45%时，此时更像是老年代超过45%<br>3、工作内存调优过程：<br>mpay堆大小 1500多兆，堆内存使用率预警值90%<br>a、最初时候出现预警时 堆内存占用率时 1500<em>60% + ？ = 1500M左右 即，差不多用光了； 时常预警<br>b、后来调成 1500</em>25% + ？=1000M左右； 没有再预警<br>c、再后来调成 1500*45% + ？ = 1350M左右 很少出现<br>【？】处是老年代的占比，  如果用45%来计算，才能符合我们的现象。</p>\n<p>a、 最初时候出现预警时 堆内存占用率时 1500<em>60% + 1500</em>45% ；<br>b、后来调成 1500<em>25% + 1500</em>45%=975M ；<br>c、再后来调成 1500<em>45% + 1500</em>45% = 1350M</p>\n<p>附：GC日志记录<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2019-04-08T22:58:18.594+0800: 45124.782: [GC pause (G1 Evacuation Pause) (young) 45124.783: [G1Ergonomics (CSet Construction) start choosing CSet, _pending_cards: 13273, predicted base time: 26.68 ms, remaining time: 23.32 ms, target pause time: 50.00 ms]</span><br><span class=\"line\"> 45124.783: [G1Ergonomics (CSet Construction) add young regions to CSet, eden: 664 regions, survivors: 27 regions, predicted young region time: 15.56 ms]</span><br><span class=\"line\"> 45124.783: [G1Ergonomics (CSet Construction) finish choosing CSet, eden: 664 regions, survivors: 27 regions, old: 0 regions, predicted pause time: 42.25 ms, target pause time: 50.00 ms]</span><br><span class=\"line\">, 0.0195542 secs]</span><br><span class=\"line\">   [Parallel Time: 9.5 ms, GC Workers: 8]</span><br><span class=\"line\">      [GC Worker Start (ms): Min: 45124782.9, Avg: 45124783.1, Max: 45124783.3, Diff: 0.4]</span><br><span class=\"line\">      [Ext Root Scanning (ms): Min: 2.7, Avg: 3.0, Max: 4.5, Diff: 1.8, Sum: 24.3]</span><br><span class=\"line\">      [Update RS (ms): Min: 1.6, Avg: 2.8, Max: 3.4, Diff: 1.8, Sum: 22.3]</span><br><span class=\"line\">         [Processed Buffers: Min: 1, Avg: 15.6, Max: 28, Diff: 27, Sum: 125]</span><br><span class=\"line\">      [Scan RS (ms): Min: 0.0, Avg: 0.2, Max: 0.3, Diff: 0.3, Sum: 1.5]</span><br><span class=\"line\">      [Code Root Scanning (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.1]</span><br><span class=\"line\">      [Object Copy (ms): Min: 2.5, Avg: 2.8, Max: 3.0, Diff: 0.4, Sum: 22.0]</span><br><span class=\"line\">      [Termination (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]</span><br><span class=\"line\">         [Termination Attempts: Min: 1, Avg: 1.0, Max: 1, Diff: 0, Sum: 8]</span><br><span class=\"line\">      [GC Worker Other (ms): Min: 0.0, Avg: 0.1, Max: 0.3, Diff: 0.2, Sum: 1.0]</span><br><span class=\"line\">      [GC Worker Total (ms): Min: 8.6, Avg: 8.9, Max: 9.2, Diff: 0.6, Sum: 71.2]</span><br><span class=\"line\">      [GC Worker End (ms): Min: 45124791.9, Avg: 45124792.0, Max: 45124792.1, Diff: 0.2]</span><br><span class=\"line\">   [Code Root Fixup: 0.3 ms]</span><br><span class=\"line\">   [Code Root Purge: 0.0 ms]</span><br><span class=\"line\">   [Clear CT: 0.8 ms]</span><br><span class=\"line\">   [Other: 9.0 ms]</span><br><span class=\"line\">      [Choose CSet: 0.0 ms]</span><br><span class=\"line\">      [Ref Proc: 6.2 ms]</span><br><span class=\"line\">      [Ref Enq: 0.4 ms]</span><br><span class=\"line\">      [Redirty Cards: 0.3 ms]</span><br><span class=\"line\">      [Humongous Register: 0.1 ms]</span><br><span class=\"line\">      [Humongous Reclaim: 0.1 ms]</span><br><span class=\"line\">      [Free CSet: 1.0 ms]</span><br><span class=\"line\">   [Eden: 664.0M(664.0M)-&gt;0.0B(678.0M) Survivors: 27.0M-&gt;13.0M Heap: 1008.6M(1536.0M)-&gt;326.5M(1536.0M)]</span><br><span class=\"line\"> [Times: user=0.09 sys=0.00, real=0.02 secs]</span><br><span class=\"line\"> </span><br><span class=\"line\"> 2019-04-08T22:58:48.854+0800: 45155.043: [GC pause (G1 Evacuation Pause) (young) 45155.043: [G1Ergonomics (CSet Construction) start choosing CSet, _pending_cards: 12417, predicted base time: 23.87 ms, remaining time: 26.13 ms, target pause time: 50.00 ms]</span><br><span class=\"line\"> 45155.043: [G1Ergonomics (CSet Construction) add young regions to CSet, eden: 678 regions, survivors: 13 regions, predicted young region time: 9.44 ms]</span><br><span class=\"line\"> 45155.043: [G1Ergonomics (CSet Construction) finish choosing CSet, eden: 678 regions, survivors: 13 regions, old: 0 regions, predicted pause time: 33.31 ms, target pause time: 50.00 ms]</span><br><span class=\"line\">, 0.0211469 secs]</span><br><span class=\"line\">   [Parallel Time: 12.1 ms, GC Workers: 8]</span><br><span class=\"line\">      [GC Worker Start (ms): Min: 45155043.0, Avg: 45155043.2, Max: 45155043.3, Diff: 0.3]</span><br><span class=\"line\">      [Ext Root Scanning (ms): Min: 2.1, Avg: 2.5, Max: 3.8, Diff: 1.7, Sum: 20.0]</span><br><span class=\"line\">      [Update RS (ms): Min: 1.1, Avg: 2.1, Max: 2.4, Diff: 1.4, Sum: 16.7]</span><br><span class=\"line\">         [Processed Buffers: Min: 9, Avg: 14.8, Max: 27, Diff: 18, Sum: 118]</span><br><span class=\"line\">      [Scan RS (ms): Min: 0.0, Avg: 0.2, Max: 0.2, Diff: 0.2, Sum: 1.3]</span><br><span class=\"line\">      [Code Root Scanning (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.1]</span><br><span class=\"line\">      [Object Copy (ms): Min: 6.7, Avg: 6.8, Max: 6.9, Diff: 0.2, Sum: 54.8]</span><br><span class=\"line\">      [Termination (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]</span><br><span class=\"line\">         [Termination Attempts: Min: 1, Avg: 1.0, Max: 1, Diff: 0, Sum: 8]</span><br><span class=\"line\">      [GC Worker Other (ms): Min: 0.0, Avg: 0.1, Max: 0.2, Diff: 0.1, Sum: 0.6]</span><br><span class=\"line\">      [GC Worker Total (ms): Min: 11.5, Avg: 11.7, Max: 11.9, Diff: 0.4, Sum: 93.5]</span><br><span class=\"line\">      [GC Worker End (ms): Min: 45155054.8, Avg: 45155054.8, Max: 45155054.9, Diff: 0.1]</span><br><span class=\"line\">   [Code Root Fixup: 0.2 ms]</span><br><span class=\"line\">   [Code Root Purge: 0.0 ms]</span><br><span class=\"line\">   [Clear CT: 0.6 ms]</span><br><span class=\"line\">   [Other: 8.3 ms]</span><br><span class=\"line\">      [Choose CSet: 0.0 ms]</span><br><span class=\"line\">      [Ref Proc: 5.7 ms]</span><br><span class=\"line\">      [Ref Enq: 0.6 ms]</span><br><span class=\"line\">      [Redirty Cards: 0.4 ms]</span><br><span class=\"line\">      [Humongous Register: 0.1 ms]</span><br><span class=\"line\">      [Humongous Reclaim: 0.2 ms]</span><br><span class=\"line\">      [Free CSet: 0.7 ms]</span><br><span class=\"line\">   [Eden: 678.0M(678.0M)-&gt;0.0B(660.0M) Survivors: 13.0M-&gt;31.0M Heap: 1260.8M(1536.0M)-&gt;527.7M(1536.0M)]</span><br><span class=\"line\"> [Times: user=0.11 sys=0.00, real=0.03 secs]</span><br><span class=\"line\"> </span><br><span class=\"line\"> 45189.907: [G1Ergonomics (Concurrent Cycles) request concurrent cycle initiation, reason: occupancy higher than threshold, occupancy: 713031680 bytes, allocation request: 36578320 bytes, threshold: 724775715 bytes (45.00 %), source: concurrent humongous allocation]</span><br><span class=\"line\"> 45189.909: [G1Ergonomics (Concurrent Cycles) request concurrent cycle initiation, reason: requested by GC cause, GC cause: G1 Humongous Allocation]</span><br><span class=\"line\"> 45189.909: [G1Ergonomics (Concurrent Cycles) initiate concurrent cycle, reason: concurrent cycle initiation requested]</span><br><span class=\"line\">2019-04-08T22:59:23.721+0800: 45189.910: [GC pause (G1 Humongous Allocation) (young) (initial-mark) 45189.910: [G1Ergonomics (CSet Construction) start choosing CSet, _pending_cards: 17533, predicted base time: 22.62 ms, remaining time: 27.38 ms, target pause time: 50.00 ms]</span><br><span class=\"line\"> 45189.910: [G1Ergonomics (CSet Construction) add young regions to CSet, eden: 625 regions, survivors: 31 regions, predicted young region time: 7.83 ms]</span><br><span class=\"line\"> 45189.910: [G1Ergonomics (CSet Construction) finish choosing CSet, eden: 625 regions, survivors: 31 regions, old: 0 regions, predicted pause time: 30.45 ms, target pause time: 50.00 ms]</span><br><span class=\"line\">, 0.0292182 secs]</span><br><span class=\"line\">   [Parallel Time: 17.3 ms, GC Workers: 8]</span><br><span class=\"line\">      [GC Worker Start (ms): Min: 45189910.8, Avg: 45189911.1, Max: 45189911.4, Diff: 0.6]</span><br><span class=\"line\">      [Ext Root Scanning (ms): Min: 4.0, Avg: 4.2, Max: 4.7, Diff: 0.8, Sum: 33.8]</span><br><span class=\"line\">      [Update RS (ms): Min: 3.6, Avg: 3.6, Max: 3.8, Diff: 0.2, Sum: 29.2]</span><br><span class=\"line\">         [Processed Buffers: Min: 9, Avg: 18.8, Max: 26, Diff: 17, Sum: 150]</span><br><span class=\"line\">      [Scan RS (ms): Min: 0.0, Avg: 0.2, Max: 0.2, Diff: 0.2, Sum: 1.4]</span><br><span class=\"line\">      [Code Root Scanning (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.1]</span><br><span class=\"line\">      [Object Copy (ms): Min: 7.7, Avg: 7.9, Max: 8.1, Diff: 0.4, Sum: 63.3]</span><br><span class=\"line\">      [Termination (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.0]</span><br><span class=\"line\">         [Termination Attempts: Min: 1, Avg: 1.0, Max: 1, Diff: 0, Sum: 8]</span><br><span class=\"line\">      [GC Worker Other (ms): Min: 0.0, Avg: 0.1, Max: 0.2, Diff: 0.2, Sum: 1.0]</span><br><span class=\"line\">      [GC Worker Total (ms): Min: 15.7, Avg: 16.1, Max: 16.3, Diff: 0.6, Sum: 128.8]</span><br><span class=\"line\">      [GC Worker End (ms): Min: 45189927.2, Avg: 45189927.2, Max: 45189927.4, Diff: 0.2]</span><br><span class=\"line\">   [Code Root Fixup: 0.4 ms]</span><br><span class=\"line\">   [Code Root Purge: 0.0 ms]</span><br><span class=\"line\">   [Clear CT: 0.7 ms]</span><br><span class=\"line\">   [Other: 10.9 ms]</span><br><span class=\"line\">      [Choose CSet: 0.1 ms]</span><br><span class=\"line\">      [Ref Proc: 7.0 ms]</span><br><span class=\"line\">      [Ref Enq: 0.5 ms]</span><br><span class=\"line\">      [Redirty Cards: 0.5 ms]</span><br><span class=\"line\">      [Humongous Register: 0.1 ms]</span><br><span class=\"line\">      [Humongous Reclaim: 0.5 ms]</span><br><span class=\"line\">      [Free CSet: 0.9 ms]</span><br><span class=\"line\">   [Eden: 625.0M(660.0M)-&gt;0.0B(660.0M) Survivors: 31.0M-&gt;31.0M Heap: 1319.5M(1536.0M)-&gt;458.2M(1536.0M)]</span><br><span class=\"line\"> [Times: user=0.14 sys=0.01, real=0.03 secs]</span><br><span class=\"line\"> </span><br><span class=\"line\"> 2019-04-08T22:59:23.751+0800: 45189.939: [GC concurrent-root-region-scan-start]</span><br><span class=\"line\">2019-04-08T22:59:23.765+0800: 45189.953: [GC concurrent-root-region-scan-end, 0.0135482 secs]</span><br><span class=\"line\">2019-04-08T22:59:23.765+0800: 45189.953: [GC concurrent-mark-start]</span><br><span class=\"line\">2019-04-08T22:59:24.042+0800: 45190.231: [GC concurrent-mark-end, 0.2778332 secs]</span><br><span class=\"line\">2019-04-08T22:59:24.045+0800: 45190.233: [GC remark 2019-04-08T22:59:24.045+0800: 45190.233: [Finalize Marking, 0.0013681 secs] 2019-04-08T22:59:24.046+0800: 45190.234: [GC ref-proc, 0.0093594 secs] 2019-04-08T22:59:24.056+0800: 45190.244: [Unloading, 0.0237148 secs], 0.0366644 secs]</span><br><span class=\"line\"> [Times: user=0.21 sys=0.01, real=0.04 secs]</span><br><span class=\"line\">2019-04-08T22:59:24.083+0800: 45190.271: [GC cleanup 506M-&gt;506M(1536M), 0.0063516 secs]</span><br><span class=\"line\"> [Times: user=0.01 sys=0.00, real=0.00 secs]</span><br><span class=\"line\"> 45199.221: [G1Ergonomics (Concurrent Cycles) do not request concurrent cycle initiation, reason: still doing mixed collections, occupancy: 708837376 bytes, allocation request: 23411104 bytes, threshold: 724775715 bytes (45.00 %), source: concurrent humongous allocation]</span><br><span class=\"line\"> 45199.822: [G1Ergonomics (Concurrent Cycles) do not request concurrent cycle initiation, reason: still doing mixed collections, occupancy: 732954624 bytes, allocation request: 524304 bytes, threshold: 724775715 bytes (45.00 %), source: concurrent humongous allocation]</span><br><span class=\"line\"> 45199.823: [G1Ergonomics (Concurrent Cycles) do not request concurrent cycle initiation, reason: still doing mixed collections, occupancy: 734003200 bytes, allocation request: 1048592 bytes, threshold: 724775715 bytes (45.00 %), source: concurrent humongous allocation]</span><br><span class=\"line\"> 45199.824: [G1Ergonomics (Concurrent Cycles) do not request concurrent cycle initiation, reason: still doing mixed collections, occupancy: 736100352 bytes, allocation request: 680584 bytes, threshold: 724775715 bytes (45.00 %), source: concurrent humongous allocation]</span><br><span class=\"line\"> 45207.963: [G1Ergonomics (Concurrent Cycles) do not request concurrent cycle initiation, reason: still doing mixed collections, occupancy: 737148928 bytes, allocation request: 47775760 bytes, threshold: 724775715 bytes (45.00 %), source: concurrent humongous allocation]</span><br><span class=\"line\"> 45208.497: [G1Ergonomics (Concurrent Cycles) do not request concurrent cycle initiation, reason: still doing mixed collections, occupancy: 785383424 bytes, allocation request: 23411104 bytes, threshold: 724775715 bytes (45.00 %), source: concurrent humongous allocation]</span><br><span class=\"line\"> 45209.189: [G1Ergonomics (Concurrent Cycles) do not request concurrent cycle initiation, reason: still doing mixed collections, occupancy: 809500672 bytes, allocation request: 524304 bytes, threshold: 724775715 bytes (45.00 %), source: concurrent humongous allocation]</span><br><span class=\"line\"> 45223.797: [G1Ergonomics (Concurrent Cycles) do not request concurrent cycle initiation, reason: still doing mixed collections, occupancy: 810549248 bytes, allocation request: 36578320 bytes, threshold: 724775715 bytes (45.00 %), source: concurrent humongous allocation]</span><br><span class=\"line\"> 45224.628: [G1Ergonomics (Concurrent Cycles) do not request concurrent cycle initiation, reason: still doing mixed collections, occupancy: 847249408 bytes, allocation request: 17922544 bytes, threshold: 724775715 bytes (45.00 %), source: concurrent humongous allocation]</span><br><span class=\"line\">2019-04-08T22:59:58.442+0800: 45224.630: [GC pause (G1 Humongous Allocation) (young) 45224.630: [G1Ergonomics (CSet Construction) start choosing CSet, _pending_cards: 18363, predicted base time: 22.47 ms, remaining time: 27.53 ms, target pause time: 50.00 ms]</span><br><span class=\"line\"> 45224.630: [G1Ergonomics (CSet Construction) add young regions to CSet, eden: 660 regions, survivors: 31 regions, predicted young region time: 7.16 ms]</span><br><span class=\"line\"> 45224.630: [G1Ergonomics (CSet Construction) finish choosing CSet, eden: 660 regions, survivors: 31 regions, old: 0 regions, predicted pause time: 29.63 ms, target pause time: 50.00 ms]</span><br><span class=\"line\"> 45224.660: [G1Ergonomics (Mixed GCs) start mixed GCs, reason: candidate old regions available, candidate old regions: 187 regions, reclaimable: 102606088 bytes (6.37 %), threshold: 5.00 %]</span><br><span class=\"line\">, 0.0300491 secs]</span><br><span class=\"line\">[Parallel Time: 16.3 ms, GC Workers: 8]</span><br><span class=\"line\">      [GC Worker Start (ms): Min: 45224630.8, Avg: 45224631.1, Max: 45224631.3, Diff: 0.6]</span><br><span class=\"line\">      [Ext Root Scanning (ms): Min: 2.6, Avg: 2.9, Max: 4.3, Diff: 1.7, Sum: 23.6]</span><br><span class=\"line\">      [Update RS (ms): Min: 3.0, Avg: 3.9, Max: 4.2, Diff: 1.1, Sum: 30.8]</span><br><span class=\"line\">         [Processed Buffers: Min: 11, Avg: 18.0, Max: 26, Diff: 15, Sum: 144]</span><br><span class=\"line\">      [Scan RS (ms): Min: 0.0, Avg: 0.2, Max: 0.3, Diff: 0.2, Sum: 1.6]</span><br><span class=\"line\">      [Code Root Scanning (ms): Min: 0.0, Avg: 0.0, Max: 0.1, Diff: 0.0, Sum: 0.2]</span><br><span class=\"line\">      [Object Copy (ms): Min: 8.2, Avg: 8.4, Max: 8.6, Diff: 0.4, Sum: 67.5]</span><br><span class=\"line\">      [Termination (ms): Min: 0.0, Avg: 0.1, Max: 0.1, Diff: 0.1, Sum: 0.7]</span><br><span class=\"line\">         [Termination Attempts: Min: 1, Avg: 1.0, Max: 1, Diff: 0, Sum: 8]</span><br><span class=\"line\">      [GC Worker Other (ms): Min: 0.0, Avg: 0.0, Max: 0.1, Diff: 0.0, Sum: 0.4]</span><br><span class=\"line\">      [GC Worker Total (ms): Min: 15.3, Avg: 15.6, Max: 15.9, Diff: 0.6, Sum: 124.6]</span><br><span class=\"line\">      [GC Worker End (ms): Min: 45224646.7, Avg: 45224646.7, Max: 45224646.7, Diff: 0.1]</span><br><span class=\"line\">   [Code Root Fixup: 0.3 ms]</span><br><span class=\"line\">   [Code Root Purge: 0.0 ms]</span><br><span class=\"line\">   [Clear CT: 0.7 ms]</span><br><span class=\"line\">   [Other: 12.8 ms]</span><br><span class=\"line\">      [Choose CSet: 0.0 ms]</span><br><span class=\"line\">      [Ref Proc: 7.7 ms]</span><br><span class=\"line\">      [Ref Enq: 0.6 ms]</span><br><span class=\"line\">      [Redirty Cards: 1.0 ms]</span><br><span class=\"line\">      [Humongous Register: 0.2 ms]</span><br><span class=\"line\">      [Humongous Reclaim: 0.6 ms]</span><br><span class=\"line\">      [Free CSet: 1.7 ms]</span><br><span class=\"line\">   [Eden: 660.0M(660.0M)-&gt;0.0B(45.0M) Survivors: 31.0M-&gt;31.0M Heap: 1479.4M(1536.0M)-&gt;630.5M(1536.0M)]</span><br><span class=\"line\"> [Times: user=0.15 sys=0.01, real=0.03 secs]</span><br><span class=\"line\"> </span><br><span class=\"line\"> 2019-04-08T22:59:59.121+0800: 45225.309: [GC pause (G1 Evacuation Pause) (mixed) 45225.309: [G1Ergonomics (CSet Construction) start choosing CSet, _pending_cards: 2204, predicted base time: 18.27 ms, remaining time: 31.73 ms, target pause time: 50.00 ms]</span><br><span class=\"line\"> 45225.309: [G1Ergonomics (CSet Construction) add young regions to CSet, eden: 45 regions, survivors: 31 regions, predicted young region time: 0.76 ms]</span><br><span class=\"line\"> 45225.309: [G1Ergonomics (CSet Construction) finish adding old regions to CSet, reason: reclaimable percentage not over threshold, old: 24 regions, max: 154 regions, reclaimable: 80229208 bytes (4.98 %), threshold: 5.00 %]</span><br><span class=\"line\"> 45225.309: [G1Ergonomics (CSet Construction) finish choosing CSet, eden: 45 regions, survivors: 31 regions, old: 24 regions, predicted pause time: 22.66 ms, target pause time: 50.00 ms]</span><br><span class=\"line\"> 45225.348: [G1Ergonomics (Mixed GCs) do not continue mixed GCs, reason: reclaimable percentage not over threshold, candidate old regions: 163 regions, reclaimable: 80229208 bytes (4.98 %), threshold: 5.00 %]</span><br><span class=\"line\">, 0.0391519 secs]</span><br><span class=\"line\">   [Parallel Time: 25.0 ms, GC Workers: 8]</span><br><span class=\"line\">      [GC Worker Start (ms): Min: 45225309.4, Avg: 45225309.6, Max: 45225309.7, Diff: 0.3]</span><br><span class=\"line\">      [Ext Root Scanning (ms): Min: 3.9, Avg: 4.4, Max: 5.2, Diff: 1.2, Sum: 35.3]</span><br><span class=\"line\">      [Update RS (ms): Min: 0.0, Avg: 0.6, Max: 0.9, Diff: 0.9, Sum: 4.8]</span><br><span class=\"line\">         [Processed Buffers: Min: 0, Avg: 5.4, Max: 19, Diff: 19, Sum: 43]</span><br><span class=\"line\">      [Scan RS (ms): Min: 0.6, Avg: 0.9, Max: 1.0, Diff: 0.4, Sum: 7.1]</span><br><span class=\"line\">      [Code Root Scanning (ms): Min: 0.0, Avg: 0.0, Max: 0.1, Diff: 0.1, Sum: 0.3]</span><br><span class=\"line\">      [Object Copy (ms): Min: 18.4, Avg: 18.5, Max: 18.8, Diff: 0.5, Sum: 148.4]</span><br><span class=\"line\">      [Termination (ms): Min: 0.0, Avg: 0.0, Max: 0.0, Diff: 0.0, Sum: 0.1]</span><br><span class=\"line\">         [Termination Attempts: Min: 1, Avg: 1.6, Max: 3, Diff: 2, Sum: 13]</span><br><span class=\"line\">      [GC Worker Other (ms): Min: 0.0, Avg: 0.0, Max: 0.1, Diff: 0.0, Sum: 0.3]</span><br><span class=\"line\">      [GC Worker Total (ms): Min: 24.4, Avg: 24.5, Max: 24.7, Diff: 0.3, Sum: 196.2]</span><br><span class=\"line\">      [GC Worker End (ms): Min: 45225334.1, Avg: 45225334.1, Max: 45225334.1, Diff: 0.0]</span><br><span class=\"line\">   [Code Root Fixup: 0.3 ms]</span><br><span class=\"line\">   [Code Root Purge: 0.0 ms]</span><br><span class=\"line\">   [Clear CT: 0.9 ms]</span><br><span class=\"line\">   [Other: 13.0 ms]</span><br><span class=\"line\">      [Choose CSet: 0.1 ms]</span><br><span class=\"line\">      [Ref Proc: 9.8 ms]</span><br><span class=\"line\">      [Ref Enq: 0.6 ms]</span><br><span class=\"line\">      [Redirty Cards: 0.7 ms]</span><br><span class=\"line\">      [Humongous Register: 0.1 ms]</span><br><span class=\"line\">      [Humongous Reclaim: 0.7 ms]</span><br><span class=\"line\">      [Free CSet: 0.3 ms]</span><br><span class=\"line\">   [Eden: 45.0M(45.0M)-&gt;0.0B(685.0M) Survivors: 31.0M-&gt;6144.0K Heap: 732.5M(1536.0M)-&gt;342.3M(1536.0M)]</span><br><span class=\"line\"> [Times: user=0.17 sys=0.01, real=0.04 secs]</span><br></pre></td></tr></table></figure></p>\n"},{"title":"图片压缩-ImageIO.read(inputStream)","author":"Xiang Chuang","date":"2019-04-11T10:36:00.000Z","_content":"本文可结合链接中的文章从GC层面辅助分析！\nhttps://realxc.github.io/2019/04/09/G1%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8-xx-initiatingheapoccupancypercent%E5%8F%98%E9%87%8F%E4%B9%8B%E9%97%AE/\n\n背景：由于目前手机像素越来越富裕，导致用户上传图片时过大3-4M甚至以上，且像素较高，如3024*4032，因此，图片压缩功能就势在必行了。\n\n选型：优先考虑前端压缩，但由于个人对前端无甚兴趣，因此提供了基于java的压缩解决方案。\n\n目前市面上成熟的压缩工具大致为thumbnailator及simpleimage\n1、thumbnailator\n```\n\t<dependency>\n\t\t\t<groupId>net.coobird</groupId>\n\t\t\t<artifactId>thumbnailator</artifactId>\n\t\t\t<version>0.4.8</version>\n  </dependency>\n  ```\n  ```\n  BufferedImage bufferedImage = Thumbnails.of(input).scale(scale).outputQuality(quality).asBufferedImage();\n  ```\n  经过使用发现有背景色变红的问题，未着手解决,同时，内存消耗较大\n  \n2、simpleimage\n参见git\nhttps://github.com/alibaba/simpleimage\n```\n<dependency>\n\t\t\t<groupId>com.sun.media</groupId>\n\t\t\t<artifactId>jai-codec</artifactId>\n\t\t\t<version>1.1.3</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>javax.media</groupId>\n\t\t\t<artifactId>jai-core</artifactId>\n\t\t\t<version>1.1.3</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>com.alibaba</groupId>\n\t\t\t<artifactId>simpleimage</artifactId>\n\t\t\t<version>1.2.3</version>\n</dependency>            \n```\n```\nFile in = new File(\"d://04092.jpg\");      //原图片\n            ImageWrapper imageWrapper = ImageReadHelper.read(new FileInputStream(in));\n            int witdh = imageWrapper.getWidth();\n            int height = imageWrapper.getHeight();\n            File out = new File(\"d://04092-after.jpg\");       //目的图片\n            ScaleParameter scaleParam = new ScaleParameter(Float.valueOf(witdh * 0.5f).intValue()\n                    , Float.valueOf(height * 0.5f).intValue());\n            WriteParameter writeParam = new WriteParameter();\n\n            FileInputStream inStream = null;\n            FileOutputStream outStream = null;\n            ImageRender wr = null;\n            inStream = new FileInputStream(in);\n            outStream = new FileOutputStream(out);\n            ImageRender rr = new ReadRender(inStream);\n            ImageRender sr = new ScaleRender(rr, scaleParam);\n            wr = new WriteRender(sr, outStream, ImageFormat.JPEG, writeParam);\n\n            wr.render();                            //触发图像处理\n```\n```\nWriteRender.render()源码：\n @Override\n    public ImageWrapper render() throws SimpleImageException {\n        try {\n            if (image == null) {\n                image = imageRender.render();//此处读取原文件，大对象\n            }\n\n            ImageWriteHelper.write(image, stream, outputFormat, param);//写文件，数据缓冲区分段初始化，一个按压缩后图片像素大小生产，外加若干512*512及1024*1024的缓冲区，因此需要更多的内存\n        } catch (Exception e) {\n            throw new SimpleImageException(e);\n        }\n\n        return null;\n    }\n```\n```\nReadRender.render源码， WriteRender中需要首先依赖此类读取原文件\n@Override\n    public ImageWrapper render() throws SimpleImageException {\n        try {\n            ImageWrapper imgWrapper;\n            if (inStream == null) {\n                throw new SimpleImageException(\"No input set\");\n            }\n\n            imgWrapper = ImageReadHelper.read(inStream);\n\n            if (tosRGBColorSpace) {\n                for (int i = 0; i < imgWrapper.getNumOfImages(); i++) {\n                    PlanarImage img = ImageColorConvertHelper.convert2sRGB(imgWrapper\n                            .getAsPlanarImage(i));\n                    imgWrapper.setImage(i, img);\n                }\n            }\n\n            return imgWrapper;\n        } catch (Exception e) {\n            throw new SimpleImageException(e);\n        }\n    }\n    \n    ImageReadHelper.read(inStream)：\n    public static ImageWrapper read(InputStream input)\n            throws SimpleImageException {\n        try {\n            input = ImageUtils.createMemoryStream(input);//流拷贝，增加了内存使用\n\n            if (ImageUtils.isJPEG(input)) {\n                return readJPEG(input);//此处耗内存\n            }\n\n            if (ImageUtils.isGIF(input)) {\n                return readGIF(input);\n            }\n\n            return readGeneral(input);\n        } catch (Exception e) {\n            throw new SimpleImageException(e);\n        }\n    }\n```\n由于simpleimage在read及write阶段做了额外操作，使得单次开辟的大对象比方案1的小，但，多次开辟缓冲区，总内存大小反而需要的更多，结合G1内存分配机制，在内存方面与方案1存在相同问题。\n\n3、由于上述2个方案存在的问题及本身需求只是缩放图片而且，也用不上它们提供的水印之类的方法，因此，自定义了一个仅支持图片压缩能力的工具包\n```\npublic final static ByteArrayOutputStream scale(InputStream srcImageStream, float scale) throws IOException {\n        ByteArrayOutputStream desImageStream = new ByteArrayOutputStream();\n        BufferedImage originalImage = ImageIO.read(srcImageStream);\n        int width = Float.valueOf(scale * originalImage.getWidth()).intValue();\n        int height = Float.valueOf(scale * originalImage.getHeight()).intValue();\n        BufferedImage newImage = new BufferedImage(width, height, originalImage.getType());\n        Graphics g = newImage.getGraphics();\n        g.drawImage(originalImage, 0, 0, width, height, null);\n        g.dispose();\n        ImageIO.write(newImage, \"jpeg\", desImageStream);\n        return desImageStream;\n    }\n ```\n   该方案能在压缩质量得到保证的前提的快速完成压缩，约1s，thumbnailator使用时，约2s。\n    问题来了：功能上去后，发现内存占用率偶尔超过90%，但垃圾回收后又能绝大数回收，（采用G1回收，只额外配置了暂停时间50ms，堆最大值1536M）因此排除内存泄漏的可能，但功能上去之前未曾出现，初步猜测是图片压缩功能引起的（方案1、3都存在问题，推测2也存在），后经本地java visualVM调试发现， 执行一个大小3M多，像素3024*4032的图片压缩时，会有35M多的老年代被直接使用。因此分析问题在于出现了大对象，大对象会直接分配在老年代，于是通过断点测试结合 java visualVM监控，定位到问题在于：\n    ```\n  BufferedImage originalImage = ImageIO.read(srcImageStream);\n    ```\n    此方法创建BufferedImage时，会基于ComponentSampleModel类首先创建数据缓冲区（dataBuffer），而缓冲区大小算法为：\n   ```\n   private int getBufferSize() {\n         int maxBandOff=bandOffsets[0];//jpeg图片，此数组为{2，1，0}\n         for (int i=1; i<bandOffsets.length; i++) {\n             maxBandOff = Math.max(maxBandOff,bandOffsets[i]);\n         }\n         if (maxBandOff < 0 || maxBandOff > (Integer.MAX_VALUE - 1)) {\n             throw new IllegalArgumentException(\"Invalid band offset\");\n         }\n         if (pixelStride < 0 || pixelStride > (Integer.MAX_VALUE / width)) {\n             throw new IllegalArgumentException(\"Invalid pixel stride\");\n         }\n         if (scanlineStride < 0 || scanlineStride > (Integer.MAX_VALUE / height)) {\n             throw new IllegalArgumentException(\"Invalid scanline stride\");\n         }\n         int size = maxBandOff + 1;\n         int val = pixelStride * (width - 1);//pixelStride jpeg图片时，默认为3\n         if (val > (Integer.MAX_VALUE - size)) {\n             throw new IllegalArgumentException(\"Invalid pixel stride\");\n         }\n         size += val;\n         val = scanlineStride * (height - 1);//scanlineStride jpeg图片时，默认为12096\n         if (val > (Integer.MAX_VALUE - size)) {\n             throw new IllegalArgumentException(\"Invalid scan stride\");\n         }\n         size += val;\n         return size;\n     }\n    \n    因此大小为(2+1)+3*(width-1)+12096*(height-1)  god，这是多大的一个内存呀\n    public DataBufferByte(int size, int numBanks) {\n        super(STABLE, TYPE_BYTE, size, numBanks);\n        bankdata = new byte[numBanks][];\n        for (int i= 0; i < numBanks; i++) {\n            bankdata[i] = new byte[size];\n        }\n        data = bankdata[0];\n    }\n    \n    ```\n\n如果整个逻辑处理时间是1s， 那么，可以算一下1s并发量多大，需要配置多大的内存了 ！！！\n\n附：测试数据\n方案1：\n![upload successful](\\images\\pasted-62.png)\n![upload successful](\\images\\pasted-63.png)\n![upload successful](\\images\\pasted-64.png)\n\n方案2：\n![upload successful](\\images\\pasted-68.png)\n![upload successful](\\images\\pasted-69.png)\n![upload successful](\\images\\pasted-70.png)\n![upload successful](\\images\\pasted-71.png)\n![upload successful](\\images\\pasted-72.png)\n![upload successful](\\images\\pasted-73.png)\n方案3：\n![upload successful](\\images\\pasted-65.png)\n![upload successful](\\images\\pasted-66.png)\n![upload successful](\\images\\pasted-67.png)\n","source":"_posts/图片压缩-ImageIO-read-inputStream.md","raw":"title: 图片压缩-ImageIO.read(inputStream)\nauthor: Xiang Chuang\ntags:\n  - 图片压缩\n  - ImageIO\ncategories:\n  - 这些年，那些坑\ndate: 2019-04-11 18:36:00\n---\n本文可结合链接中的文章从GC层面辅助分析！\nhttps://realxc.github.io/2019/04/09/G1%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8-xx-initiatingheapoccupancypercent%E5%8F%98%E9%87%8F%E4%B9%8B%E9%97%AE/\n\n背景：由于目前手机像素越来越富裕，导致用户上传图片时过大3-4M甚至以上，且像素较高，如3024*4032，因此，图片压缩功能就势在必行了。\n\n选型：优先考虑前端压缩，但由于个人对前端无甚兴趣，因此提供了基于java的压缩解决方案。\n\n目前市面上成熟的压缩工具大致为thumbnailator及simpleimage\n1、thumbnailator\n```\n\t<dependency>\n\t\t\t<groupId>net.coobird</groupId>\n\t\t\t<artifactId>thumbnailator</artifactId>\n\t\t\t<version>0.4.8</version>\n  </dependency>\n  ```\n  ```\n  BufferedImage bufferedImage = Thumbnails.of(input).scale(scale).outputQuality(quality).asBufferedImage();\n  ```\n  经过使用发现有背景色变红的问题，未着手解决,同时，内存消耗较大\n  \n2、simpleimage\n参见git\nhttps://github.com/alibaba/simpleimage\n```\n<dependency>\n\t\t\t<groupId>com.sun.media</groupId>\n\t\t\t<artifactId>jai-codec</artifactId>\n\t\t\t<version>1.1.3</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>javax.media</groupId>\n\t\t\t<artifactId>jai-core</artifactId>\n\t\t\t<version>1.1.3</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>com.alibaba</groupId>\n\t\t\t<artifactId>simpleimage</artifactId>\n\t\t\t<version>1.2.3</version>\n</dependency>            \n```\n```\nFile in = new File(\"d://04092.jpg\");      //原图片\n            ImageWrapper imageWrapper = ImageReadHelper.read(new FileInputStream(in));\n            int witdh = imageWrapper.getWidth();\n            int height = imageWrapper.getHeight();\n            File out = new File(\"d://04092-after.jpg\");       //目的图片\n            ScaleParameter scaleParam = new ScaleParameter(Float.valueOf(witdh * 0.5f).intValue()\n                    , Float.valueOf(height * 0.5f).intValue());\n            WriteParameter writeParam = new WriteParameter();\n\n            FileInputStream inStream = null;\n            FileOutputStream outStream = null;\n            ImageRender wr = null;\n            inStream = new FileInputStream(in);\n            outStream = new FileOutputStream(out);\n            ImageRender rr = new ReadRender(inStream);\n            ImageRender sr = new ScaleRender(rr, scaleParam);\n            wr = new WriteRender(sr, outStream, ImageFormat.JPEG, writeParam);\n\n            wr.render();                            //触发图像处理\n```\n```\nWriteRender.render()源码：\n @Override\n    public ImageWrapper render() throws SimpleImageException {\n        try {\n            if (image == null) {\n                image = imageRender.render();//此处读取原文件，大对象\n            }\n\n            ImageWriteHelper.write(image, stream, outputFormat, param);//写文件，数据缓冲区分段初始化，一个按压缩后图片像素大小生产，外加若干512*512及1024*1024的缓冲区，因此需要更多的内存\n        } catch (Exception e) {\n            throw new SimpleImageException(e);\n        }\n\n        return null;\n    }\n```\n```\nReadRender.render源码， WriteRender中需要首先依赖此类读取原文件\n@Override\n    public ImageWrapper render() throws SimpleImageException {\n        try {\n            ImageWrapper imgWrapper;\n            if (inStream == null) {\n                throw new SimpleImageException(\"No input set\");\n            }\n\n            imgWrapper = ImageReadHelper.read(inStream);\n\n            if (tosRGBColorSpace) {\n                for (int i = 0; i < imgWrapper.getNumOfImages(); i++) {\n                    PlanarImage img = ImageColorConvertHelper.convert2sRGB(imgWrapper\n                            .getAsPlanarImage(i));\n                    imgWrapper.setImage(i, img);\n                }\n            }\n\n            return imgWrapper;\n        } catch (Exception e) {\n            throw new SimpleImageException(e);\n        }\n    }\n    \n    ImageReadHelper.read(inStream)：\n    public static ImageWrapper read(InputStream input)\n            throws SimpleImageException {\n        try {\n            input = ImageUtils.createMemoryStream(input);//流拷贝，增加了内存使用\n\n            if (ImageUtils.isJPEG(input)) {\n                return readJPEG(input);//此处耗内存\n            }\n\n            if (ImageUtils.isGIF(input)) {\n                return readGIF(input);\n            }\n\n            return readGeneral(input);\n        } catch (Exception e) {\n            throw new SimpleImageException(e);\n        }\n    }\n```\n由于simpleimage在read及write阶段做了额外操作，使得单次开辟的大对象比方案1的小，但，多次开辟缓冲区，总内存大小反而需要的更多，结合G1内存分配机制，在内存方面与方案1存在相同问题。\n\n3、由于上述2个方案存在的问题及本身需求只是缩放图片而且，也用不上它们提供的水印之类的方法，因此，自定义了一个仅支持图片压缩能力的工具包\n```\npublic final static ByteArrayOutputStream scale(InputStream srcImageStream, float scale) throws IOException {\n        ByteArrayOutputStream desImageStream = new ByteArrayOutputStream();\n        BufferedImage originalImage = ImageIO.read(srcImageStream);\n        int width = Float.valueOf(scale * originalImage.getWidth()).intValue();\n        int height = Float.valueOf(scale * originalImage.getHeight()).intValue();\n        BufferedImage newImage = new BufferedImage(width, height, originalImage.getType());\n        Graphics g = newImage.getGraphics();\n        g.drawImage(originalImage, 0, 0, width, height, null);\n        g.dispose();\n        ImageIO.write(newImage, \"jpeg\", desImageStream);\n        return desImageStream;\n    }\n ```\n   该方案能在压缩质量得到保证的前提的快速完成压缩，约1s，thumbnailator使用时，约2s。\n    问题来了：功能上去后，发现内存占用率偶尔超过90%，但垃圾回收后又能绝大数回收，（采用G1回收，只额外配置了暂停时间50ms，堆最大值1536M）因此排除内存泄漏的可能，但功能上去之前未曾出现，初步猜测是图片压缩功能引起的（方案1、3都存在问题，推测2也存在），后经本地java visualVM调试发现， 执行一个大小3M多，像素3024*4032的图片压缩时，会有35M多的老年代被直接使用。因此分析问题在于出现了大对象，大对象会直接分配在老年代，于是通过断点测试结合 java visualVM监控，定位到问题在于：\n    ```\n  BufferedImage originalImage = ImageIO.read(srcImageStream);\n    ```\n    此方法创建BufferedImage时，会基于ComponentSampleModel类首先创建数据缓冲区（dataBuffer），而缓冲区大小算法为：\n   ```\n   private int getBufferSize() {\n         int maxBandOff=bandOffsets[0];//jpeg图片，此数组为{2，1，0}\n         for (int i=1; i<bandOffsets.length; i++) {\n             maxBandOff = Math.max(maxBandOff,bandOffsets[i]);\n         }\n         if (maxBandOff < 0 || maxBandOff > (Integer.MAX_VALUE - 1)) {\n             throw new IllegalArgumentException(\"Invalid band offset\");\n         }\n         if (pixelStride < 0 || pixelStride > (Integer.MAX_VALUE / width)) {\n             throw new IllegalArgumentException(\"Invalid pixel stride\");\n         }\n         if (scanlineStride < 0 || scanlineStride > (Integer.MAX_VALUE / height)) {\n             throw new IllegalArgumentException(\"Invalid scanline stride\");\n         }\n         int size = maxBandOff + 1;\n         int val = pixelStride * (width - 1);//pixelStride jpeg图片时，默认为3\n         if (val > (Integer.MAX_VALUE - size)) {\n             throw new IllegalArgumentException(\"Invalid pixel stride\");\n         }\n         size += val;\n         val = scanlineStride * (height - 1);//scanlineStride jpeg图片时，默认为12096\n         if (val > (Integer.MAX_VALUE - size)) {\n             throw new IllegalArgumentException(\"Invalid scan stride\");\n         }\n         size += val;\n         return size;\n     }\n    \n    因此大小为(2+1)+3*(width-1)+12096*(height-1)  god，这是多大的一个内存呀\n    public DataBufferByte(int size, int numBanks) {\n        super(STABLE, TYPE_BYTE, size, numBanks);\n        bankdata = new byte[numBanks][];\n        for (int i= 0; i < numBanks; i++) {\n            bankdata[i] = new byte[size];\n        }\n        data = bankdata[0];\n    }\n    \n    ```\n\n如果整个逻辑处理时间是1s， 那么，可以算一下1s并发量多大，需要配置多大的内存了 ！！！\n\n附：测试数据\n方案1：\n![upload successful](\\images\\pasted-62.png)\n![upload successful](\\images\\pasted-63.png)\n![upload successful](\\images\\pasted-64.png)\n\n方案2：\n![upload successful](\\images\\pasted-68.png)\n![upload successful](\\images\\pasted-69.png)\n![upload successful](\\images\\pasted-70.png)\n![upload successful](\\images\\pasted-71.png)\n![upload successful](\\images\\pasted-72.png)\n![upload successful](\\images\\pasted-73.png)\n方案3：\n![upload successful](\\images\\pasted-65.png)\n![upload successful](\\images\\pasted-66.png)\n![upload successful](\\images\\pasted-67.png)\n","slug":"图片压缩-ImageIO-read-inputStream","published":1,"updated":"2019-09-30T07:34:10.839Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3e5th7h005yp966i6bk6djh","content":"<p>本文可结合链接中的文章从GC层面辅助分析！<br><a href=\"https://realxc.github.io/2019/04/09/G1%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8-xx-initiatingheapoccupancypercent%E5%8F%98%E9%87%8F%E4%B9%8B%E9%97%AE/\" target=\"_blank\" rel=\"noopener\">https://realxc.github.io/2019/04/09/G1%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8-xx-initiatingheapoccupancypercent%E5%8F%98%E9%87%8F%E4%B9%8B%E9%97%AE/</a></p>\n<p>背景：由于目前手机像素越来越富裕，导致用户上传图片时过大3-4M甚至以上，且像素较高，如3024*4032，因此，图片压缩功能就势在必行了。</p>\n<p>选型：优先考虑前端压缩，但由于个人对前端无甚兴趣，因此提供了基于java的压缩解决方案。</p>\n<p>目前市面上成熟的压缩工具大致为thumbnailator及simpleimage<br>1、thumbnailator<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t\t&lt;groupId&gt;net.coobird&lt;/groupId&gt;</span><br><span class=\"line\">\t\t&lt;artifactId&gt;thumbnailator&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t&lt;version&gt;0.4.8&lt;/version&gt;</span><br><span class=\"line\"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BufferedImage bufferedImage = Thumbnails.of(input).scale(scale).outputQuality(quality).asBufferedImage();</span><br></pre></td></tr></table></figure>\n<p>  经过使用发现有背景色变红的问题，未着手解决,同时，内存消耗较大</p>\n<p>2、simpleimage<br>参见git<br><a href=\"https://github.com/alibaba/simpleimage\" target=\"_blank\" rel=\"noopener\">https://github.com/alibaba/simpleimage</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;com.sun.media&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;jai-codec&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;1.1.3&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;javax.media&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;jai-core&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;1.1.3&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;simpleimage&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;1.2.3&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File in = new File(&quot;d://04092.jpg&quot;);      //原图片</span><br><span class=\"line\">            ImageWrapper imageWrapper = ImageReadHelper.read(new FileInputStream(in));</span><br><span class=\"line\">            int witdh = imageWrapper.getWidth();</span><br><span class=\"line\">            int height = imageWrapper.getHeight();</span><br><span class=\"line\">            File out = new File(&quot;d://04092-after.jpg&quot;);       //目的图片</span><br><span class=\"line\">            ScaleParameter scaleParam = new ScaleParameter(Float.valueOf(witdh * 0.5f).intValue()</span><br><span class=\"line\">                    , Float.valueOf(height * 0.5f).intValue());</span><br><span class=\"line\">            WriteParameter writeParam = new WriteParameter();</span><br><span class=\"line\"></span><br><span class=\"line\">            FileInputStream inStream = null;</span><br><span class=\"line\">            FileOutputStream outStream = null;</span><br><span class=\"line\">            ImageRender wr = null;</span><br><span class=\"line\">            inStream = new FileInputStream(in);</span><br><span class=\"line\">            outStream = new FileOutputStream(out);</span><br><span class=\"line\">            ImageRender rr = new ReadRender(inStream);</span><br><span class=\"line\">            ImageRender sr = new ScaleRender(rr, scaleParam);</span><br><span class=\"line\">            wr = new WriteRender(sr, outStream, ImageFormat.JPEG, writeParam);</span><br><span class=\"line\"></span><br><span class=\"line\">            wr.render();                            //触发图像处理</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WriteRender.render()源码：</span><br><span class=\"line\"> @Override</span><br><span class=\"line\">    public ImageWrapper render() throws SimpleImageException &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            if (image == null) &#123;</span><br><span class=\"line\">                image = imageRender.render();//此处读取原文件，大对象</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            ImageWriteHelper.write(image, stream, outputFormat, param);//写文件，数据缓冲区分段初始化，一个按压缩后图片像素大小生产，外加若干512*512及1024*1024的缓冲区，因此需要更多的内存</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            throw new SimpleImageException(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReadRender.render源码， WriteRender中需要首先依赖此类读取原文件</span><br><span class=\"line\">@Override</span><br><span class=\"line\">    public ImageWrapper render() throws SimpleImageException &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            ImageWrapper imgWrapper;</span><br><span class=\"line\">            if (inStream == null) &#123;</span><br><span class=\"line\">                throw new SimpleImageException(&quot;No input set&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            imgWrapper = ImageReadHelper.read(inStream);</span><br><span class=\"line\"></span><br><span class=\"line\">            if (tosRGBColorSpace) &#123;</span><br><span class=\"line\">                for (int i = 0; i &lt; imgWrapper.getNumOfImages(); i++) &#123;</span><br><span class=\"line\">                    PlanarImage img = ImageColorConvertHelper.convert2sRGB(imgWrapper</span><br><span class=\"line\">                            .getAsPlanarImage(i));</span><br><span class=\"line\">                    imgWrapper.setImage(i, img);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            return imgWrapper;</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            throw new SimpleImageException(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    ImageReadHelper.read(inStream)：</span><br><span class=\"line\">    public static ImageWrapper read(InputStream input)</span><br><span class=\"line\">            throws SimpleImageException &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            input = ImageUtils.createMemoryStream(input);//流拷贝，增加了内存使用</span><br><span class=\"line\"></span><br><span class=\"line\">            if (ImageUtils.isJPEG(input)) &#123;</span><br><span class=\"line\">                return readJPEG(input);//此处耗内存</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            if (ImageUtils.isGIF(input)) &#123;</span><br><span class=\"line\">                return readGIF(input);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            return readGeneral(input);</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            throw new SimpleImageException(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>由于simpleimage在read及write阶段做了额外操作，使得单次开辟的大对象比方案1的小，但，多次开辟缓冲区，总内存大小反而需要的更多，结合G1内存分配机制，在内存方面与方案1存在相同问题。</p>\n<p>3、由于上述2个方案存在的问题及本身需求只是缩放图片而且，也用不上它们提供的水印之类的方法，因此，自定义了一个仅支持图片压缩能力的工具包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final static ByteArrayOutputStream scale(InputStream srcImageStream, float scale) throws IOException &#123;</span><br><span class=\"line\">        ByteArrayOutputStream desImageStream = new ByteArrayOutputStream();</span><br><span class=\"line\">        BufferedImage originalImage = ImageIO.read(srcImageStream);</span><br><span class=\"line\">        int width = Float.valueOf(scale * originalImage.getWidth()).intValue();</span><br><span class=\"line\">        int height = Float.valueOf(scale * originalImage.getHeight()).intValue();</span><br><span class=\"line\">        BufferedImage newImage = new BufferedImage(width, height, originalImage.getType());</span><br><span class=\"line\">        Graphics g = newImage.getGraphics();</span><br><span class=\"line\">        g.drawImage(originalImage, 0, 0, width, height, null);</span><br><span class=\"line\">        g.dispose();</span><br><span class=\"line\">        ImageIO.write(newImage, &quot;jpeg&quot;, desImageStream);</span><br><span class=\"line\">        return desImageStream;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>   该方案能在压缩质量得到保证的前提的快速完成压缩，约1s，thumbnailator使用时，约2s。<br>    问题来了：功能上去后，发现内存占用率偶尔超过90%，但垃圾回收后又能绝大数回收，（采用G1回收，只额外配置了暂停时间50ms，堆最大值1536M）因此排除内存泄漏的可能，但功能上去之前未曾出现，初步猜测是图片压缩功能引起的（方案1、3都存在问题，推测2也存在），后经本地java visualVM调试发现， 执行一个大小3M多，像素3024*4032的图片压缩时，会有35M多的老年代被直接使用。因此分析问题在于出现了大对象，大对象会直接分配在老年代，于是通过断点测试结合 java visualVM监控，定位到问题在于：<br>    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BufferedImage originalImage = ImageIO.read(srcImageStream);</span><br></pre></td></tr></table></figure></p>\n<pre><code>此方法创建BufferedImage时，会基于ComponentSampleModel类首先创建数据缓冲区（dataBuffer），而缓冲区大小算法为：\n</code></pre>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private int getBufferSize() &#123;</span><br><span class=\"line\">      int maxBandOff=bandOffsets[0];//jpeg图片，此数组为&#123;2，1，0&#125;</span><br><span class=\"line\">      for (int i=1; i&lt;bandOffsets.length; i++) &#123;</span><br><span class=\"line\">          maxBandOff = Math.max(maxBandOff,bandOffsets[i]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (maxBandOff &lt; 0 || maxBandOff &gt; (Integer.MAX_VALUE - 1)) &#123;</span><br><span class=\"line\">          throw new IllegalArgumentException(&quot;Invalid band offset&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (pixelStride &lt; 0 || pixelStride &gt; (Integer.MAX_VALUE / width)) &#123;</span><br><span class=\"line\">          throw new IllegalArgumentException(&quot;Invalid pixel stride&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (scanlineStride &lt; 0 || scanlineStride &gt; (Integer.MAX_VALUE / height)) &#123;</span><br><span class=\"line\">          throw new IllegalArgumentException(&quot;Invalid scanline stride&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      int size = maxBandOff + 1;</span><br><span class=\"line\">      int val = pixelStride * (width - 1);//pixelStride jpeg图片时，默认为3</span><br><span class=\"line\">      if (val &gt; (Integer.MAX_VALUE - size)) &#123;</span><br><span class=\"line\">          throw new IllegalArgumentException(&quot;Invalid pixel stride&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      size += val;</span><br><span class=\"line\">      val = scanlineStride * (height - 1);//scanlineStride jpeg图片时，默认为12096</span><br><span class=\"line\">      if (val &gt; (Integer.MAX_VALUE - size)) &#123;</span><br><span class=\"line\">          throw new IllegalArgumentException(&quot;Invalid scan stride&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      size += val;</span><br><span class=\"line\">      return size;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> 因此大小为(2+1)+3*(width-1)+12096*(height-1)  god，这是多大的一个内存呀</span><br><span class=\"line\"> public DataBufferByte(int size, int numBanks) &#123;</span><br><span class=\"line\">     super(STABLE, TYPE_BYTE, size, numBanks);</span><br><span class=\"line\">     bankdata = new byte[numBanks][];</span><br><span class=\"line\">     for (int i= 0; i &lt; numBanks; i++) &#123;</span><br><span class=\"line\">         bankdata[i] = new byte[size];</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     data = bankdata[0];</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>如果整个逻辑处理时间是1s， 那么，可以算一下1s并发量多大，需要配置多大的内存了 ！！！</p>\n<p>附：测试数据<br>方案1：<br><img src=\"\\images\\pasted-62.png\" alt=\"upload successful\"><br><img src=\"\\images\\pasted-63.png\" alt=\"upload successful\"><br><img src=\"\\images\\pasted-64.png\" alt=\"upload successful\"></p>\n<p>方案2：<br><img src=\"\\images\\pasted-68.png\" alt=\"upload successful\"><br><img src=\"\\images\\pasted-69.png\" alt=\"upload successful\"><br><img src=\"\\images\\pasted-70.png\" alt=\"upload successful\"><br><img src=\"\\images\\pasted-71.png\" alt=\"upload successful\"><br><img src=\"\\images\\pasted-72.png\" alt=\"upload successful\"><br><img src=\"\\images\\pasted-73.png\" alt=\"upload successful\"><br>方案3：<br><img src=\"\\images\\pasted-65.png\" alt=\"upload successful\"><br><img src=\"\\images\\pasted-66.png\" alt=\"upload successful\"><br><img src=\"\\images\\pasted-67.png\" alt=\"upload successful\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文可结合链接中的文章从GC层面辅助分析！<br><a href=\"https://realxc.github.io/2019/04/09/G1%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8-xx-initiatingheapoccupancypercent%E5%8F%98%E9%87%8F%E4%B9%8B%E9%97%AE/\" target=\"_blank\" rel=\"noopener\">https://realxc.github.io/2019/04/09/G1%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8-xx-initiatingheapoccupancypercent%E5%8F%98%E9%87%8F%E4%B9%8B%E9%97%AE/</a></p>\n<p>背景：由于目前手机像素越来越富裕，导致用户上传图片时过大3-4M甚至以上，且像素较高，如3024*4032，因此，图片压缩功能就势在必行了。</p>\n<p>选型：优先考虑前端压缩，但由于个人对前端无甚兴趣，因此提供了基于java的压缩解决方案。</p>\n<p>目前市面上成熟的压缩工具大致为thumbnailator及simpleimage<br>1、thumbnailator<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t\t&lt;groupId&gt;net.coobird&lt;/groupId&gt;</span><br><span class=\"line\">\t\t&lt;artifactId&gt;thumbnailator&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t&lt;version&gt;0.4.8&lt;/version&gt;</span><br><span class=\"line\"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BufferedImage bufferedImage = Thumbnails.of(input).scale(scale).outputQuality(quality).asBufferedImage();</span><br></pre></td></tr></table></figure>\n<p>  经过使用发现有背景色变红的问题，未着手解决,同时，内存消耗较大</p>\n<p>2、simpleimage<br>参见git<br><a href=\"https://github.com/alibaba/simpleimage\" target=\"_blank\" rel=\"noopener\">https://github.com/alibaba/simpleimage</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;com.sun.media&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;jai-codec&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;1.1.3&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;javax.media&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;jai-core&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;1.1.3&lt;/version&gt;</span><br><span class=\"line\">\t\t&lt;/dependency&gt;</span><br><span class=\"line\">\t\t&lt;dependency&gt;</span><br><span class=\"line\">\t\t\t&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class=\"line\">\t\t\t&lt;artifactId&gt;simpleimage&lt;/artifactId&gt;</span><br><span class=\"line\">\t\t\t&lt;version&gt;1.2.3&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File in = new File(&quot;d://04092.jpg&quot;);      //原图片</span><br><span class=\"line\">            ImageWrapper imageWrapper = ImageReadHelper.read(new FileInputStream(in));</span><br><span class=\"line\">            int witdh = imageWrapper.getWidth();</span><br><span class=\"line\">            int height = imageWrapper.getHeight();</span><br><span class=\"line\">            File out = new File(&quot;d://04092-after.jpg&quot;);       //目的图片</span><br><span class=\"line\">            ScaleParameter scaleParam = new ScaleParameter(Float.valueOf(witdh * 0.5f).intValue()</span><br><span class=\"line\">                    , Float.valueOf(height * 0.5f).intValue());</span><br><span class=\"line\">            WriteParameter writeParam = new WriteParameter();</span><br><span class=\"line\"></span><br><span class=\"line\">            FileInputStream inStream = null;</span><br><span class=\"line\">            FileOutputStream outStream = null;</span><br><span class=\"line\">            ImageRender wr = null;</span><br><span class=\"line\">            inStream = new FileInputStream(in);</span><br><span class=\"line\">            outStream = new FileOutputStream(out);</span><br><span class=\"line\">            ImageRender rr = new ReadRender(inStream);</span><br><span class=\"line\">            ImageRender sr = new ScaleRender(rr, scaleParam);</span><br><span class=\"line\">            wr = new WriteRender(sr, outStream, ImageFormat.JPEG, writeParam);</span><br><span class=\"line\"></span><br><span class=\"line\">            wr.render();                            //触发图像处理</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WriteRender.render()源码：</span><br><span class=\"line\"> @Override</span><br><span class=\"line\">    public ImageWrapper render() throws SimpleImageException &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            if (image == null) &#123;</span><br><span class=\"line\">                image = imageRender.render();//此处读取原文件，大对象</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            ImageWriteHelper.write(image, stream, outputFormat, param);//写文件，数据缓冲区分段初始化，一个按压缩后图片像素大小生产，外加若干512*512及1024*1024的缓冲区，因此需要更多的内存</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            throw new SimpleImageException(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReadRender.render源码， WriteRender中需要首先依赖此类读取原文件</span><br><span class=\"line\">@Override</span><br><span class=\"line\">    public ImageWrapper render() throws SimpleImageException &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            ImageWrapper imgWrapper;</span><br><span class=\"line\">            if (inStream == null) &#123;</span><br><span class=\"line\">                throw new SimpleImageException(&quot;No input set&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            imgWrapper = ImageReadHelper.read(inStream);</span><br><span class=\"line\"></span><br><span class=\"line\">            if (tosRGBColorSpace) &#123;</span><br><span class=\"line\">                for (int i = 0; i &lt; imgWrapper.getNumOfImages(); i++) &#123;</span><br><span class=\"line\">                    PlanarImage img = ImageColorConvertHelper.convert2sRGB(imgWrapper</span><br><span class=\"line\">                            .getAsPlanarImage(i));</span><br><span class=\"line\">                    imgWrapper.setImage(i, img);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            return imgWrapper;</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            throw new SimpleImageException(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    ImageReadHelper.read(inStream)：</span><br><span class=\"line\">    public static ImageWrapper read(InputStream input)</span><br><span class=\"line\">            throws SimpleImageException &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            input = ImageUtils.createMemoryStream(input);//流拷贝，增加了内存使用</span><br><span class=\"line\"></span><br><span class=\"line\">            if (ImageUtils.isJPEG(input)) &#123;</span><br><span class=\"line\">                return readJPEG(input);//此处耗内存</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            if (ImageUtils.isGIF(input)) &#123;</span><br><span class=\"line\">                return readGIF(input);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            return readGeneral(input);</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            throw new SimpleImageException(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>由于simpleimage在read及write阶段做了额外操作，使得单次开辟的大对象比方案1的小，但，多次开辟缓冲区，总内存大小反而需要的更多，结合G1内存分配机制，在内存方面与方案1存在相同问题。</p>\n<p>3、由于上述2个方案存在的问题及本身需求只是缩放图片而且，也用不上它们提供的水印之类的方法，因此，自定义了一个仅支持图片压缩能力的工具包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final static ByteArrayOutputStream scale(InputStream srcImageStream, float scale) throws IOException &#123;</span><br><span class=\"line\">        ByteArrayOutputStream desImageStream = new ByteArrayOutputStream();</span><br><span class=\"line\">        BufferedImage originalImage = ImageIO.read(srcImageStream);</span><br><span class=\"line\">        int width = Float.valueOf(scale * originalImage.getWidth()).intValue();</span><br><span class=\"line\">        int height = Float.valueOf(scale * originalImage.getHeight()).intValue();</span><br><span class=\"line\">        BufferedImage newImage = new BufferedImage(width, height, originalImage.getType());</span><br><span class=\"line\">        Graphics g = newImage.getGraphics();</span><br><span class=\"line\">        g.drawImage(originalImage, 0, 0, width, height, null);</span><br><span class=\"line\">        g.dispose();</span><br><span class=\"line\">        ImageIO.write(newImage, &quot;jpeg&quot;, desImageStream);</span><br><span class=\"line\">        return desImageStream;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>   该方案能在压缩质量得到保证的前提的快速完成压缩，约1s，thumbnailator使用时，约2s。<br>    问题来了：功能上去后，发现内存占用率偶尔超过90%，但垃圾回收后又能绝大数回收，（采用G1回收，只额外配置了暂停时间50ms，堆最大值1536M）因此排除内存泄漏的可能，但功能上去之前未曾出现，初步猜测是图片压缩功能引起的（方案1、3都存在问题，推测2也存在），后经本地java visualVM调试发现， 执行一个大小3M多，像素3024*4032的图片压缩时，会有35M多的老年代被直接使用。因此分析问题在于出现了大对象，大对象会直接分配在老年代，于是通过断点测试结合 java visualVM监控，定位到问题在于：<br>    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BufferedImage originalImage = ImageIO.read(srcImageStream);</span><br></pre></td></tr></table></figure></p>\n<pre><code>此方法创建BufferedImage时，会基于ComponentSampleModel类首先创建数据缓冲区（dataBuffer），而缓冲区大小算法为：\n</code></pre>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private int getBufferSize() &#123;</span><br><span class=\"line\">      int maxBandOff=bandOffsets[0];//jpeg图片，此数组为&#123;2，1，0&#125;</span><br><span class=\"line\">      for (int i=1; i&lt;bandOffsets.length; i++) &#123;</span><br><span class=\"line\">          maxBandOff = Math.max(maxBandOff,bandOffsets[i]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (maxBandOff &lt; 0 || maxBandOff &gt; (Integer.MAX_VALUE - 1)) &#123;</span><br><span class=\"line\">          throw new IllegalArgumentException(&quot;Invalid band offset&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (pixelStride &lt; 0 || pixelStride &gt; (Integer.MAX_VALUE / width)) &#123;</span><br><span class=\"line\">          throw new IllegalArgumentException(&quot;Invalid pixel stride&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (scanlineStride &lt; 0 || scanlineStride &gt; (Integer.MAX_VALUE / height)) &#123;</span><br><span class=\"line\">          throw new IllegalArgumentException(&quot;Invalid scanline stride&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      int size = maxBandOff + 1;</span><br><span class=\"line\">      int val = pixelStride * (width - 1);//pixelStride jpeg图片时，默认为3</span><br><span class=\"line\">      if (val &gt; (Integer.MAX_VALUE - size)) &#123;</span><br><span class=\"line\">          throw new IllegalArgumentException(&quot;Invalid pixel stride&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      size += val;</span><br><span class=\"line\">      val = scanlineStride * (height - 1);//scanlineStride jpeg图片时，默认为12096</span><br><span class=\"line\">      if (val &gt; (Integer.MAX_VALUE - size)) &#123;</span><br><span class=\"line\">          throw new IllegalArgumentException(&quot;Invalid scan stride&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      size += val;</span><br><span class=\"line\">      return size;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> 因此大小为(2+1)+3*(width-1)+12096*(height-1)  god，这是多大的一个内存呀</span><br><span class=\"line\"> public DataBufferByte(int size, int numBanks) &#123;</span><br><span class=\"line\">     super(STABLE, TYPE_BYTE, size, numBanks);</span><br><span class=\"line\">     bankdata = new byte[numBanks][];</span><br><span class=\"line\">     for (int i= 0; i &lt; numBanks; i++) &#123;</span><br><span class=\"line\">         bankdata[i] = new byte[size];</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     data = bankdata[0];</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>如果整个逻辑处理时间是1s， 那么，可以算一下1s并发量多大，需要配置多大的内存了 ！！！</p>\n<p>附：测试数据<br>方案1：<br><img src=\"\\images\\pasted-62.png\" alt=\"upload successful\"><br><img src=\"\\images\\pasted-63.png\" alt=\"upload successful\"><br><img src=\"\\images\\pasted-64.png\" alt=\"upload successful\"></p>\n<p>方案2：<br><img src=\"\\images\\pasted-68.png\" alt=\"upload successful\"><br><img src=\"\\images\\pasted-69.png\" alt=\"upload successful\"><br><img src=\"\\images\\pasted-70.png\" alt=\"upload successful\"><br><img src=\"\\images\\pasted-71.png\" alt=\"upload successful\"><br><img src=\"\\images\\pasted-72.png\" alt=\"upload successful\"><br><img src=\"\\images\\pasted-73.png\" alt=\"upload successful\"><br>方案3：<br><img src=\"\\images\\pasted-65.png\" alt=\"upload successful\"><br><img src=\"\\images\\pasted-66.png\" alt=\"upload successful\"><br><img src=\"\\images\\pasted-67.png\" alt=\"upload successful\"></p>\n"},{"title":"javaagent-bytebuddy","author":"Xiang Chuang","date":"2018-10-31T09:01:00.000Z","_content":"Java agent是在另外一个Java应用（“目标”应用）启动之前要执行的Java程序，这样agent就有机会修改目标应用或者应用所运行的环境。在本文中，我们将会从基础内容开始，逐渐增强其功能，借助字节码操作工具Byte Buddy，使其成为高级的agent实现。\n\n在最基本的用例中，Java agent会用来设置应用属性或者配置特定的环境状态，agent能够作为可重用和可插入的组件。如下的样例描述了这样的一个agent，它设置了一个系统属性，在实际的程序中就可以使用该属性了：\n\npublic class Agent {  public static void premain(String arg) {    System.setProperty(\"my-property\", “foo”);  }}\n\n如上面的代码所述，Java agent的定义与其他的Java程序类似，只不过它使用premain方法替代main方法作为入口点。顾名思义，这个方法能够在目标应用的main方法之前执行。相对于其他的Java程序，编写agent并没有特定的规则。有一个很小的区别在于，Java agent接受一个可选的参数，而不是包含零个或更多参数的数组。\n\n如果要使用这个agent，必须要将agent类和资源打包到jar中，并且在jar的manifest中要将Agent-Class属性设置为包含premain方法的agent类。（agent必须要打包到jar文件中，它不能通过拆解的格式进行指定。）接下来，我们需要启动应用程序，并且在命令行中通过javaagent参数来引用jar文件的位置：\n\njava -javaagent:myAgent.jar -jar myProgram.jar\n\n我们还可以在位置路径上设置可选的agent参数。在下面的命令中会启动一个Java程序并且添加给定的agent，将值myOptions作为参数提供给premain方法：\n\njava -javaagent:myAgent.jar=myOptions -jar myProgram.jar\n\n通过重复使用javaagent命令，能够添加多个agent。\n\n但是，Java agent的功能并不局限于修改应用程序环境的状态，Java agent能够访问Java instrumentation API，这样的话，agent就能修改目标应用程序的代码。Java虚拟机中这个鲜为人知的特性提供了一个强大的工具，有助于实现面向切面的编程。\n\n如果要对Java程序进行这种修改，我们需要在agent的premain方法上添加类型为Instrumentation的第二个参数。Instrumentation参数可以用来执行一系列的任务，比如确定对象以字节为单位的精确大小以及通过注册ClassFileTransformers实际修改类的实现。ClassFileTransformers注册之后，当类加载器（class loader）加载类的时候都会调用它。当它被调用时，在类文件所代表的类加载之前，类文件transformer有机会改变或完全替换这个类文件。按照这种方式，在类使用之前，我们能够增强或修改类的行为，如下面的样例所示：\n\npublic class Agent { public static void premain(String argument, Instrumentation inst) {   inst.addTransformer(new ClassFileTransformer() {     @Override     public byte[] transform(       ClassLoader loader,       String className,       Class<?> classBeingRedefined, // 如果类之前没有加载的话，值为null       ProtectionDomain protectionDomain,       byte[] classFileBuffer) {       // 返回改变后的类文件。     }   }); }}\n\n通过使用Instrumentation实例注册上述的ClassFileTransformer之后，每个类加载的时候，都会调用这个transformer。为了实现这一点，transformer会接受一个二进制和类加载器的引用，分别代表了类文件以及试图加载类的类加载器。\n\nJava agent也可以在Java应用的运行期注册，如果是在这种场景下，instrumentation API允许重新定义已加载的类，这个特性被称之为“HotSwap”。不过，重新定义类仅限于替换方法体。在重新定义类的时候，不能新增或移除类成员，并且类型和签名也不能进行修改。当类第一次加载的时候，并没有这种限制，如果是在这样的场景下，那classBeingRedefined会被设置为null。\n\nJava字节码与类文件格式\n\n类文件代表了Java类编译之后的状态。类文件中会包含字节码，这些字节码代表了Java源码中最初的程序指令。Java字节码可以视为Java虚拟机的语言。实际上，JVM并不会将Java视为编程语言，它只能处理字节码。因为它采用二进制的表现形式，所以相对于程序的源码，它占用的空间更少。除此之外，将程序以字节码的形式进行表现能够更容易地编译Java以外的其他语言，如Scala或Clojure，从而让它们运行在JVM上。如果没有字节码作为中间语言的话，那么其他的程序在运行之前，可能还需要将其转换为Java源码。\n\n但是，在代码处理的时候，这种抽象却带来了一定的成本。如果要将ClassFileTransformer应用到某个类上，那我们不能将该类按照Java源码的形式进行处理，甚至不能假设被转换的代码最初是由Java编写而成的。更糟糕的是，探查类成员或注解的反射API也是禁止使用的，这是因为类加载之前，我们无法访问这些API，而在转换进程完成之前，是无法进行加载的。\n\n所幸的是，Java字节码相对来讲是一个比较简单的抽象形式，它包含了很少量的操作，稍微花点功夫我们就能大致将其掌握起来。Java虚拟机执行程序的时候，会以基于栈的方式来处理值。字节码指令一般会告知虚拟机，需要从操作数栈（operand stack）上弹出值，执行一些操作，然后再将结果压到栈中。\n\n让我们考虑一个简单的样例：将数字1和2进行相加操作。JVM首先会将这两个数字压到栈中，这是通过 iconst_1和iconst_2这两个字节指令实现的。iconst_1是个单字节的便捷运算符（operator），它会将数字1压到栈中。与之类似，iconst_2会将数字2压到栈中。然后，会执行iadd指令，它会将栈中最新的两个值弹出，将它们求和计算的结果重新压到栈中。在类文件中，每个指令并不是以其易于记忆的名称进行存储的，而是以一个字节的形式进行存储，这个字节能够唯一地标记特定的指令，这也是bytecode这个术语的来历。上文所述的字节码指令及其对操作数栈的影响，通过下面的图片进行了可视化。\n\n![upload successful](\\images\\pasted-54.png)\n\n对于人类用户来讲，会更喜欢源码而不是字节码，不过幸运的是Java社区创建了多个库，能够解析类文件并将紧凑的字节码暴露为具有名称的指令流。例如，流行的ASM库提供了一个简单的visitor API，它能够将类文件剖析为成员和方法指令，其操作方式类似于阅读XML文件时的SAX解析器。如果使用ASM的话，那上述样例中的字节码可以按照如下的代码来进行实现（在这里，ASM方式的指令是visitIns，能够提供修正的方法实现）：\n\nMethodVisitor methodVisitor = ...methodVisitor.visitIns(Opcodes.ICONST_1);methodVisitor.visitIns(Opcodes.ICONST_2);methodVisitor.visitIns(Opcodes.IADD);\n\n需要注意的是，字节码规范只不过是一种比喻的说法（metaphor），因为Java虚拟机允许将程序转换为优化后的机器码（machine code），只要程序的输出能够保证是正确的即可。因为字节码的简洁性，所以在已有的类中取代和修改指令是很简单直接的。因此，使用ASM及其底层的Java字节码基础就足以实现类转换的Java agent，这需要注册一个ClassFileTransformer，它会使用这个库来处理其参数。\n\n克服字节码的不足\n\n对于实际的应用来讲，解析原始的类文件依然意味着有很多的手动工作。Java程序员通常感兴趣的是类型层级结构中的类。例如，某个Java agent可能需要修改所有实现给定接口的类。如果要确定某个类的超类，那只靠解析ClassFileTransformer所给定的类文件就不够了，类文件中只包含了直接超类和接口的名字。为了解析可能的超类型关联关系，程序员依然需要定位这些类型的类文件。\n\n在项目中直接使用ASM的另外一个困难在于，团队中需要有开发人员学习Java字节码的基础知识。在实践中，这往往会导致很多的开发人员不敢再去修改字节码操作相关的代码。如果这样的话，实现Java agent很容易为项目的长期维护带来风险。\n\n为了克服这些问题，我们最好使用较高层级的抽象来实现Java agent，而不是直接操作Java字节码。Byte Buddy是开源的、基于Apache 2.0许可证的库，它致力于解决字节码操作和instrumentation API的复杂性。Byte Buddy所声称的目标是将显式的字节码操作隐藏在一个类型安全的领域特定语言背后。通过使用Byte Buddy，任何熟悉Java编程语言的人都有望非常容易地进行字节码操作。\n\nByte Buddy简介\n\nByte Buddy的目的并不仅仅是为了生成Java agent。它提供了一个API用于生成任意的Java类，基于这个生成类的API，Byte Buddy提供了额外的API来生成Java agent。\n\n作为Byte Buddy的简介，如下的样例展现了如何生成一个简单的类，这个类是Object的子类，并且重写了toString方法，用来返回“Hello World!”。与原始的ASM类似，“intercept”会告诉Byte Buddy为拦截到的指令提供方法实现：\n\nClass<?> dynamicType = new ByteBuddy()  .subclass(Object.class)  .method(ElementMatchers.named(\"toString\"))  .intercept(FixedValue.value(\"Hello World!\"))  .make()  .load(getClass().getClassLoader(),                  ClassLoadingStrategy.Default.WRAPPER)  .getLoaded();\n\n从上面的代码中，我们可以看到Byte Buddy要实现一个方法分为两步。首先，编程人员需要指定一个ElementMatcher，它负责识别一个或多个需要实现的方法。Byte Buddy提供了功能丰富的预定义拦截器（interceptor），它们暴露在ElementMatchers类中。在上述的例子中，toString方法完全精确匹配了名称，但是，我们也可以匹配更为复杂的代码结构，如类型或注解。\n\n当Byte Buddy生成类的时候，它会分析所生成类型的类层级结构。在上述的例子中，Byte Buddy能够确定所生成的类要继承其超类Object的名为toString的方法，指定的匹配器会要求Byte Buddy重写该方法，这是通过随后的 Implementation 实例实现的，在我们的样例中，这个实例也就是FixedValue。\n\n当创建子类的时候，Byte Buddy始终会拦截（intercept）一个匹配的方法，在生成的类中重写该方法。但是，我们在本文稍后将会看到Byte Buddy还能够重新定义已有的类，而不必通过子类的方式来实现。在这种情况下，Byte Buddy会将已有的代码替换为生成的代码，而将原有的代码复制到另外一个合成的（synthetic）方法中。\n\n在我们上面的代码样例中，匹配的方法进行了重写，在实现里面，返回了固定的值“Hello World!”。intercept方法接受Implementation类型的参数，Byte Buddy自带了多个预先定义的实现，如上文所使用的FixedValue类。但是，如果需要的话，可以使用前文所述的ASM API将某个方法实现为自定义的字节码，Byte Buddy本身也是基于ASM API实现的。\n\n定义完类的属性之后，就能通过make方法来进行生成。在样例应用中，因为用户没有指定类名，所以生成的类会给定一个任意的名称。最终，生成的类将会使用ClassLoadingStrategy来进行加载。通过使用上述的默认 WRAPPER策略，类将会使用一个新的类加载器进行加载，这个类加载器会使用环境类加载器作为父加载器。\n\n类加载之后，使用Java反射API就可以访问它了。如果没有指定其他构造器的话，Byte Buddy将会生成类似于父类的构造器，因此生成的类可以使用默认的构造器。这样，我们就可以检验生成的类重写了 toString方法，如下面的代码所示：\n\nassertThat(dynamicType.newInstance().toString(),            is(\"Hello World!\"));\n\n当然，这个生成的类并没有太大的用处。对于实际的应用来讲，大多数方法的返回值是在运行时计算的，这个计算过程要依赖于方法的参数和对象的状态。\n\n通过委托实现Instrumentation\n\n要实现某个方法，有一种更为灵活的方式，那就是使用Byte Buddy的MethodDelegation。通过使用方法委托，在生成重写的实现时，我们就有可能调用给定类和实例的其他方法。按照这种方式，我们可以使用如下的委托器（delegator）重新编写上述的样例：\n\nclass ToStringInterceptor {  static String intercept() {    return “Hello World!”;  }}\n\n借助上面的POJO拦截器，我们就可以将之前的FixedValue实现替换为MethodDelegation.to(ToStringInterceptor.class)：\n\nClass<?> dynamicType = new ByteBuddy()  .subclass(Object.class)  .method(ElementMatchers.named(\"toString\"))  .intercept(MethodDelegation.to(ToStringInterceptor.class))  .make()  .load(getClass().getClassLoader(),                  ClassLoadingStrategy.Default.WRAPPER)  .getLoaded();\n\n使用上述的委托器，Byte Buddy会在to方法所给定的拦截目标中，确定最优的调用方法。就ToStringInterceptor.class来讲，选择过程只是非常简单地解析这个类型的唯一静态方法而已。在本例中，只会考虑一个静态方法，因为委托的目标中指定的是一个类。与之不同的是，我们还可以将其委托给某个类的实例，如果是这样的话，Byte Buddy将会考虑所有的虚方法（virtual method）。如果类或实例上有多个这样的方法，那么Byte Buddy首先会排除掉所有与指定instrumentation不兼容的方法。在剩余的方法中，库将会选择最佳的匹配者，通常来讲这会是参数最多的方法。我们还可以显式地指定目标方法，这需要缩小合法方法的范围，将ElementMatcher传递到MethodDelegation中，就会进行方法的过滤。例如，通过添加如下的filter，Byte Buddy只会将名为“intercept”的方法视为委托目标：\n\nMethodDelegation.to(ToStringInterceptor.class)                .filter(ElementMatchers.named(“intercept”))\n\n执行上面的拦截之后，被拦截到的方法依然会打印出“Hello World!”，但是这次的结果是动态计算的，这样的话，我们就可以在拦截器方法上设置断点，所生成的类每次调用toString时，都会触发拦截器的方法。\n\n当我们为拦截器方法设置参数时，就能释放出MethodDelegation的全部威力。这里的参数通常是带有注解的，用来要求Byte Buddy在调用拦截器方法时，注入某个特定的值。例如，通过使用@Origin注解，Byte Buddy提供了添加instrument功能的方法的实例，将其作为Java反射API中类的实例：\n\nclass ContextualToStringInterceptor {  static String intercept(@Origin Method m) {    return “Hello World from ” + m.getName() + “!”;  }}\n\n当拦截toString方法时，对instrument方法的调用将会返回“Hello world from toString!”。\n\n除了@Origin注解以外，Byte Buddy提供了一组功能丰富的注解。例如，通过在类型为Callable的参数上使用@Super注解，Byte Buddy会创建并注入一个代理实例，它能够调用被instrument方法的原始代码。如果对于特定的用户场景，所提供的注解不能满足需求或者不太适合的话，我们甚至能够注册自定义的注解，让这些注解注入用户特定的值。\n\n实现方法级别的安全性\n\n可以看到，我们在运行时可以借助简单的Java代码，使用MethodDelegation来动态重写某个方法。这只是一个简单的样例，但是这项技术可以用到更加实际的应用之中。在本文剩余的内容中，我们将会开发一个样例，它会使用代码生成技术实现一个注解驱动的库，用来限制方法级别的安全性。在我们的第一个迭代中，这个库会通过生成子类的方式来限制安全性。然后，我们将会采取相同的方式来实现Java agent，完成相同的功能。\n\n样例库会使用如下的注解，允许用户指定某个方法需要考虑安全因素：\n\n@interface Secured {  String user();}\n\n例如，假设应用需要使用如下的Service类来执行敏感操作，并且只有用户被认证为管理员才能执行该方法。这是通过为执行这个操作的方法声明Secured注解来指定的：\n\nclass Service {  @Secured(user = “ADMIN”)  void doSensitiveAction() {    // 运行敏感代码...  }}\n\n我们当然可以将安全检查直接编写到方法中。在实际中，硬编码横切关注点往往会导致复制-粘贴的逻辑，使其难以维护。另外，一旦应用需要涉及额外的需求时，如日志、收集调用指标或结果缓存，直接添加这样的代码扩展性不会很好。通过将这样的功能抽取到agent中，方法就能很纯粹地关注其业务逻辑，使得代码库能够更易于阅读、测试和维护。\n\n为了让我们规划的库保持尽可能得简单，按照注解的协议声明，如果当前用户不具备注解的用户属性时，将会抛出IllegalStateException异常。通过使用Byte Buddy，这种行为可以用一个简单的拦截器来实现，如下面样例中的SecurityInterceptor所示，它会通过其静态的user域，跟踪当前用户已经进行了登录：\n\nclass SecurityInterceptor {  static String user = “ANONYMOUS”  static void intercept(@Origin Method method) {    if (!method.getAnnotation(Secured.class).user().equals(user)) {      throw new IllegalStateException(“Wrong user”);    }  }}\n\n通过上面的代码，我们可以看到，即便给定用户授予了访问权限，拦截器也没有调用原始的方法。为了解决这个问题，Byte Buddy有很多预定义的方法可以实现功能的链接。借助MethodDelegation类的andThen方法，上述的安全检查可以放到原始方法的调用之前，如下面的代码所示。如果用户没有进行认证的话，安全检查将会抛出异常并阻止后续的执行，因此原始方法将不会执行。\n\n将这些功能集合在一起，我们就能生成Service的一个子类，所有带有注解方法的都能恰当地进行安全保护。因为所生成的类是Service的子类，所以它能够替代所有类型为Service的变量，并不需要任何的类型转换，如果没有恰当认证的话，调用doSensitiveAction方法就会抛出异常：\n\nnew ByteBuddy()  .subclass(Service.class)  .method(ElementMatchers.isAnnotatedBy(Secured.class))  .intercept(MethodDelegation.to(SecurityInterceptor.class)                             .andThen(SuperMethodCall.INSTANCE)))  .make()  .load(getClass().getClassLoader(),           ClassLoadingStrategy.Default.WRAPPER)  .getLoaded()  .newInstance()  .doSensitiveAction();\n\n不过坏消息是，因为实现instrumentation功能的子类是在运行时创建的，所以除了使用Java反射以外，没有其他办法创建这样的实例。因此，所有instrumentation类的实例都应该通过一个工厂来创建，这个工厂会封装创建instrumentation子类的复杂性。这样造成的结果就是，子类instrumentation通常会用于框架之中，这些框架本身就需要通过工厂来创建实例，例如，像依赖管理的框架Spring或对象-关系映射的框架Hibernate，而对于其他类型的应用来讲，子类instrumentation实现起来通常过于复杂。\n\n实现安全功能的Java agent\n\n通过使用Java agent，上述安全框架的一个替代实现将会修改Service类的原始字节码，而不是重写它。这样做的话，我们就没有必要创建托管的实例了，只需简单地调用\n\nnew Service().doSensitiveAction()\n\n即可，如果对应的用户没有进行认证的话，就会抛出异常。为了支持这种方式，Byte Buddy提供一种称之为rebase某个类的理念。当rebase某个类的时候，不会创建子类，所采用的策略是实现instrumentation功能的代码将会合并到被instrument的类中，从而改变其行为。在添加instrumentation功能之后，在被instrument的类中，其所有方法的原始代码均可进行访问，因此像SuperMethodCall这样的instrumentation，工作方式与创建子类是完全一样的。\n\n创建子类与rebase的行为是非常类似的，所以两种操作的API执行方式是一致的，都会使用相同的DynamicType.Builder接口来描述某个类型。两种形式的instrumentation都可以通过ByteBuddy类来进行访问。为了使Java agent的定义更加便利，Byte Buddy还提供了 AgentBuilder类，它希望能够以一种简洁的方式应对一些通用的用户场景。为了定义Java agent实现方法级别的安全性，将如下的类定义为agent的入口点就足以完成该功能了：\n\nclass SecurityAgent {  public static void premain(String arg, Instrumentation inst) {    new AgentBuilder.Default()    .type(ElementMatchers.any())    .transform((builder, type) -> builder    .method(ElementMatchers.isAnnotatedBy(Secured.class)    .intercept(MethodDelegation.to(SecurityInterceptor.class)               .andThen(SuperMethodCall.INSTANCE))))    .installOn(inst);  }}\n\n如果将这个agent打包为jar文件并在命令行中进行指定，那么所有带有Secured注解的方法将会进行“转换”或重定义，从而实现安全保护。如果不激活这个Java agent的话，应用在运行时就不包含额外的安全检查。当然，这意味着如果对带有注解的代码进行单元测试的话，这些方法的调用并不需要特殊的搭建过程来模拟安全上下文。Java运行时会忽略掉无法在classpath中找到的注解类型，因此在运行带有注解的方法时，我们甚至完全可以在应用中移除掉安全库。\n\n另外一项优势在于，Java agent能够很容易地进行叠加。如果在命令行中指定多个Java agent的话，每个agent都有机会对类进行修改，其顺序就是在命令行中所指定的顺序。例如，我们可以采取这种方式将安全、日志以及监控框架联合在一起，而不需要在这些应用间增添任何形式的集成层。因此，使用Java agent实现横切的关注点提供了一种更为模块化的代码编写方式，而不必针对某个管理实例的中心框架来集成所有的代码。\n\n查看英文原文：Easily Create Java Agents with Byte Buddy\n","source":"_posts/javaagent-bytebuddy.md","raw":"title: javaagent-bytebuddy\nauthor: Xiang Chuang\ntags:\n  - javaagent\n  - bytebuddy\ncategories:\n  - 外部引用\ndate: 2018-10-31 17:01:00\n---\nJava agent是在另外一个Java应用（“目标”应用）启动之前要执行的Java程序，这样agent就有机会修改目标应用或者应用所运行的环境。在本文中，我们将会从基础内容开始，逐渐增强其功能，借助字节码操作工具Byte Buddy，使其成为高级的agent实现。\n\n在最基本的用例中，Java agent会用来设置应用属性或者配置特定的环境状态，agent能够作为可重用和可插入的组件。如下的样例描述了这样的一个agent，它设置了一个系统属性，在实际的程序中就可以使用该属性了：\n\npublic class Agent {  public static void premain(String arg) {    System.setProperty(\"my-property\", “foo”);  }}\n\n如上面的代码所述，Java agent的定义与其他的Java程序类似，只不过它使用premain方法替代main方法作为入口点。顾名思义，这个方法能够在目标应用的main方法之前执行。相对于其他的Java程序，编写agent并没有特定的规则。有一个很小的区别在于，Java agent接受一个可选的参数，而不是包含零个或更多参数的数组。\n\n如果要使用这个agent，必须要将agent类和资源打包到jar中，并且在jar的manifest中要将Agent-Class属性设置为包含premain方法的agent类。（agent必须要打包到jar文件中，它不能通过拆解的格式进行指定。）接下来，我们需要启动应用程序，并且在命令行中通过javaagent参数来引用jar文件的位置：\n\njava -javaagent:myAgent.jar -jar myProgram.jar\n\n我们还可以在位置路径上设置可选的agent参数。在下面的命令中会启动一个Java程序并且添加给定的agent，将值myOptions作为参数提供给premain方法：\n\njava -javaagent:myAgent.jar=myOptions -jar myProgram.jar\n\n通过重复使用javaagent命令，能够添加多个agent。\n\n但是，Java agent的功能并不局限于修改应用程序环境的状态，Java agent能够访问Java instrumentation API，这样的话，agent就能修改目标应用程序的代码。Java虚拟机中这个鲜为人知的特性提供了一个强大的工具，有助于实现面向切面的编程。\n\n如果要对Java程序进行这种修改，我们需要在agent的premain方法上添加类型为Instrumentation的第二个参数。Instrumentation参数可以用来执行一系列的任务，比如确定对象以字节为单位的精确大小以及通过注册ClassFileTransformers实际修改类的实现。ClassFileTransformers注册之后，当类加载器（class loader）加载类的时候都会调用它。当它被调用时，在类文件所代表的类加载之前，类文件transformer有机会改变或完全替换这个类文件。按照这种方式，在类使用之前，我们能够增强或修改类的行为，如下面的样例所示：\n\npublic class Agent { public static void premain(String argument, Instrumentation inst) {   inst.addTransformer(new ClassFileTransformer() {     @Override     public byte[] transform(       ClassLoader loader,       String className,       Class<?> classBeingRedefined, // 如果类之前没有加载的话，值为null       ProtectionDomain protectionDomain,       byte[] classFileBuffer) {       // 返回改变后的类文件。     }   }); }}\n\n通过使用Instrumentation实例注册上述的ClassFileTransformer之后，每个类加载的时候，都会调用这个transformer。为了实现这一点，transformer会接受一个二进制和类加载器的引用，分别代表了类文件以及试图加载类的类加载器。\n\nJava agent也可以在Java应用的运行期注册，如果是在这种场景下，instrumentation API允许重新定义已加载的类，这个特性被称之为“HotSwap”。不过，重新定义类仅限于替换方法体。在重新定义类的时候，不能新增或移除类成员，并且类型和签名也不能进行修改。当类第一次加载的时候，并没有这种限制，如果是在这样的场景下，那classBeingRedefined会被设置为null。\n\nJava字节码与类文件格式\n\n类文件代表了Java类编译之后的状态。类文件中会包含字节码，这些字节码代表了Java源码中最初的程序指令。Java字节码可以视为Java虚拟机的语言。实际上，JVM并不会将Java视为编程语言，它只能处理字节码。因为它采用二进制的表现形式，所以相对于程序的源码，它占用的空间更少。除此之外，将程序以字节码的形式进行表现能够更容易地编译Java以外的其他语言，如Scala或Clojure，从而让它们运行在JVM上。如果没有字节码作为中间语言的话，那么其他的程序在运行之前，可能还需要将其转换为Java源码。\n\n但是，在代码处理的时候，这种抽象却带来了一定的成本。如果要将ClassFileTransformer应用到某个类上，那我们不能将该类按照Java源码的形式进行处理，甚至不能假设被转换的代码最初是由Java编写而成的。更糟糕的是，探查类成员或注解的反射API也是禁止使用的，这是因为类加载之前，我们无法访问这些API，而在转换进程完成之前，是无法进行加载的。\n\n所幸的是，Java字节码相对来讲是一个比较简单的抽象形式，它包含了很少量的操作，稍微花点功夫我们就能大致将其掌握起来。Java虚拟机执行程序的时候，会以基于栈的方式来处理值。字节码指令一般会告知虚拟机，需要从操作数栈（operand stack）上弹出值，执行一些操作，然后再将结果压到栈中。\n\n让我们考虑一个简单的样例：将数字1和2进行相加操作。JVM首先会将这两个数字压到栈中，这是通过 iconst_1和iconst_2这两个字节指令实现的。iconst_1是个单字节的便捷运算符（operator），它会将数字1压到栈中。与之类似，iconst_2会将数字2压到栈中。然后，会执行iadd指令，它会将栈中最新的两个值弹出，将它们求和计算的结果重新压到栈中。在类文件中，每个指令并不是以其易于记忆的名称进行存储的，而是以一个字节的形式进行存储，这个字节能够唯一地标记特定的指令，这也是bytecode这个术语的来历。上文所述的字节码指令及其对操作数栈的影响，通过下面的图片进行了可视化。\n\n![upload successful](\\images\\pasted-54.png)\n\n对于人类用户来讲，会更喜欢源码而不是字节码，不过幸运的是Java社区创建了多个库，能够解析类文件并将紧凑的字节码暴露为具有名称的指令流。例如，流行的ASM库提供了一个简单的visitor API，它能够将类文件剖析为成员和方法指令，其操作方式类似于阅读XML文件时的SAX解析器。如果使用ASM的话，那上述样例中的字节码可以按照如下的代码来进行实现（在这里，ASM方式的指令是visitIns，能够提供修正的方法实现）：\n\nMethodVisitor methodVisitor = ...methodVisitor.visitIns(Opcodes.ICONST_1);methodVisitor.visitIns(Opcodes.ICONST_2);methodVisitor.visitIns(Opcodes.IADD);\n\n需要注意的是，字节码规范只不过是一种比喻的说法（metaphor），因为Java虚拟机允许将程序转换为优化后的机器码（machine code），只要程序的输出能够保证是正确的即可。因为字节码的简洁性，所以在已有的类中取代和修改指令是很简单直接的。因此，使用ASM及其底层的Java字节码基础就足以实现类转换的Java agent，这需要注册一个ClassFileTransformer，它会使用这个库来处理其参数。\n\n克服字节码的不足\n\n对于实际的应用来讲，解析原始的类文件依然意味着有很多的手动工作。Java程序员通常感兴趣的是类型层级结构中的类。例如，某个Java agent可能需要修改所有实现给定接口的类。如果要确定某个类的超类，那只靠解析ClassFileTransformer所给定的类文件就不够了，类文件中只包含了直接超类和接口的名字。为了解析可能的超类型关联关系，程序员依然需要定位这些类型的类文件。\n\n在项目中直接使用ASM的另外一个困难在于，团队中需要有开发人员学习Java字节码的基础知识。在实践中，这往往会导致很多的开发人员不敢再去修改字节码操作相关的代码。如果这样的话，实现Java agent很容易为项目的长期维护带来风险。\n\n为了克服这些问题，我们最好使用较高层级的抽象来实现Java agent，而不是直接操作Java字节码。Byte Buddy是开源的、基于Apache 2.0许可证的库，它致力于解决字节码操作和instrumentation API的复杂性。Byte Buddy所声称的目标是将显式的字节码操作隐藏在一个类型安全的领域特定语言背后。通过使用Byte Buddy，任何熟悉Java编程语言的人都有望非常容易地进行字节码操作。\n\nByte Buddy简介\n\nByte Buddy的目的并不仅仅是为了生成Java agent。它提供了一个API用于生成任意的Java类，基于这个生成类的API，Byte Buddy提供了额外的API来生成Java agent。\n\n作为Byte Buddy的简介，如下的样例展现了如何生成一个简单的类，这个类是Object的子类，并且重写了toString方法，用来返回“Hello World!”。与原始的ASM类似，“intercept”会告诉Byte Buddy为拦截到的指令提供方法实现：\n\nClass<?> dynamicType = new ByteBuddy()  .subclass(Object.class)  .method(ElementMatchers.named(\"toString\"))  .intercept(FixedValue.value(\"Hello World!\"))  .make()  .load(getClass().getClassLoader(),                  ClassLoadingStrategy.Default.WRAPPER)  .getLoaded();\n\n从上面的代码中，我们可以看到Byte Buddy要实现一个方法分为两步。首先，编程人员需要指定一个ElementMatcher，它负责识别一个或多个需要实现的方法。Byte Buddy提供了功能丰富的预定义拦截器（interceptor），它们暴露在ElementMatchers类中。在上述的例子中，toString方法完全精确匹配了名称，但是，我们也可以匹配更为复杂的代码结构，如类型或注解。\n\n当Byte Buddy生成类的时候，它会分析所生成类型的类层级结构。在上述的例子中，Byte Buddy能够确定所生成的类要继承其超类Object的名为toString的方法，指定的匹配器会要求Byte Buddy重写该方法，这是通过随后的 Implementation 实例实现的，在我们的样例中，这个实例也就是FixedValue。\n\n当创建子类的时候，Byte Buddy始终会拦截（intercept）一个匹配的方法，在生成的类中重写该方法。但是，我们在本文稍后将会看到Byte Buddy还能够重新定义已有的类，而不必通过子类的方式来实现。在这种情况下，Byte Buddy会将已有的代码替换为生成的代码，而将原有的代码复制到另外一个合成的（synthetic）方法中。\n\n在我们上面的代码样例中，匹配的方法进行了重写，在实现里面，返回了固定的值“Hello World!”。intercept方法接受Implementation类型的参数，Byte Buddy自带了多个预先定义的实现，如上文所使用的FixedValue类。但是，如果需要的话，可以使用前文所述的ASM API将某个方法实现为自定义的字节码，Byte Buddy本身也是基于ASM API实现的。\n\n定义完类的属性之后，就能通过make方法来进行生成。在样例应用中，因为用户没有指定类名，所以生成的类会给定一个任意的名称。最终，生成的类将会使用ClassLoadingStrategy来进行加载。通过使用上述的默认 WRAPPER策略，类将会使用一个新的类加载器进行加载，这个类加载器会使用环境类加载器作为父加载器。\n\n类加载之后，使用Java反射API就可以访问它了。如果没有指定其他构造器的话，Byte Buddy将会生成类似于父类的构造器，因此生成的类可以使用默认的构造器。这样，我们就可以检验生成的类重写了 toString方法，如下面的代码所示：\n\nassertThat(dynamicType.newInstance().toString(),            is(\"Hello World!\"));\n\n当然，这个生成的类并没有太大的用处。对于实际的应用来讲，大多数方法的返回值是在运行时计算的，这个计算过程要依赖于方法的参数和对象的状态。\n\n通过委托实现Instrumentation\n\n要实现某个方法，有一种更为灵活的方式，那就是使用Byte Buddy的MethodDelegation。通过使用方法委托，在生成重写的实现时，我们就有可能调用给定类和实例的其他方法。按照这种方式，我们可以使用如下的委托器（delegator）重新编写上述的样例：\n\nclass ToStringInterceptor {  static String intercept() {    return “Hello World!”;  }}\n\n借助上面的POJO拦截器，我们就可以将之前的FixedValue实现替换为MethodDelegation.to(ToStringInterceptor.class)：\n\nClass<?> dynamicType = new ByteBuddy()  .subclass(Object.class)  .method(ElementMatchers.named(\"toString\"))  .intercept(MethodDelegation.to(ToStringInterceptor.class))  .make()  .load(getClass().getClassLoader(),                  ClassLoadingStrategy.Default.WRAPPER)  .getLoaded();\n\n使用上述的委托器，Byte Buddy会在to方法所给定的拦截目标中，确定最优的调用方法。就ToStringInterceptor.class来讲，选择过程只是非常简单地解析这个类型的唯一静态方法而已。在本例中，只会考虑一个静态方法，因为委托的目标中指定的是一个类。与之不同的是，我们还可以将其委托给某个类的实例，如果是这样的话，Byte Buddy将会考虑所有的虚方法（virtual method）。如果类或实例上有多个这样的方法，那么Byte Buddy首先会排除掉所有与指定instrumentation不兼容的方法。在剩余的方法中，库将会选择最佳的匹配者，通常来讲这会是参数最多的方法。我们还可以显式地指定目标方法，这需要缩小合法方法的范围，将ElementMatcher传递到MethodDelegation中，就会进行方法的过滤。例如，通过添加如下的filter，Byte Buddy只会将名为“intercept”的方法视为委托目标：\n\nMethodDelegation.to(ToStringInterceptor.class)                .filter(ElementMatchers.named(“intercept”))\n\n执行上面的拦截之后，被拦截到的方法依然会打印出“Hello World!”，但是这次的结果是动态计算的，这样的话，我们就可以在拦截器方法上设置断点，所生成的类每次调用toString时，都会触发拦截器的方法。\n\n当我们为拦截器方法设置参数时，就能释放出MethodDelegation的全部威力。这里的参数通常是带有注解的，用来要求Byte Buddy在调用拦截器方法时，注入某个特定的值。例如，通过使用@Origin注解，Byte Buddy提供了添加instrument功能的方法的实例，将其作为Java反射API中类的实例：\n\nclass ContextualToStringInterceptor {  static String intercept(@Origin Method m) {    return “Hello World from ” + m.getName() + “!”;  }}\n\n当拦截toString方法时，对instrument方法的调用将会返回“Hello world from toString!”。\n\n除了@Origin注解以外，Byte Buddy提供了一组功能丰富的注解。例如，通过在类型为Callable的参数上使用@Super注解，Byte Buddy会创建并注入一个代理实例，它能够调用被instrument方法的原始代码。如果对于特定的用户场景，所提供的注解不能满足需求或者不太适合的话，我们甚至能够注册自定义的注解，让这些注解注入用户特定的值。\n\n实现方法级别的安全性\n\n可以看到，我们在运行时可以借助简单的Java代码，使用MethodDelegation来动态重写某个方法。这只是一个简单的样例，但是这项技术可以用到更加实际的应用之中。在本文剩余的内容中，我们将会开发一个样例，它会使用代码生成技术实现一个注解驱动的库，用来限制方法级别的安全性。在我们的第一个迭代中，这个库会通过生成子类的方式来限制安全性。然后，我们将会采取相同的方式来实现Java agent，完成相同的功能。\n\n样例库会使用如下的注解，允许用户指定某个方法需要考虑安全因素：\n\n@interface Secured {  String user();}\n\n例如，假设应用需要使用如下的Service类来执行敏感操作，并且只有用户被认证为管理员才能执行该方法。这是通过为执行这个操作的方法声明Secured注解来指定的：\n\nclass Service {  @Secured(user = “ADMIN”)  void doSensitiveAction() {    // 运行敏感代码...  }}\n\n我们当然可以将安全检查直接编写到方法中。在实际中，硬编码横切关注点往往会导致复制-粘贴的逻辑，使其难以维护。另外，一旦应用需要涉及额外的需求时，如日志、收集调用指标或结果缓存，直接添加这样的代码扩展性不会很好。通过将这样的功能抽取到agent中，方法就能很纯粹地关注其业务逻辑，使得代码库能够更易于阅读、测试和维护。\n\n为了让我们规划的库保持尽可能得简单，按照注解的协议声明，如果当前用户不具备注解的用户属性时，将会抛出IllegalStateException异常。通过使用Byte Buddy，这种行为可以用一个简单的拦截器来实现，如下面样例中的SecurityInterceptor所示，它会通过其静态的user域，跟踪当前用户已经进行了登录：\n\nclass SecurityInterceptor {  static String user = “ANONYMOUS”  static void intercept(@Origin Method method) {    if (!method.getAnnotation(Secured.class).user().equals(user)) {      throw new IllegalStateException(“Wrong user”);    }  }}\n\n通过上面的代码，我们可以看到，即便给定用户授予了访问权限，拦截器也没有调用原始的方法。为了解决这个问题，Byte Buddy有很多预定义的方法可以实现功能的链接。借助MethodDelegation类的andThen方法，上述的安全检查可以放到原始方法的调用之前，如下面的代码所示。如果用户没有进行认证的话，安全检查将会抛出异常并阻止后续的执行，因此原始方法将不会执行。\n\n将这些功能集合在一起，我们就能生成Service的一个子类，所有带有注解方法的都能恰当地进行安全保护。因为所生成的类是Service的子类，所以它能够替代所有类型为Service的变量，并不需要任何的类型转换，如果没有恰当认证的话，调用doSensitiveAction方法就会抛出异常：\n\nnew ByteBuddy()  .subclass(Service.class)  .method(ElementMatchers.isAnnotatedBy(Secured.class))  .intercept(MethodDelegation.to(SecurityInterceptor.class)                             .andThen(SuperMethodCall.INSTANCE)))  .make()  .load(getClass().getClassLoader(),           ClassLoadingStrategy.Default.WRAPPER)  .getLoaded()  .newInstance()  .doSensitiveAction();\n\n不过坏消息是，因为实现instrumentation功能的子类是在运行时创建的，所以除了使用Java反射以外，没有其他办法创建这样的实例。因此，所有instrumentation类的实例都应该通过一个工厂来创建，这个工厂会封装创建instrumentation子类的复杂性。这样造成的结果就是，子类instrumentation通常会用于框架之中，这些框架本身就需要通过工厂来创建实例，例如，像依赖管理的框架Spring或对象-关系映射的框架Hibernate，而对于其他类型的应用来讲，子类instrumentation实现起来通常过于复杂。\n\n实现安全功能的Java agent\n\n通过使用Java agent，上述安全框架的一个替代实现将会修改Service类的原始字节码，而不是重写它。这样做的话，我们就没有必要创建托管的实例了，只需简单地调用\n\nnew Service().doSensitiveAction()\n\n即可，如果对应的用户没有进行认证的话，就会抛出异常。为了支持这种方式，Byte Buddy提供一种称之为rebase某个类的理念。当rebase某个类的时候，不会创建子类，所采用的策略是实现instrumentation功能的代码将会合并到被instrument的类中，从而改变其行为。在添加instrumentation功能之后，在被instrument的类中，其所有方法的原始代码均可进行访问，因此像SuperMethodCall这样的instrumentation，工作方式与创建子类是完全一样的。\n\n创建子类与rebase的行为是非常类似的，所以两种操作的API执行方式是一致的，都会使用相同的DynamicType.Builder接口来描述某个类型。两种形式的instrumentation都可以通过ByteBuddy类来进行访问。为了使Java agent的定义更加便利，Byte Buddy还提供了 AgentBuilder类，它希望能够以一种简洁的方式应对一些通用的用户场景。为了定义Java agent实现方法级别的安全性，将如下的类定义为agent的入口点就足以完成该功能了：\n\nclass SecurityAgent {  public static void premain(String arg, Instrumentation inst) {    new AgentBuilder.Default()    .type(ElementMatchers.any())    .transform((builder, type) -> builder    .method(ElementMatchers.isAnnotatedBy(Secured.class)    .intercept(MethodDelegation.to(SecurityInterceptor.class)               .andThen(SuperMethodCall.INSTANCE))))    .installOn(inst);  }}\n\n如果将这个agent打包为jar文件并在命令行中进行指定，那么所有带有Secured注解的方法将会进行“转换”或重定义，从而实现安全保护。如果不激活这个Java agent的话，应用在运行时就不包含额外的安全检查。当然，这意味着如果对带有注解的代码进行单元测试的话，这些方法的调用并不需要特殊的搭建过程来模拟安全上下文。Java运行时会忽略掉无法在classpath中找到的注解类型，因此在运行带有注解的方法时，我们甚至完全可以在应用中移除掉安全库。\n\n另外一项优势在于，Java agent能够很容易地进行叠加。如果在命令行中指定多个Java agent的话，每个agent都有机会对类进行修改，其顺序就是在命令行中所指定的顺序。例如，我们可以采取这种方式将安全、日志以及监控框架联合在一起，而不需要在这些应用间增添任何形式的集成层。因此，使用Java agent实现横切的关注点提供了一种更为模块化的代码编写方式，而不必针对某个管理实例的中心框架来集成所有的代码。\n\n查看英文原文：Easily Create Java Agents with Byte Buddy\n","slug":"javaagent-bytebuddy","published":1,"updated":"2019-09-30T07:34:10.837Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3e5th800069p966mxhilkzo","content":"<p>Java agent是在另外一个Java应用（“目标”应用）启动之前要执行的Java程序，这样agent就有机会修改目标应用或者应用所运行的环境。在本文中，我们将会从基础内容开始，逐渐增强其功能，借助字节码操作工具Byte Buddy，使其成为高级的agent实现。</p>\n<p>在最基本的用例中，Java agent会用来设置应用属性或者配置特定的环境状态，agent能够作为可重用和可插入的组件。如下的样例描述了这样的一个agent，它设置了一个系统属性，在实际的程序中就可以使用该属性了：</p>\n<p>public class Agent {  public static void premain(String arg) {    System.setProperty(“my-property”, “foo”);  }}</p>\n<p>如上面的代码所述，Java agent的定义与其他的Java程序类似，只不过它使用premain方法替代main方法作为入口点。顾名思义，这个方法能够在目标应用的main方法之前执行。相对于其他的Java程序，编写agent并没有特定的规则。有一个很小的区别在于，Java agent接受一个可选的参数，而不是包含零个或更多参数的数组。</p>\n<p>如果要使用这个agent，必须要将agent类和资源打包到jar中，并且在jar的manifest中要将Agent-Class属性设置为包含premain方法的agent类。（agent必须要打包到jar文件中，它不能通过拆解的格式进行指定。）接下来，我们需要启动应用程序，并且在命令行中通过javaagent参数来引用jar文件的位置：</p>\n<p>java -javaagent:myAgent.jar -jar myProgram.jar</p>\n<p>我们还可以在位置路径上设置可选的agent参数。在下面的命令中会启动一个Java程序并且添加给定的agent，将值myOptions作为参数提供给premain方法：</p>\n<p>java -javaagent:myAgent.jar=myOptions -jar myProgram.jar</p>\n<p>通过重复使用javaagent命令，能够添加多个agent。</p>\n<p>但是，Java agent的功能并不局限于修改应用程序环境的状态，Java agent能够访问Java instrumentation API，这样的话，agent就能修改目标应用程序的代码。Java虚拟机中这个鲜为人知的特性提供了一个强大的工具，有助于实现面向切面的编程。</p>\n<p>如果要对Java程序进行这种修改，我们需要在agent的premain方法上添加类型为Instrumentation的第二个参数。Instrumentation参数可以用来执行一系列的任务，比如确定对象以字节为单位的精确大小以及通过注册ClassFileTransformers实际修改类的实现。ClassFileTransformers注册之后，当类加载器（class loader）加载类的时候都会调用它。当它被调用时，在类文件所代表的类加载之前，类文件transformer有机会改变或完全替换这个类文件。按照这种方式，在类使用之前，我们能够增强或修改类的行为，如下面的样例所示：</p>\n<p>public class Agent { public static void premain(String argument, Instrumentation inst) {   inst.addTransformer(new ClassFileTransformer() {     @Override     public byte[] transform(       ClassLoader loader,       String className,       Class&lt;?&gt; classBeingRedefined, // 如果类之前没有加载的话，值为null       ProtectionDomain protectionDomain,       byte[] classFileBuffer) {       // 返回改变后的类文件。     }   }); }}</p>\n<p>通过使用Instrumentation实例注册上述的ClassFileTransformer之后，每个类加载的时候，都会调用这个transformer。为了实现这一点，transformer会接受一个二进制和类加载器的引用，分别代表了类文件以及试图加载类的类加载器。</p>\n<p>Java agent也可以在Java应用的运行期注册，如果是在这种场景下，instrumentation API允许重新定义已加载的类，这个特性被称之为“HotSwap”。不过，重新定义类仅限于替换方法体。在重新定义类的时候，不能新增或移除类成员，并且类型和签名也不能进行修改。当类第一次加载的时候，并没有这种限制，如果是在这样的场景下，那classBeingRedefined会被设置为null。</p>\n<p>Java字节码与类文件格式</p>\n<p>类文件代表了Java类编译之后的状态。类文件中会包含字节码，这些字节码代表了Java源码中最初的程序指令。Java字节码可以视为Java虚拟机的语言。实际上，JVM并不会将Java视为编程语言，它只能处理字节码。因为它采用二进制的表现形式，所以相对于程序的源码，它占用的空间更少。除此之外，将程序以字节码的形式进行表现能够更容易地编译Java以外的其他语言，如Scala或Clojure，从而让它们运行在JVM上。如果没有字节码作为中间语言的话，那么其他的程序在运行之前，可能还需要将其转换为Java源码。</p>\n<p>但是，在代码处理的时候，这种抽象却带来了一定的成本。如果要将ClassFileTransformer应用到某个类上，那我们不能将该类按照Java源码的形式进行处理，甚至不能假设被转换的代码最初是由Java编写而成的。更糟糕的是，探查类成员或注解的反射API也是禁止使用的，这是因为类加载之前，我们无法访问这些API，而在转换进程完成之前，是无法进行加载的。</p>\n<p>所幸的是，Java字节码相对来讲是一个比较简单的抽象形式，它包含了很少量的操作，稍微花点功夫我们就能大致将其掌握起来。Java虚拟机执行程序的时候，会以基于栈的方式来处理值。字节码指令一般会告知虚拟机，需要从操作数栈（operand stack）上弹出值，执行一些操作，然后再将结果压到栈中。</p>\n<p>让我们考虑一个简单的样例：将数字1和2进行相加操作。JVM首先会将这两个数字压到栈中，这是通过 iconst_1和iconst_2这两个字节指令实现的。iconst_1是个单字节的便捷运算符（operator），它会将数字1压到栈中。与之类似，iconst_2会将数字2压到栈中。然后，会执行iadd指令，它会将栈中最新的两个值弹出，将它们求和计算的结果重新压到栈中。在类文件中，每个指令并不是以其易于记忆的名称进行存储的，而是以一个字节的形式进行存储，这个字节能够唯一地标记特定的指令，这也是bytecode这个术语的来历。上文所述的字节码指令及其对操作数栈的影响，通过下面的图片进行了可视化。</p>\n<p><img src=\"\\images\\pasted-54.png\" alt=\"upload successful\"></p>\n<p>对于人类用户来讲，会更喜欢源码而不是字节码，不过幸运的是Java社区创建了多个库，能够解析类文件并将紧凑的字节码暴露为具有名称的指令流。例如，流行的ASM库提供了一个简单的visitor API，它能够将类文件剖析为成员和方法指令，其操作方式类似于阅读XML文件时的SAX解析器。如果使用ASM的话，那上述样例中的字节码可以按照如下的代码来进行实现（在这里，ASM方式的指令是visitIns，能够提供修正的方法实现）：</p>\n<p>MethodVisitor methodVisitor = …methodVisitor.visitIns(Opcodes.ICONST_1);methodVisitor.visitIns(Opcodes.ICONST_2);methodVisitor.visitIns(Opcodes.IADD);</p>\n<p>需要注意的是，字节码规范只不过是一种比喻的说法（metaphor），因为Java虚拟机允许将程序转换为优化后的机器码（machine code），只要程序的输出能够保证是正确的即可。因为字节码的简洁性，所以在已有的类中取代和修改指令是很简单直接的。因此，使用ASM及其底层的Java字节码基础就足以实现类转换的Java agent，这需要注册一个ClassFileTransformer，它会使用这个库来处理其参数。</p>\n<p>克服字节码的不足</p>\n<p>对于实际的应用来讲，解析原始的类文件依然意味着有很多的手动工作。Java程序员通常感兴趣的是类型层级结构中的类。例如，某个Java agent可能需要修改所有实现给定接口的类。如果要确定某个类的超类，那只靠解析ClassFileTransformer所给定的类文件就不够了，类文件中只包含了直接超类和接口的名字。为了解析可能的超类型关联关系，程序员依然需要定位这些类型的类文件。</p>\n<p>在项目中直接使用ASM的另外一个困难在于，团队中需要有开发人员学习Java字节码的基础知识。在实践中，这往往会导致很多的开发人员不敢再去修改字节码操作相关的代码。如果这样的话，实现Java agent很容易为项目的长期维护带来风险。</p>\n<p>为了克服这些问题，我们最好使用较高层级的抽象来实现Java agent，而不是直接操作Java字节码。Byte Buddy是开源的、基于Apache 2.0许可证的库，它致力于解决字节码操作和instrumentation API的复杂性。Byte Buddy所声称的目标是将显式的字节码操作隐藏在一个类型安全的领域特定语言背后。通过使用Byte Buddy，任何熟悉Java编程语言的人都有望非常容易地进行字节码操作。</p>\n<p>Byte Buddy简介</p>\n<p>Byte Buddy的目的并不仅仅是为了生成Java agent。它提供了一个API用于生成任意的Java类，基于这个生成类的API，Byte Buddy提供了额外的API来生成Java agent。</p>\n<p>作为Byte Buddy的简介，如下的样例展现了如何生成一个简单的类，这个类是Object的子类，并且重写了toString方法，用来返回“Hello World!”。与原始的ASM类似，“intercept”会告诉Byte Buddy为拦截到的指令提供方法实现：</p>\n<p>Class&lt;?&gt; dynamicType = new ByteBuddy()  .subclass(Object.class)  .method(ElementMatchers.named(“toString”))  .intercept(FixedValue.value(“Hello World!”))  .make()  .load(getClass().getClassLoader(),                  ClassLoadingStrategy.Default.WRAPPER)  .getLoaded();</p>\n<p>从上面的代码中，我们可以看到Byte Buddy要实现一个方法分为两步。首先，编程人员需要指定一个ElementMatcher，它负责识别一个或多个需要实现的方法。Byte Buddy提供了功能丰富的预定义拦截器（interceptor），它们暴露在ElementMatchers类中。在上述的例子中，toString方法完全精确匹配了名称，但是，我们也可以匹配更为复杂的代码结构，如类型或注解。</p>\n<p>当Byte Buddy生成类的时候，它会分析所生成类型的类层级结构。在上述的例子中，Byte Buddy能够确定所生成的类要继承其超类Object的名为toString的方法，指定的匹配器会要求Byte Buddy重写该方法，这是通过随后的 Implementation 实例实现的，在我们的样例中，这个实例也就是FixedValue。</p>\n<p>当创建子类的时候，Byte Buddy始终会拦截（intercept）一个匹配的方法，在生成的类中重写该方法。但是，我们在本文稍后将会看到Byte Buddy还能够重新定义已有的类，而不必通过子类的方式来实现。在这种情况下，Byte Buddy会将已有的代码替换为生成的代码，而将原有的代码复制到另外一个合成的（synthetic）方法中。</p>\n<p>在我们上面的代码样例中，匹配的方法进行了重写，在实现里面，返回了固定的值“Hello World!”。intercept方法接受Implementation类型的参数，Byte Buddy自带了多个预先定义的实现，如上文所使用的FixedValue类。但是，如果需要的话，可以使用前文所述的ASM API将某个方法实现为自定义的字节码，Byte Buddy本身也是基于ASM API实现的。</p>\n<p>定义完类的属性之后，就能通过make方法来进行生成。在样例应用中，因为用户没有指定类名，所以生成的类会给定一个任意的名称。最终，生成的类将会使用ClassLoadingStrategy来进行加载。通过使用上述的默认 WRAPPER策略，类将会使用一个新的类加载器进行加载，这个类加载器会使用环境类加载器作为父加载器。</p>\n<p>类加载之后，使用Java反射API就可以访问它了。如果没有指定其他构造器的话，Byte Buddy将会生成类似于父类的构造器，因此生成的类可以使用默认的构造器。这样，我们就可以检验生成的类重写了 toString方法，如下面的代码所示：</p>\n<p>assertThat(dynamicType.newInstance().toString(),            is(“Hello World!”));</p>\n<p>当然，这个生成的类并没有太大的用处。对于实际的应用来讲，大多数方法的返回值是在运行时计算的，这个计算过程要依赖于方法的参数和对象的状态。</p>\n<p>通过委托实现Instrumentation</p>\n<p>要实现某个方法，有一种更为灵活的方式，那就是使用Byte Buddy的MethodDelegation。通过使用方法委托，在生成重写的实现时，我们就有可能调用给定类和实例的其他方法。按照这种方式，我们可以使用如下的委托器（delegator）重新编写上述的样例：</p>\n<p>class ToStringInterceptor {  static String intercept() {    return “Hello World!”;  }}</p>\n<p>借助上面的POJO拦截器，我们就可以将之前的FixedValue实现替换为MethodDelegation.to(ToStringInterceptor.class)：</p>\n<p>Class&lt;?&gt; dynamicType = new ByteBuddy()  .subclass(Object.class)  .method(ElementMatchers.named(“toString”))  .intercept(MethodDelegation.to(ToStringInterceptor.class))  .make()  .load(getClass().getClassLoader(),                  ClassLoadingStrategy.Default.WRAPPER)  .getLoaded();</p>\n<p>使用上述的委托器，Byte Buddy会在to方法所给定的拦截目标中，确定最优的调用方法。就ToStringInterceptor.class来讲，选择过程只是非常简单地解析这个类型的唯一静态方法而已。在本例中，只会考虑一个静态方法，因为委托的目标中指定的是一个类。与之不同的是，我们还可以将其委托给某个类的实例，如果是这样的话，Byte Buddy将会考虑所有的虚方法（virtual method）。如果类或实例上有多个这样的方法，那么Byte Buddy首先会排除掉所有与指定instrumentation不兼容的方法。在剩余的方法中，库将会选择最佳的匹配者，通常来讲这会是参数最多的方法。我们还可以显式地指定目标方法，这需要缩小合法方法的范围，将ElementMatcher传递到MethodDelegation中，就会进行方法的过滤。例如，通过添加如下的filter，Byte Buddy只会将名为“intercept”的方法视为委托目标：</p>\n<p>MethodDelegation.to(ToStringInterceptor.class)                .filter(ElementMatchers.named(“intercept”))</p>\n<p>执行上面的拦截之后，被拦截到的方法依然会打印出“Hello World!”，但是这次的结果是动态计算的，这样的话，我们就可以在拦截器方法上设置断点，所生成的类每次调用toString时，都会触发拦截器的方法。</p>\n<p>当我们为拦截器方法设置参数时，就能释放出MethodDelegation的全部威力。这里的参数通常是带有注解的，用来要求Byte Buddy在调用拦截器方法时，注入某个特定的值。例如，通过使用@Origin注解，Byte Buddy提供了添加instrument功能的方法的实例，将其作为Java反射API中类的实例：</p>\n<p>class ContextualToStringInterceptor {  static String intercept(@Origin Method m) {    return “Hello World from ” + m.getName() + “!”;  }}</p>\n<p>当拦截toString方法时，对instrument方法的调用将会返回“Hello world from toString!”。</p>\n<p>除了@Origin注解以外，Byte Buddy提供了一组功能丰富的注解。例如，通过在类型为Callable的参数上使用@Super注解，Byte Buddy会创建并注入一个代理实例，它能够调用被instrument方法的原始代码。如果对于特定的用户场景，所提供的注解不能满足需求或者不太适合的话，我们甚至能够注册自定义的注解，让这些注解注入用户特定的值。</p>\n<p>实现方法级别的安全性</p>\n<p>可以看到，我们在运行时可以借助简单的Java代码，使用MethodDelegation来动态重写某个方法。这只是一个简单的样例，但是这项技术可以用到更加实际的应用之中。在本文剩余的内容中，我们将会开发一个样例，它会使用代码生成技术实现一个注解驱动的库，用来限制方法级别的安全性。在我们的第一个迭代中，这个库会通过生成子类的方式来限制安全性。然后，我们将会采取相同的方式来实现Java agent，完成相同的功能。</p>\n<p>样例库会使用如下的注解，允许用户指定某个方法需要考虑安全因素：</p>\n<p>@interface Secured {  String user();}</p>\n<p>例如，假设应用需要使用如下的Service类来执行敏感操作，并且只有用户被认证为管理员才能执行该方法。这是通过为执行这个操作的方法声明Secured注解来指定的：</p>\n<p>class Service {  @Secured(user = “ADMIN”)  void doSensitiveAction() {    // 运行敏感代码…  }}</p>\n<p>我们当然可以将安全检查直接编写到方法中。在实际中，硬编码横切关注点往往会导致复制-粘贴的逻辑，使其难以维护。另外，一旦应用需要涉及额外的需求时，如日志、收集调用指标或结果缓存，直接添加这样的代码扩展性不会很好。通过将这样的功能抽取到agent中，方法就能很纯粹地关注其业务逻辑，使得代码库能够更易于阅读、测试和维护。</p>\n<p>为了让我们规划的库保持尽可能得简单，按照注解的协议声明，如果当前用户不具备注解的用户属性时，将会抛出IllegalStateException异常。通过使用Byte Buddy，这种行为可以用一个简单的拦截器来实现，如下面样例中的SecurityInterceptor所示，它会通过其静态的user域，跟踪当前用户已经进行了登录：</p>\n<p>class SecurityInterceptor {  static String user = “ANONYMOUS”  static void intercept(@Origin Method method) {    if (!method.getAnnotation(Secured.class).user().equals(user)) {      throw new IllegalStateException(“Wrong user”);    }  }}</p>\n<p>通过上面的代码，我们可以看到，即便给定用户授予了访问权限，拦截器也没有调用原始的方法。为了解决这个问题，Byte Buddy有很多预定义的方法可以实现功能的链接。借助MethodDelegation类的andThen方法，上述的安全检查可以放到原始方法的调用之前，如下面的代码所示。如果用户没有进行认证的话，安全检查将会抛出异常并阻止后续的执行，因此原始方法将不会执行。</p>\n<p>将这些功能集合在一起，我们就能生成Service的一个子类，所有带有注解方法的都能恰当地进行安全保护。因为所生成的类是Service的子类，所以它能够替代所有类型为Service的变量，并不需要任何的类型转换，如果没有恰当认证的话，调用doSensitiveAction方法就会抛出异常：</p>\n<p>new ByteBuddy()  .subclass(Service.class)  .method(ElementMatchers.isAnnotatedBy(Secured.class))  .intercept(MethodDelegation.to(SecurityInterceptor.class)                             .andThen(SuperMethodCall.INSTANCE)))  .make()  .load(getClass().getClassLoader(),           ClassLoadingStrategy.Default.WRAPPER)  .getLoaded()  .newInstance()  .doSensitiveAction();</p>\n<p>不过坏消息是，因为实现instrumentation功能的子类是在运行时创建的，所以除了使用Java反射以外，没有其他办法创建这样的实例。因此，所有instrumentation类的实例都应该通过一个工厂来创建，这个工厂会封装创建instrumentation子类的复杂性。这样造成的结果就是，子类instrumentation通常会用于框架之中，这些框架本身就需要通过工厂来创建实例，例如，像依赖管理的框架Spring或对象-关系映射的框架Hibernate，而对于其他类型的应用来讲，子类instrumentation实现起来通常过于复杂。</p>\n<p>实现安全功能的Java agent</p>\n<p>通过使用Java agent，上述安全框架的一个替代实现将会修改Service类的原始字节码，而不是重写它。这样做的话，我们就没有必要创建托管的实例了，只需简单地调用</p>\n<p>new Service().doSensitiveAction()</p>\n<p>即可，如果对应的用户没有进行认证的话，就会抛出异常。为了支持这种方式，Byte Buddy提供一种称之为rebase某个类的理念。当rebase某个类的时候，不会创建子类，所采用的策略是实现instrumentation功能的代码将会合并到被instrument的类中，从而改变其行为。在添加instrumentation功能之后，在被instrument的类中，其所有方法的原始代码均可进行访问，因此像SuperMethodCall这样的instrumentation，工作方式与创建子类是完全一样的。</p>\n<p>创建子类与rebase的行为是非常类似的，所以两种操作的API执行方式是一致的，都会使用相同的DynamicType.Builder接口来描述某个类型。两种形式的instrumentation都可以通过ByteBuddy类来进行访问。为了使Java agent的定义更加便利，Byte Buddy还提供了 AgentBuilder类，它希望能够以一种简洁的方式应对一些通用的用户场景。为了定义Java agent实现方法级别的安全性，将如下的类定义为agent的入口点就足以完成该功能了：</p>\n<p>class SecurityAgent {  public static void premain(String arg, Instrumentation inst) {    new AgentBuilder.Default()    .type(ElementMatchers.any())    .transform((builder, type) -&gt; builder    .method(ElementMatchers.isAnnotatedBy(Secured.class)    .intercept(MethodDelegation.to(SecurityInterceptor.class)               .andThen(SuperMethodCall.INSTANCE))))    .installOn(inst);  }}</p>\n<p>如果将这个agent打包为jar文件并在命令行中进行指定，那么所有带有Secured注解的方法将会进行“转换”或重定义，从而实现安全保护。如果不激活这个Java agent的话，应用在运行时就不包含额外的安全检查。当然，这意味着如果对带有注解的代码进行单元测试的话，这些方法的调用并不需要特殊的搭建过程来模拟安全上下文。Java运行时会忽略掉无法在classpath中找到的注解类型，因此在运行带有注解的方法时，我们甚至完全可以在应用中移除掉安全库。</p>\n<p>另外一项优势在于，Java agent能够很容易地进行叠加。如果在命令行中指定多个Java agent的话，每个agent都有机会对类进行修改，其顺序就是在命令行中所指定的顺序。例如，我们可以采取这种方式将安全、日志以及监控框架联合在一起，而不需要在这些应用间增添任何形式的集成层。因此，使用Java agent实现横切的关注点提供了一种更为模块化的代码编写方式，而不必针对某个管理实例的中心框架来集成所有的代码。</p>\n<p>查看英文原文：Easily Create Java Agents with Byte Buddy</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Java agent是在另外一个Java应用（“目标”应用）启动之前要执行的Java程序，这样agent就有机会修改目标应用或者应用所运行的环境。在本文中，我们将会从基础内容开始，逐渐增强其功能，借助字节码操作工具Byte Buddy，使其成为高级的agent实现。</p>\n<p>在最基本的用例中，Java agent会用来设置应用属性或者配置特定的环境状态，agent能够作为可重用和可插入的组件。如下的样例描述了这样的一个agent，它设置了一个系统属性，在实际的程序中就可以使用该属性了：</p>\n<p>public class Agent {  public static void premain(String arg) {    System.setProperty(“my-property”, “foo”);  }}</p>\n<p>如上面的代码所述，Java agent的定义与其他的Java程序类似，只不过它使用premain方法替代main方法作为入口点。顾名思义，这个方法能够在目标应用的main方法之前执行。相对于其他的Java程序，编写agent并没有特定的规则。有一个很小的区别在于，Java agent接受一个可选的参数，而不是包含零个或更多参数的数组。</p>\n<p>如果要使用这个agent，必须要将agent类和资源打包到jar中，并且在jar的manifest中要将Agent-Class属性设置为包含premain方法的agent类。（agent必须要打包到jar文件中，它不能通过拆解的格式进行指定。）接下来，我们需要启动应用程序，并且在命令行中通过javaagent参数来引用jar文件的位置：</p>\n<p>java -javaagent:myAgent.jar -jar myProgram.jar</p>\n<p>我们还可以在位置路径上设置可选的agent参数。在下面的命令中会启动一个Java程序并且添加给定的agent，将值myOptions作为参数提供给premain方法：</p>\n<p>java -javaagent:myAgent.jar=myOptions -jar myProgram.jar</p>\n<p>通过重复使用javaagent命令，能够添加多个agent。</p>\n<p>但是，Java agent的功能并不局限于修改应用程序环境的状态，Java agent能够访问Java instrumentation API，这样的话，agent就能修改目标应用程序的代码。Java虚拟机中这个鲜为人知的特性提供了一个强大的工具，有助于实现面向切面的编程。</p>\n<p>如果要对Java程序进行这种修改，我们需要在agent的premain方法上添加类型为Instrumentation的第二个参数。Instrumentation参数可以用来执行一系列的任务，比如确定对象以字节为单位的精确大小以及通过注册ClassFileTransformers实际修改类的实现。ClassFileTransformers注册之后，当类加载器（class loader）加载类的时候都会调用它。当它被调用时，在类文件所代表的类加载之前，类文件transformer有机会改变或完全替换这个类文件。按照这种方式，在类使用之前，我们能够增强或修改类的行为，如下面的样例所示：</p>\n<p>public class Agent { public static void premain(String argument, Instrumentation inst) {   inst.addTransformer(new ClassFileTransformer() {     @Override     public byte[] transform(       ClassLoader loader,       String className,       Class&lt;?&gt; classBeingRedefined, // 如果类之前没有加载的话，值为null       ProtectionDomain protectionDomain,       byte[] classFileBuffer) {       // 返回改变后的类文件。     }   }); }}</p>\n<p>通过使用Instrumentation实例注册上述的ClassFileTransformer之后，每个类加载的时候，都会调用这个transformer。为了实现这一点，transformer会接受一个二进制和类加载器的引用，分别代表了类文件以及试图加载类的类加载器。</p>\n<p>Java agent也可以在Java应用的运行期注册，如果是在这种场景下，instrumentation API允许重新定义已加载的类，这个特性被称之为“HotSwap”。不过，重新定义类仅限于替换方法体。在重新定义类的时候，不能新增或移除类成员，并且类型和签名也不能进行修改。当类第一次加载的时候，并没有这种限制，如果是在这样的场景下，那classBeingRedefined会被设置为null。</p>\n<p>Java字节码与类文件格式</p>\n<p>类文件代表了Java类编译之后的状态。类文件中会包含字节码，这些字节码代表了Java源码中最初的程序指令。Java字节码可以视为Java虚拟机的语言。实际上，JVM并不会将Java视为编程语言，它只能处理字节码。因为它采用二进制的表现形式，所以相对于程序的源码，它占用的空间更少。除此之外，将程序以字节码的形式进行表现能够更容易地编译Java以外的其他语言，如Scala或Clojure，从而让它们运行在JVM上。如果没有字节码作为中间语言的话，那么其他的程序在运行之前，可能还需要将其转换为Java源码。</p>\n<p>但是，在代码处理的时候，这种抽象却带来了一定的成本。如果要将ClassFileTransformer应用到某个类上，那我们不能将该类按照Java源码的形式进行处理，甚至不能假设被转换的代码最初是由Java编写而成的。更糟糕的是，探查类成员或注解的反射API也是禁止使用的，这是因为类加载之前，我们无法访问这些API，而在转换进程完成之前，是无法进行加载的。</p>\n<p>所幸的是，Java字节码相对来讲是一个比较简单的抽象形式，它包含了很少量的操作，稍微花点功夫我们就能大致将其掌握起来。Java虚拟机执行程序的时候，会以基于栈的方式来处理值。字节码指令一般会告知虚拟机，需要从操作数栈（operand stack）上弹出值，执行一些操作，然后再将结果压到栈中。</p>\n<p>让我们考虑一个简单的样例：将数字1和2进行相加操作。JVM首先会将这两个数字压到栈中，这是通过 iconst_1和iconst_2这两个字节指令实现的。iconst_1是个单字节的便捷运算符（operator），它会将数字1压到栈中。与之类似，iconst_2会将数字2压到栈中。然后，会执行iadd指令，它会将栈中最新的两个值弹出，将它们求和计算的结果重新压到栈中。在类文件中，每个指令并不是以其易于记忆的名称进行存储的，而是以一个字节的形式进行存储，这个字节能够唯一地标记特定的指令，这也是bytecode这个术语的来历。上文所述的字节码指令及其对操作数栈的影响，通过下面的图片进行了可视化。</p>\n<p><img src=\"\\images\\pasted-54.png\" alt=\"upload successful\"></p>\n<p>对于人类用户来讲，会更喜欢源码而不是字节码，不过幸运的是Java社区创建了多个库，能够解析类文件并将紧凑的字节码暴露为具有名称的指令流。例如，流行的ASM库提供了一个简单的visitor API，它能够将类文件剖析为成员和方法指令，其操作方式类似于阅读XML文件时的SAX解析器。如果使用ASM的话，那上述样例中的字节码可以按照如下的代码来进行实现（在这里，ASM方式的指令是visitIns，能够提供修正的方法实现）：</p>\n<p>MethodVisitor methodVisitor = …methodVisitor.visitIns(Opcodes.ICONST_1);methodVisitor.visitIns(Opcodes.ICONST_2);methodVisitor.visitIns(Opcodes.IADD);</p>\n<p>需要注意的是，字节码规范只不过是一种比喻的说法（metaphor），因为Java虚拟机允许将程序转换为优化后的机器码（machine code），只要程序的输出能够保证是正确的即可。因为字节码的简洁性，所以在已有的类中取代和修改指令是很简单直接的。因此，使用ASM及其底层的Java字节码基础就足以实现类转换的Java agent，这需要注册一个ClassFileTransformer，它会使用这个库来处理其参数。</p>\n<p>克服字节码的不足</p>\n<p>对于实际的应用来讲，解析原始的类文件依然意味着有很多的手动工作。Java程序员通常感兴趣的是类型层级结构中的类。例如，某个Java agent可能需要修改所有实现给定接口的类。如果要确定某个类的超类，那只靠解析ClassFileTransformer所给定的类文件就不够了，类文件中只包含了直接超类和接口的名字。为了解析可能的超类型关联关系，程序员依然需要定位这些类型的类文件。</p>\n<p>在项目中直接使用ASM的另外一个困难在于，团队中需要有开发人员学习Java字节码的基础知识。在实践中，这往往会导致很多的开发人员不敢再去修改字节码操作相关的代码。如果这样的话，实现Java agent很容易为项目的长期维护带来风险。</p>\n<p>为了克服这些问题，我们最好使用较高层级的抽象来实现Java agent，而不是直接操作Java字节码。Byte Buddy是开源的、基于Apache 2.0许可证的库，它致力于解决字节码操作和instrumentation API的复杂性。Byte Buddy所声称的目标是将显式的字节码操作隐藏在一个类型安全的领域特定语言背后。通过使用Byte Buddy，任何熟悉Java编程语言的人都有望非常容易地进行字节码操作。</p>\n<p>Byte Buddy简介</p>\n<p>Byte Buddy的目的并不仅仅是为了生成Java agent。它提供了一个API用于生成任意的Java类，基于这个生成类的API，Byte Buddy提供了额外的API来生成Java agent。</p>\n<p>作为Byte Buddy的简介，如下的样例展现了如何生成一个简单的类，这个类是Object的子类，并且重写了toString方法，用来返回“Hello World!”。与原始的ASM类似，“intercept”会告诉Byte Buddy为拦截到的指令提供方法实现：</p>\n<p>Class&lt;?&gt; dynamicType = new ByteBuddy()  .subclass(Object.class)  .method(ElementMatchers.named(“toString”))  .intercept(FixedValue.value(“Hello World!”))  .make()  .load(getClass().getClassLoader(),                  ClassLoadingStrategy.Default.WRAPPER)  .getLoaded();</p>\n<p>从上面的代码中，我们可以看到Byte Buddy要实现一个方法分为两步。首先，编程人员需要指定一个ElementMatcher，它负责识别一个或多个需要实现的方法。Byte Buddy提供了功能丰富的预定义拦截器（interceptor），它们暴露在ElementMatchers类中。在上述的例子中，toString方法完全精确匹配了名称，但是，我们也可以匹配更为复杂的代码结构，如类型或注解。</p>\n<p>当Byte Buddy生成类的时候，它会分析所生成类型的类层级结构。在上述的例子中，Byte Buddy能够确定所生成的类要继承其超类Object的名为toString的方法，指定的匹配器会要求Byte Buddy重写该方法，这是通过随后的 Implementation 实例实现的，在我们的样例中，这个实例也就是FixedValue。</p>\n<p>当创建子类的时候，Byte Buddy始终会拦截（intercept）一个匹配的方法，在生成的类中重写该方法。但是，我们在本文稍后将会看到Byte Buddy还能够重新定义已有的类，而不必通过子类的方式来实现。在这种情况下，Byte Buddy会将已有的代码替换为生成的代码，而将原有的代码复制到另外一个合成的（synthetic）方法中。</p>\n<p>在我们上面的代码样例中，匹配的方法进行了重写，在实现里面，返回了固定的值“Hello World!”。intercept方法接受Implementation类型的参数，Byte Buddy自带了多个预先定义的实现，如上文所使用的FixedValue类。但是，如果需要的话，可以使用前文所述的ASM API将某个方法实现为自定义的字节码，Byte Buddy本身也是基于ASM API实现的。</p>\n<p>定义完类的属性之后，就能通过make方法来进行生成。在样例应用中，因为用户没有指定类名，所以生成的类会给定一个任意的名称。最终，生成的类将会使用ClassLoadingStrategy来进行加载。通过使用上述的默认 WRAPPER策略，类将会使用一个新的类加载器进行加载，这个类加载器会使用环境类加载器作为父加载器。</p>\n<p>类加载之后，使用Java反射API就可以访问它了。如果没有指定其他构造器的话，Byte Buddy将会生成类似于父类的构造器，因此生成的类可以使用默认的构造器。这样，我们就可以检验生成的类重写了 toString方法，如下面的代码所示：</p>\n<p>assertThat(dynamicType.newInstance().toString(),            is(“Hello World!”));</p>\n<p>当然，这个生成的类并没有太大的用处。对于实际的应用来讲，大多数方法的返回值是在运行时计算的，这个计算过程要依赖于方法的参数和对象的状态。</p>\n<p>通过委托实现Instrumentation</p>\n<p>要实现某个方法，有一种更为灵活的方式，那就是使用Byte Buddy的MethodDelegation。通过使用方法委托，在生成重写的实现时，我们就有可能调用给定类和实例的其他方法。按照这种方式，我们可以使用如下的委托器（delegator）重新编写上述的样例：</p>\n<p>class ToStringInterceptor {  static String intercept() {    return “Hello World!”;  }}</p>\n<p>借助上面的POJO拦截器，我们就可以将之前的FixedValue实现替换为MethodDelegation.to(ToStringInterceptor.class)：</p>\n<p>Class&lt;?&gt; dynamicType = new ByteBuddy()  .subclass(Object.class)  .method(ElementMatchers.named(“toString”))  .intercept(MethodDelegation.to(ToStringInterceptor.class))  .make()  .load(getClass().getClassLoader(),                  ClassLoadingStrategy.Default.WRAPPER)  .getLoaded();</p>\n<p>使用上述的委托器，Byte Buddy会在to方法所给定的拦截目标中，确定最优的调用方法。就ToStringInterceptor.class来讲，选择过程只是非常简单地解析这个类型的唯一静态方法而已。在本例中，只会考虑一个静态方法，因为委托的目标中指定的是一个类。与之不同的是，我们还可以将其委托给某个类的实例，如果是这样的话，Byte Buddy将会考虑所有的虚方法（virtual method）。如果类或实例上有多个这样的方法，那么Byte Buddy首先会排除掉所有与指定instrumentation不兼容的方法。在剩余的方法中，库将会选择最佳的匹配者，通常来讲这会是参数最多的方法。我们还可以显式地指定目标方法，这需要缩小合法方法的范围，将ElementMatcher传递到MethodDelegation中，就会进行方法的过滤。例如，通过添加如下的filter，Byte Buddy只会将名为“intercept”的方法视为委托目标：</p>\n<p>MethodDelegation.to(ToStringInterceptor.class)                .filter(ElementMatchers.named(“intercept”))</p>\n<p>执行上面的拦截之后，被拦截到的方法依然会打印出“Hello World!”，但是这次的结果是动态计算的，这样的话，我们就可以在拦截器方法上设置断点，所生成的类每次调用toString时，都会触发拦截器的方法。</p>\n<p>当我们为拦截器方法设置参数时，就能释放出MethodDelegation的全部威力。这里的参数通常是带有注解的，用来要求Byte Buddy在调用拦截器方法时，注入某个特定的值。例如，通过使用@Origin注解，Byte Buddy提供了添加instrument功能的方法的实例，将其作为Java反射API中类的实例：</p>\n<p>class ContextualToStringInterceptor {  static String intercept(@Origin Method m) {    return “Hello World from ” + m.getName() + “!”;  }}</p>\n<p>当拦截toString方法时，对instrument方法的调用将会返回“Hello world from toString!”。</p>\n<p>除了@Origin注解以外，Byte Buddy提供了一组功能丰富的注解。例如，通过在类型为Callable的参数上使用@Super注解，Byte Buddy会创建并注入一个代理实例，它能够调用被instrument方法的原始代码。如果对于特定的用户场景，所提供的注解不能满足需求或者不太适合的话，我们甚至能够注册自定义的注解，让这些注解注入用户特定的值。</p>\n<p>实现方法级别的安全性</p>\n<p>可以看到，我们在运行时可以借助简单的Java代码，使用MethodDelegation来动态重写某个方法。这只是一个简单的样例，但是这项技术可以用到更加实际的应用之中。在本文剩余的内容中，我们将会开发一个样例，它会使用代码生成技术实现一个注解驱动的库，用来限制方法级别的安全性。在我们的第一个迭代中，这个库会通过生成子类的方式来限制安全性。然后，我们将会采取相同的方式来实现Java agent，完成相同的功能。</p>\n<p>样例库会使用如下的注解，允许用户指定某个方法需要考虑安全因素：</p>\n<p>@interface Secured {  String user();}</p>\n<p>例如，假设应用需要使用如下的Service类来执行敏感操作，并且只有用户被认证为管理员才能执行该方法。这是通过为执行这个操作的方法声明Secured注解来指定的：</p>\n<p>class Service {  @Secured(user = “ADMIN”)  void doSensitiveAction() {    // 运行敏感代码…  }}</p>\n<p>我们当然可以将安全检查直接编写到方法中。在实际中，硬编码横切关注点往往会导致复制-粘贴的逻辑，使其难以维护。另外，一旦应用需要涉及额外的需求时，如日志、收集调用指标或结果缓存，直接添加这样的代码扩展性不会很好。通过将这样的功能抽取到agent中，方法就能很纯粹地关注其业务逻辑，使得代码库能够更易于阅读、测试和维护。</p>\n<p>为了让我们规划的库保持尽可能得简单，按照注解的协议声明，如果当前用户不具备注解的用户属性时，将会抛出IllegalStateException异常。通过使用Byte Buddy，这种行为可以用一个简单的拦截器来实现，如下面样例中的SecurityInterceptor所示，它会通过其静态的user域，跟踪当前用户已经进行了登录：</p>\n<p>class SecurityInterceptor {  static String user = “ANONYMOUS”  static void intercept(@Origin Method method) {    if (!method.getAnnotation(Secured.class).user().equals(user)) {      throw new IllegalStateException(“Wrong user”);    }  }}</p>\n<p>通过上面的代码，我们可以看到，即便给定用户授予了访问权限，拦截器也没有调用原始的方法。为了解决这个问题，Byte Buddy有很多预定义的方法可以实现功能的链接。借助MethodDelegation类的andThen方法，上述的安全检查可以放到原始方法的调用之前，如下面的代码所示。如果用户没有进行认证的话，安全检查将会抛出异常并阻止后续的执行，因此原始方法将不会执行。</p>\n<p>将这些功能集合在一起，我们就能生成Service的一个子类，所有带有注解方法的都能恰当地进行安全保护。因为所生成的类是Service的子类，所以它能够替代所有类型为Service的变量，并不需要任何的类型转换，如果没有恰当认证的话，调用doSensitiveAction方法就会抛出异常：</p>\n<p>new ByteBuddy()  .subclass(Service.class)  .method(ElementMatchers.isAnnotatedBy(Secured.class))  .intercept(MethodDelegation.to(SecurityInterceptor.class)                             .andThen(SuperMethodCall.INSTANCE)))  .make()  .load(getClass().getClassLoader(),           ClassLoadingStrategy.Default.WRAPPER)  .getLoaded()  .newInstance()  .doSensitiveAction();</p>\n<p>不过坏消息是，因为实现instrumentation功能的子类是在运行时创建的，所以除了使用Java反射以外，没有其他办法创建这样的实例。因此，所有instrumentation类的实例都应该通过一个工厂来创建，这个工厂会封装创建instrumentation子类的复杂性。这样造成的结果就是，子类instrumentation通常会用于框架之中，这些框架本身就需要通过工厂来创建实例，例如，像依赖管理的框架Spring或对象-关系映射的框架Hibernate，而对于其他类型的应用来讲，子类instrumentation实现起来通常过于复杂。</p>\n<p>实现安全功能的Java agent</p>\n<p>通过使用Java agent，上述安全框架的一个替代实现将会修改Service类的原始字节码，而不是重写它。这样做的话，我们就没有必要创建托管的实例了，只需简单地调用</p>\n<p>new Service().doSensitiveAction()</p>\n<p>即可，如果对应的用户没有进行认证的话，就会抛出异常。为了支持这种方式，Byte Buddy提供一种称之为rebase某个类的理念。当rebase某个类的时候，不会创建子类，所采用的策略是实现instrumentation功能的代码将会合并到被instrument的类中，从而改变其行为。在添加instrumentation功能之后，在被instrument的类中，其所有方法的原始代码均可进行访问，因此像SuperMethodCall这样的instrumentation，工作方式与创建子类是完全一样的。</p>\n<p>创建子类与rebase的行为是非常类似的，所以两种操作的API执行方式是一致的，都会使用相同的DynamicType.Builder接口来描述某个类型。两种形式的instrumentation都可以通过ByteBuddy类来进行访问。为了使Java agent的定义更加便利，Byte Buddy还提供了 AgentBuilder类，它希望能够以一种简洁的方式应对一些通用的用户场景。为了定义Java agent实现方法级别的安全性，将如下的类定义为agent的入口点就足以完成该功能了：</p>\n<p>class SecurityAgent {  public static void premain(String arg, Instrumentation inst) {    new AgentBuilder.Default()    .type(ElementMatchers.any())    .transform((builder, type) -&gt; builder    .method(ElementMatchers.isAnnotatedBy(Secured.class)    .intercept(MethodDelegation.to(SecurityInterceptor.class)               .andThen(SuperMethodCall.INSTANCE))))    .installOn(inst);  }}</p>\n<p>如果将这个agent打包为jar文件并在命令行中进行指定，那么所有带有Secured注解的方法将会进行“转换”或重定义，从而实现安全保护。如果不激活这个Java agent的话，应用在运行时就不包含额外的安全检查。当然，这意味着如果对带有注解的代码进行单元测试的话，这些方法的调用并不需要特殊的搭建过程来模拟安全上下文。Java运行时会忽略掉无法在classpath中找到的注解类型，因此在运行带有注解的方法时，我们甚至完全可以在应用中移除掉安全库。</p>\n<p>另外一项优势在于，Java agent能够很容易地进行叠加。如果在命令行中指定多个Java agent的话，每个agent都有机会对类进行修改，其顺序就是在命令行中所指定的顺序。例如，我们可以采取这种方式将安全、日志以及监控框架联合在一起，而不需要在这些应用间增添任何形式的集成层。因此，使用Java agent实现横切的关注点提供了一种更为模块化的代码编写方式，而不必针对某个管理实例的中心框架来集成所有的代码。</p>\n<p>查看英文原文：Easily Create Java Agents with Byte Buddy</p>\n"},{"title":"数据库-kill服务进程引发的血案","author":"Xiang Chuang","date":"2018-07-30T03:01:00.000Z","_content":"1、问题描述：\n18.07.27， 10：50分dba进行mysql数据库碎片整理，11：04分，发现数据库连接爆满，此时应用已处于down掉的状态，11：22数据库强行kill，11：40分之前发现应用并没有进行新的连接，此时停止应用发现停不下来，不得不kill掉应用进程，重启后恢复。但此时发现，之前入库的记录并没有成功，而mq由于没有收到应用的ack确认消息，消息重新进入队列并重发，加上数据没入库，交易进行了重复的操作！由于是全名抢车业务，导致重复上账，重复充退。\n\n2、问题分析\n由于没有及时的dump保护现场，加上应用down掉后，日志少的可怜，只有一些Broken pipe，以及该getOuptStream()异常，后期只能从代码层面分析。\n\n3、分析\njdbc sockeTimeout时间并没有设置，所以默认使用的mysql的或者操作系统本身的socketTimeout 该问题会引发类似问题\n\n相关文档:\nhttp://www.sohu.com/a/142039227_505885\nhttp://www.sohu.com/a/141155649_539864?qq-pf-to=pcqq.c2c \nhttps://blog.csdn.net/lx348321409/article/details/76095751 \nhttps://segmentfault.com/a/1190000012944562\nhttps://www.cubrid.org/blog/understanding-jdbc-internals-and-timeout-configuration\n\n=====================================================\njdbc timeout类别\n\n主要有如下几个类别\n\n![upload successful](\\images\\pasted-16.png)\ntransaction timeout\n设置的是一个事务的执行时间，里头可能包含多个statement\nstatement timeout(也相当于result set fetch timeout)\n设置的是一个statement的执行超时时间，即driver等待statement执行完成，接收到数据的超时时间(注意statement的timeout不是整个查询的timeout，只是statement执行完成并拉取fetchSize数据返回的超时，之后resultSet的next在必要的时候还会触发fetch数据，每次fetch的超时时间是单独算的，默认也是以statement设置的timeout为准)\njdbc socket timeout\n设置的是jdbc I/O socket read and write operations的超时时间，防止因网络问题或数据库问题，导致driver一直阻塞等待。(建议比statement timeout的时间长)\nos socket timeout\n这个是操作系统级别的socket设置(如果jdbc socket timeout没有设置，而os级别的socket timeout有设置，则使用系统的socket timeout值)。\n上面的不同级别的timeout越往下优先级越高，也就是说如果下面的配置比上面的配置值小的话，则会优先触发timeout，那么相当于上面的配置值就\"失效\"了。\njdbc socket timeout\n\n这个不同数据的jdbc driver实现不一样\nmysql\n\njdbc:mysql://localhost:3306/ag_admin?useUnicode=true&amp;characterEncoding=UTF8&connectTimeout=60000&socketTimeout=60000\n通过url参数传递即可\npg\n\njdbc:postgresql://localhost/test?user=fred&password=secret&&connectTimeout=60&socketTimeout=60\npg也是通过url传递，不过它的单位与mysql不同，mysql是毫秒，而pg是秒\noracle\n\noracle需要通过oracle.jdbc.ReadTimeout参数来设置，连接超时参数是oracle.net.CONNECT_TIMEOUT\n通过properties设置\n            Class.forName(\"oracle.jdbc.driver.OracleDriver\");\n            Properties props = new Properties() ;\n            props.put( \"user\" , \"test_schema\") ;\n            props.put( \"password\" , \"pwd\") ;\n            props.put( \"oracle.net.CONNECT_TIMEOUT\" , \"10000000\") ;\n            props.put( \"oracle.jdbc.ReadTimeout\" , \"2000\" ) ;\n            Connection conn = DriverManager.getConnection( \"jdbc:oracle:thin:@10.0.1.9:1521:orcl\" , props ) ;\n通过环境变量设置\nString readTimeout = \"10000\"; // ms\nSystem.setProperty(\"oracle.jdbc.ReadTimeout\", readTimeout);\nClass.forName(\"oracle.jdbc.OracleDriver\");\nConnection conn = DriverManager.getConnection(jdbcUrl, user, pwd);\n注意需要在connection连接之前设置环境变量\ntomcat jdbc pool\n一般我们不直接使用jdbc connection，而是使用连接池。由于tomcat jdbc pool是springboot默认使用的数据库连接池，这里就讲述一下如何在tomcat jdbc pool下设置。\nspring.datasource.tomcat.connectionProperties=oracle.net.CONNECT_TIMEOUT=10000;oracle.jdbc.ReadTimeout=60000\n注意，这里是分号分隔，单位是毫秒，这里可以根据各自的情况配置前缀(tomcat jdbc连接池的话，默认是spring.datasource.tomcat)，可以自定义，比如\n@Bean@Qualifier(\"writeDataSource\")\n    @ConfigurationProperties(prefix = \"spring.datasource.write\")\n    public DataSource writeDataSource() {\n        returnDataSourceBuilder.create().build();\n    }\n假设你这里是自定义了prefix为spring.datasource.write，那么上述配置就变为\nspring.datasource.write.connectionProperties=oracle.net.CONNECT_TIMEOUT=10000;oracle.jdbc.ReadTimeout=60000\noracle.jdbc.ReadTimeout如果没有设置的话，driver里头默认是0\noracle.jdbc.ReadTimeout\n\ndriver内部将该值设置到oracle.net.READ_TIMEOUT变量上\noracle.net.nt.TcpNTAdapter\n    @Override\n    publicvoid setReadTimeoutIfRequired(final Properties properties) throws IOException, NetException {\n        String s = ((Hashtable<K, String>)properties).get(\"oracle.net.READ_TIMEOUT\");\n        if (s == null) {\n            s = \"0\";\n        }\n        this.setOption(3, s);\n    }\n    \n    publicvoid setOption(int var1, Object var2) throws IOException, NetException {\n        String var3;\n        switch(var1) {\n        case0:\n            var3 = (String)var2;\n            this.socket.setTcpNoDelay(var3.equals(\"YES\"));\n            break;\n        case1:\n            var3 = (String)var2;\n            if(var3.equals(\"YES\")) {\n                this.socket.setKeepAlive(true);\n            }\n        case2:\n        default:\n            break;\n        case3:\n            this.sockTimeout = Integer.parseInt((String)var2);\n            this.socket.setSoTimeout(this.sockTimeout);\n        }\n\n    }\n可用看到最后设置的是socket的soTimeout\n实例\n\n    @Test\n    publicvoid testReadTimeout() throws SQLException {\n        Connection connection = dataSource.getConnection();\n        String sql = \"select * from demo_table\";\n        PreparedStatement pstmt;\n        try {\n            pstmt = (PreparedStatement)connection.prepareStatement(sql);\n            ResultSet rs = pstmt.executeQuery();\n            int col = rs.getMetaData().getColumnCount();\n            System.out.println(\"============================\");\n            while (rs.next()) {\n                for (int i = 1; i <= col; i++) {\n                    System.out.print(rs.getObject(i));\n                }\n                System.out.println(\"\");\n            }\n            System.out.println(\"============================\");\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            //close resources\n        }\n    }\n超时错误输出\n//部分数据输出......\njava.sql.SQLRecoverableException: IO 错误: Socket read timed out\n    at oracle.jdbc.driver.T4CPreparedStatement.fetch(T4CPreparedStatement.java:1128)\n    at oracle.jdbc.driver.OracleResultSetImpl.close_or_fetch_from_next(OracleResultSetImpl.java:373)\n    at oracle.jdbc.driver.OracleResultSetImpl.next(OracleResultSetImpl.java:277)\n    at com.example.demo.DemoApplicationTests.testReadTimeout(DemoApplicationTests.java:68)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:497)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75)\n    at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)\n    at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\n    at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:252)\n    at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:94)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n    at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)\n    at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n    at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:191)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:137)\n    at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:69)\n    at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:234)\n    at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:74)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:497)\n    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)\nCaused by: oracle.net.ns.NetException: Socket read timed out\n    at oracle.net.ns.Packet.receive(Packet.java:339)\n    at oracle.net.ns.DataPacket.receive(DataPacket.java:106)\n    at oracle.net.ns.NetInputStream.getNextPacket(NetInputStream.java:315)\n    at oracle.net.ns.NetInputStream.read(NetInputStream.java:260)\n    at oracle.net.ns.NetInputStream.read(NetInputStream.java:185)\n    at oracle.net.ns.NetInputStream.read(NetInputStream.java:102)\n    at oracle.jdbc.driver.T4CSocketInputStreamWrapper.readNextPacket(T4CSocketInputStreamWrapper.java:124)\n    at oracle.jdbc.driver.T4CSocketInputStreamWrapper.read(T4CSocketInputStreamWrapper.java:80)\n    at oracle.jdbc.driver.T4CMAREngine.unmarshalUB1(T4CMAREngine.java:1137)\n    at oracle.jdbc.driver.T4CTTIfun.receive(T4CTTIfun.java:290)\n    at oracle.jdbc.driver.T4CTTIfun.doRPC(T4CTTIfun.java:192)\n    at oracle.jdbc.driver.T4C8Oall.doOALL(T4C8Oall.java:531)\n    at oracle.jdbc.driver.T4CPreparedStatement.doOall8(T4CPreparedStatement.java:207)\n    at oracle.jdbc.driver.T4CPreparedStatement.fetch(T4CPreparedStatement.java:1119)\n    ... 35 more\n刚开始会有数据输出，但是到了某个resultSet的next的时候，报了超时(close_or_fetch_from_next)，这个超时指定的是当result.next方法触发新的一批数据的拉取(当一个fetchSize的数据消费完之后，接下来的next会触发新一批数据的fetch)之后在timeout时间返回内没有收到数据库返回的数据。\noracle的jdbc默认的fetchSize为10，也就是每个fetch，如果超过指定时间没接收到数据，则抛出timeout异常。\n小结\n\njdbc的socketTimeout值的设置要非常小心，不同数据库的jdbc driver设置不一样，特别是使用不同连接池的话，设置也可能不尽相同。对于严重依赖数据库操作的服务来说，非常有必要设置这个值，否则万一网络或数据库异常，会导致服务线程一直阻塞在java.net.SocketInputStream.socketRead0。\n如果查询数据多，则会导致该线程持有的data list不能释放，相当于内存泄露，最后导致OOM\n如果请求数据库操作很多且阻塞住了，会导致服务器可用的woker线程变少，严重则会导致服务不可用，nginx报504 Gateway Timeout\n=====================================================\n\n附：错误日志\norg.apache.catalina.connector.ClientAbortException: java.io.IOException: Broken pipe\n        at org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:393)\n        at org.apache.tomcat.util.buf.ByteChunk.flushBuffer(ByteChunk.java:426)\n        at org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:342)\n        at org.apache.catalina.connector.OutputBuffer.flush(OutputBuffer.java:317)\n        at org.apache.catalina.connector.CoyoteOutputStream.flush(CoyoteOutputStream.java:110)\n        at org.springframework.session.web.http.OnCommittedResponseWrapper$SaveContextServletOutputStream.flush(OnCommittedResponseWrapper.java:437)\n        at com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter.write(FastJsonHttpMessageConverter.java:216)\n        at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:183)\n        at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:81)\n        at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:126)\n        at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:832)\n        at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:743)\n        at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)\n        at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:961)\n        at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:895)\n        at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:967)\n        at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:858)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)\n        at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:843)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:292)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)\n        at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)\n        at com.yjf.common.web.CrossScriptingFilter.doFilter(CrossScriptingFilter.java:120)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)\n        at com.yiji.boot.web.common.ResponseHeaderFilter.doFilterInternal(ResponseHeaderFilter.java:62)\n        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)\n        at com.yiji.boot.actuator.acl.ActuatorACLFilter.doFilter(ActuatorACLFilter.java:36)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)\n        at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)\n        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)\n        at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:121)\n        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)\n        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:212)\n        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)\n        at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)\n        at org.apache.catalina.valves.RemoteIpValve.invoke(RemoteIpValve.java:676)\n        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:141)\n        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)\n        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)\n        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:522)\n        at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1095)\n        at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:672)\n        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1502)\n        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1458)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n        at java.lang.Thread.run(Thread.java:745)\nCaused by: java.io.IOException: Broken pipe\n        at sun.nio.ch.FileDispatcherImpl.write0(Native Method)\n        at sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:47)\n        at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93)\n        at sun.nio.ch.IOUtil.write(IOUtil.java:65)\n        at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:471)\n        at org.apache.tomcat.util.net.NioChannel.write(NioChannel.java:124)\n        at org.apache.tomcat.util.net.NioBlockingSelector.write(NioBlockingSelector.java:101)\n        at org.apache.tomcat.util.net.NioSelectorPool.write(NioSelectorPool.java:172)\n        at org.apache.coyote.http11.InternalNioOutputBuffer.writeToSocket(InternalNioOutputBuffer.java:139)\n        at org.apache.coyote.http11.InternalNioOutputBuffer.addToBB(InternalNioOutputBuffer.java:197)\n        at org.apache.coyote.http11.InternalNioOutputBuffer.access$000(InternalNioOutputBuffer.java:41)\n        at org.apache.coyote.http11.InternalNioOutputBuffer$SocketOutputBuffer.doWrite(InternalNioOutputBuffer.java:320)\n        at org.apache.coyote.http11.filters.ChunkedOutputFilter.doWrite(ChunkedOutputFilter.java:116)\n        at org.apache.coyote.http11.AbstractOutputBuffer.doWrite(AbstractOutputBuffer.java:256)\n        at org.apache.coyote.Response.doWrite(Response.java:501)\n        at org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:388)\n        ... 63 common frames omitted\n\n\n\n2018-07-27 11:04:24.377 ERROR [http-nio-8313-exec-12] [dispatcherServlet]-- Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.IllegalStateException: getOutputStream() has already been called for this response] with root cause\njava.lang.IllegalStateException: getOutputStream() has already been called for this response\n        at org.apache.catalina.connector.Response.getWriter(Response.java:564)\n        at org.apache.catalina.connector.ResponseFacade.getWriter(ResponseFacade.java:212)\n        at javax.servlet.ServletResponseWrapper.getWriter(ServletResponseWrapper.java:152)\n        at javax.servlet.ServletResponseWrapper.getWriter(ServletResponseWrapper.java:152)\n        at org.springframework.session.web.http.OnCommittedResponseWrapper.getWriter(OnCommittedResponseWrapper.java:133)\n        at javax.servlet.ServletResponseWrapper.getWriter(ServletResponseWrapper.java:152)\n        at org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration$SpelView.render(ErrorMvcAutoConfiguration.java:195)\n        at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1246)\n        at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1029)\n        at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:973)\n        at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:895)\n        at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:967)\n        at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:858)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)\n        at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:843)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:292)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)\n        at com.yjf.common.web.CrossScriptingFilter.doFilter(CrossScriptingFilter.java:92)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)\n        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)\n        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101)","source":"_posts/数据库-kill服务进程引发的血案.md","raw":"title: 数据库-kill服务进程引发的血案\nauthor: Xiang Chuang\ntags:\n  - db\ncategories:\n  - 这些年，那些坑\ndate: 2018-07-30 11:01:00\n---\n1、问题描述：\n18.07.27， 10：50分dba进行mysql数据库碎片整理，11：04分，发现数据库连接爆满，此时应用已处于down掉的状态，11：22数据库强行kill，11：40分之前发现应用并没有进行新的连接，此时停止应用发现停不下来，不得不kill掉应用进程，重启后恢复。但此时发现，之前入库的记录并没有成功，而mq由于没有收到应用的ack确认消息，消息重新进入队列并重发，加上数据没入库，交易进行了重复的操作！由于是全名抢车业务，导致重复上账，重复充退。\n\n2、问题分析\n由于没有及时的dump保护现场，加上应用down掉后，日志少的可怜，只有一些Broken pipe，以及该getOuptStream()异常，后期只能从代码层面分析。\n\n3、分析\njdbc sockeTimeout时间并没有设置，所以默认使用的mysql的或者操作系统本身的socketTimeout 该问题会引发类似问题\n\n相关文档:\nhttp://www.sohu.com/a/142039227_505885\nhttp://www.sohu.com/a/141155649_539864?qq-pf-to=pcqq.c2c \nhttps://blog.csdn.net/lx348321409/article/details/76095751 \nhttps://segmentfault.com/a/1190000012944562\nhttps://www.cubrid.org/blog/understanding-jdbc-internals-and-timeout-configuration\n\n=====================================================\njdbc timeout类别\n\n主要有如下几个类别\n\n![upload successful](\\images\\pasted-16.png)\ntransaction timeout\n设置的是一个事务的执行时间，里头可能包含多个statement\nstatement timeout(也相当于result set fetch timeout)\n设置的是一个statement的执行超时时间，即driver等待statement执行完成，接收到数据的超时时间(注意statement的timeout不是整个查询的timeout，只是statement执行完成并拉取fetchSize数据返回的超时，之后resultSet的next在必要的时候还会触发fetch数据，每次fetch的超时时间是单独算的，默认也是以statement设置的timeout为准)\njdbc socket timeout\n设置的是jdbc I/O socket read and write operations的超时时间，防止因网络问题或数据库问题，导致driver一直阻塞等待。(建议比statement timeout的时间长)\nos socket timeout\n这个是操作系统级别的socket设置(如果jdbc socket timeout没有设置，而os级别的socket timeout有设置，则使用系统的socket timeout值)。\n上面的不同级别的timeout越往下优先级越高，也就是说如果下面的配置比上面的配置值小的话，则会优先触发timeout，那么相当于上面的配置值就\"失效\"了。\njdbc socket timeout\n\n这个不同数据的jdbc driver实现不一样\nmysql\n\njdbc:mysql://localhost:3306/ag_admin?useUnicode=true&amp;characterEncoding=UTF8&connectTimeout=60000&socketTimeout=60000\n通过url参数传递即可\npg\n\njdbc:postgresql://localhost/test?user=fred&password=secret&&connectTimeout=60&socketTimeout=60\npg也是通过url传递，不过它的单位与mysql不同，mysql是毫秒，而pg是秒\noracle\n\noracle需要通过oracle.jdbc.ReadTimeout参数来设置，连接超时参数是oracle.net.CONNECT_TIMEOUT\n通过properties设置\n            Class.forName(\"oracle.jdbc.driver.OracleDriver\");\n            Properties props = new Properties() ;\n            props.put( \"user\" , \"test_schema\") ;\n            props.put( \"password\" , \"pwd\") ;\n            props.put( \"oracle.net.CONNECT_TIMEOUT\" , \"10000000\") ;\n            props.put( \"oracle.jdbc.ReadTimeout\" , \"2000\" ) ;\n            Connection conn = DriverManager.getConnection( \"jdbc:oracle:thin:@10.0.1.9:1521:orcl\" , props ) ;\n通过环境变量设置\nString readTimeout = \"10000\"; // ms\nSystem.setProperty(\"oracle.jdbc.ReadTimeout\", readTimeout);\nClass.forName(\"oracle.jdbc.OracleDriver\");\nConnection conn = DriverManager.getConnection(jdbcUrl, user, pwd);\n注意需要在connection连接之前设置环境变量\ntomcat jdbc pool\n一般我们不直接使用jdbc connection，而是使用连接池。由于tomcat jdbc pool是springboot默认使用的数据库连接池，这里就讲述一下如何在tomcat jdbc pool下设置。\nspring.datasource.tomcat.connectionProperties=oracle.net.CONNECT_TIMEOUT=10000;oracle.jdbc.ReadTimeout=60000\n注意，这里是分号分隔，单位是毫秒，这里可以根据各自的情况配置前缀(tomcat jdbc连接池的话，默认是spring.datasource.tomcat)，可以自定义，比如\n@Bean@Qualifier(\"writeDataSource\")\n    @ConfigurationProperties(prefix = \"spring.datasource.write\")\n    public DataSource writeDataSource() {\n        returnDataSourceBuilder.create().build();\n    }\n假设你这里是自定义了prefix为spring.datasource.write，那么上述配置就变为\nspring.datasource.write.connectionProperties=oracle.net.CONNECT_TIMEOUT=10000;oracle.jdbc.ReadTimeout=60000\noracle.jdbc.ReadTimeout如果没有设置的话，driver里头默认是0\noracle.jdbc.ReadTimeout\n\ndriver内部将该值设置到oracle.net.READ_TIMEOUT变量上\noracle.net.nt.TcpNTAdapter\n    @Override\n    publicvoid setReadTimeoutIfRequired(final Properties properties) throws IOException, NetException {\n        String s = ((Hashtable<K, String>)properties).get(\"oracle.net.READ_TIMEOUT\");\n        if (s == null) {\n            s = \"0\";\n        }\n        this.setOption(3, s);\n    }\n    \n    publicvoid setOption(int var1, Object var2) throws IOException, NetException {\n        String var3;\n        switch(var1) {\n        case0:\n            var3 = (String)var2;\n            this.socket.setTcpNoDelay(var3.equals(\"YES\"));\n            break;\n        case1:\n            var3 = (String)var2;\n            if(var3.equals(\"YES\")) {\n                this.socket.setKeepAlive(true);\n            }\n        case2:\n        default:\n            break;\n        case3:\n            this.sockTimeout = Integer.parseInt((String)var2);\n            this.socket.setSoTimeout(this.sockTimeout);\n        }\n\n    }\n可用看到最后设置的是socket的soTimeout\n实例\n\n    @Test\n    publicvoid testReadTimeout() throws SQLException {\n        Connection connection = dataSource.getConnection();\n        String sql = \"select * from demo_table\";\n        PreparedStatement pstmt;\n        try {\n            pstmt = (PreparedStatement)connection.prepareStatement(sql);\n            ResultSet rs = pstmt.executeQuery();\n            int col = rs.getMetaData().getColumnCount();\n            System.out.println(\"============================\");\n            while (rs.next()) {\n                for (int i = 1; i <= col; i++) {\n                    System.out.print(rs.getObject(i));\n                }\n                System.out.println(\"\");\n            }\n            System.out.println(\"============================\");\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            //close resources\n        }\n    }\n超时错误输出\n//部分数据输出......\njava.sql.SQLRecoverableException: IO 错误: Socket read timed out\n    at oracle.jdbc.driver.T4CPreparedStatement.fetch(T4CPreparedStatement.java:1128)\n    at oracle.jdbc.driver.OracleResultSetImpl.close_or_fetch_from_next(OracleResultSetImpl.java:373)\n    at oracle.jdbc.driver.OracleResultSetImpl.next(OracleResultSetImpl.java:277)\n    at com.example.demo.DemoApplicationTests.testReadTimeout(DemoApplicationTests.java:68)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:497)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75)\n    at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)\n    at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\n    at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:252)\n    at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:94)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n    at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)\n    at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n    at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:191)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:137)\n    at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:69)\n    at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:234)\n    at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:74)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:497)\n    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)\nCaused by: oracle.net.ns.NetException: Socket read timed out\n    at oracle.net.ns.Packet.receive(Packet.java:339)\n    at oracle.net.ns.DataPacket.receive(DataPacket.java:106)\n    at oracle.net.ns.NetInputStream.getNextPacket(NetInputStream.java:315)\n    at oracle.net.ns.NetInputStream.read(NetInputStream.java:260)\n    at oracle.net.ns.NetInputStream.read(NetInputStream.java:185)\n    at oracle.net.ns.NetInputStream.read(NetInputStream.java:102)\n    at oracle.jdbc.driver.T4CSocketInputStreamWrapper.readNextPacket(T4CSocketInputStreamWrapper.java:124)\n    at oracle.jdbc.driver.T4CSocketInputStreamWrapper.read(T4CSocketInputStreamWrapper.java:80)\n    at oracle.jdbc.driver.T4CMAREngine.unmarshalUB1(T4CMAREngine.java:1137)\n    at oracle.jdbc.driver.T4CTTIfun.receive(T4CTTIfun.java:290)\n    at oracle.jdbc.driver.T4CTTIfun.doRPC(T4CTTIfun.java:192)\n    at oracle.jdbc.driver.T4C8Oall.doOALL(T4C8Oall.java:531)\n    at oracle.jdbc.driver.T4CPreparedStatement.doOall8(T4CPreparedStatement.java:207)\n    at oracle.jdbc.driver.T4CPreparedStatement.fetch(T4CPreparedStatement.java:1119)\n    ... 35 more\n刚开始会有数据输出，但是到了某个resultSet的next的时候，报了超时(close_or_fetch_from_next)，这个超时指定的是当result.next方法触发新的一批数据的拉取(当一个fetchSize的数据消费完之后，接下来的next会触发新一批数据的fetch)之后在timeout时间返回内没有收到数据库返回的数据。\noracle的jdbc默认的fetchSize为10，也就是每个fetch，如果超过指定时间没接收到数据，则抛出timeout异常。\n小结\n\njdbc的socketTimeout值的设置要非常小心，不同数据库的jdbc driver设置不一样，特别是使用不同连接池的话，设置也可能不尽相同。对于严重依赖数据库操作的服务来说，非常有必要设置这个值，否则万一网络或数据库异常，会导致服务线程一直阻塞在java.net.SocketInputStream.socketRead0。\n如果查询数据多，则会导致该线程持有的data list不能释放，相当于内存泄露，最后导致OOM\n如果请求数据库操作很多且阻塞住了，会导致服务器可用的woker线程变少，严重则会导致服务不可用，nginx报504 Gateway Timeout\n=====================================================\n\n附：错误日志\norg.apache.catalina.connector.ClientAbortException: java.io.IOException: Broken pipe\n        at org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:393)\n        at org.apache.tomcat.util.buf.ByteChunk.flushBuffer(ByteChunk.java:426)\n        at org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:342)\n        at org.apache.catalina.connector.OutputBuffer.flush(OutputBuffer.java:317)\n        at org.apache.catalina.connector.CoyoteOutputStream.flush(CoyoteOutputStream.java:110)\n        at org.springframework.session.web.http.OnCommittedResponseWrapper$SaveContextServletOutputStream.flush(OnCommittedResponseWrapper.java:437)\n        at com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter.write(FastJsonHttpMessageConverter.java:216)\n        at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:183)\n        at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:81)\n        at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:126)\n        at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:832)\n        at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:743)\n        at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)\n        at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:961)\n        at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:895)\n        at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:967)\n        at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:858)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)\n        at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:843)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:292)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)\n        at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)\n        at com.yjf.common.web.CrossScriptingFilter.doFilter(CrossScriptingFilter.java:120)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)\n        at com.yiji.boot.web.common.ResponseHeaderFilter.doFilterInternal(ResponseHeaderFilter.java:62)\n        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)\n        at com.yiji.boot.actuator.acl.ActuatorACLFilter.doFilter(ActuatorACLFilter.java:36)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)\n        at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)\n        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)\n        at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:121)\n        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)\n        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:212)\n        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)\n        at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)\n        at org.apache.catalina.valves.RemoteIpValve.invoke(RemoteIpValve.java:676)\n        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:141)\n        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)\n        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)\n        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:522)\n        at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1095)\n        at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:672)\n        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1502)\n        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1458)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n        at java.lang.Thread.run(Thread.java:745)\nCaused by: java.io.IOException: Broken pipe\n        at sun.nio.ch.FileDispatcherImpl.write0(Native Method)\n        at sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:47)\n        at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93)\n        at sun.nio.ch.IOUtil.write(IOUtil.java:65)\n        at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:471)\n        at org.apache.tomcat.util.net.NioChannel.write(NioChannel.java:124)\n        at org.apache.tomcat.util.net.NioBlockingSelector.write(NioBlockingSelector.java:101)\n        at org.apache.tomcat.util.net.NioSelectorPool.write(NioSelectorPool.java:172)\n        at org.apache.coyote.http11.InternalNioOutputBuffer.writeToSocket(InternalNioOutputBuffer.java:139)\n        at org.apache.coyote.http11.InternalNioOutputBuffer.addToBB(InternalNioOutputBuffer.java:197)\n        at org.apache.coyote.http11.InternalNioOutputBuffer.access$000(InternalNioOutputBuffer.java:41)\n        at org.apache.coyote.http11.InternalNioOutputBuffer$SocketOutputBuffer.doWrite(InternalNioOutputBuffer.java:320)\n        at org.apache.coyote.http11.filters.ChunkedOutputFilter.doWrite(ChunkedOutputFilter.java:116)\n        at org.apache.coyote.http11.AbstractOutputBuffer.doWrite(AbstractOutputBuffer.java:256)\n        at org.apache.coyote.Response.doWrite(Response.java:501)\n        at org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:388)\n        ... 63 common frames omitted\n\n\n\n2018-07-27 11:04:24.377 ERROR [http-nio-8313-exec-12] [dispatcherServlet]-- Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.IllegalStateException: getOutputStream() has already been called for this response] with root cause\njava.lang.IllegalStateException: getOutputStream() has already been called for this response\n        at org.apache.catalina.connector.Response.getWriter(Response.java:564)\n        at org.apache.catalina.connector.ResponseFacade.getWriter(ResponseFacade.java:212)\n        at javax.servlet.ServletResponseWrapper.getWriter(ServletResponseWrapper.java:152)\n        at javax.servlet.ServletResponseWrapper.getWriter(ServletResponseWrapper.java:152)\n        at org.springframework.session.web.http.OnCommittedResponseWrapper.getWriter(OnCommittedResponseWrapper.java:133)\n        at javax.servlet.ServletResponseWrapper.getWriter(ServletResponseWrapper.java:152)\n        at org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration$SpelView.render(ErrorMvcAutoConfiguration.java:195)\n        at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1246)\n        at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1029)\n        at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:973)\n        at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:895)\n        at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:967)\n        at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:858)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)\n        at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:843)\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:292)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)\n        at com.yjf.common.web.CrossScriptingFilter.doFilter(CrossScriptingFilter.java:92)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)\n        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)\n        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101)","slug":"数据库-kill服务进程引发的血案","published":1,"updated":"2019-09-30T07:34:10.839Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3e5th80006ap96658cq7vhp","content":"<p>1、问题描述：<br>18.07.27， 10：50分dba进行mysql数据库碎片整理，11：04分，发现数据库连接爆满，此时应用已处于down掉的状态，11：22数据库强行kill，11：40分之前发现应用并没有进行新的连接，此时停止应用发现停不下来，不得不kill掉应用进程，重启后恢复。但此时发现，之前入库的记录并没有成功，而mq由于没有收到应用的ack确认消息，消息重新进入队列并重发，加上数据没入库，交易进行了重复的操作！由于是全名抢车业务，导致重复上账，重复充退。</p>\n<p>2、问题分析<br>由于没有及时的dump保护现场，加上应用down掉后，日志少的可怜，只有一些Broken pipe，以及该getOuptStream()异常，后期只能从代码层面分析。</p>\n<p>3、分析<br>jdbc sockeTimeout时间并没有设置，所以默认使用的mysql的或者操作系统本身的socketTimeout 该问题会引发类似问题</p>\n<p>相关文档:<br><a href=\"http://www.sohu.com/a/142039227_505885\" target=\"_blank\" rel=\"noopener\">http://www.sohu.com/a/142039227_505885</a><br><a href=\"http://www.sohu.com/a/141155649_539864?qq-pf-to=pcqq.c2c\" target=\"_blank\" rel=\"noopener\">http://www.sohu.com/a/141155649_539864?qq-pf-to=pcqq.c2c</a><br><a href=\"https://blog.csdn.net/lx348321409/article/details/76095751\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/lx348321409/article/details/76095751</a><br><a href=\"https://segmentfault.com/a/1190000012944562\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000012944562</a><br><a href=\"https://www.cubrid.org/blog/understanding-jdbc-internals-and-timeout-configuration\" target=\"_blank\" rel=\"noopener\">https://www.cubrid.org/blog/understanding-jdbc-internals-and-timeout-configuration</a></p>\n<p>=====================================================<br>jdbc timeout类别</p>\n<p>主要有如下几个类别</p>\n<p><img src=\"\\images\\pasted-16.png\" alt=\"upload successful\"><br>transaction timeout<br>设置的是一个事务的执行时间，里头可能包含多个statement<br>statement timeout(也相当于result set fetch timeout)<br>设置的是一个statement的执行超时时间，即driver等待statement执行完成，接收到数据的超时时间(注意statement的timeout不是整个查询的timeout，只是statement执行完成并拉取fetchSize数据返回的超时，之后resultSet的next在必要的时候还会触发fetch数据，每次fetch的超时时间是单独算的，默认也是以statement设置的timeout为准)<br>jdbc socket timeout<br>设置的是jdbc I/O socket read and write operations的超时时间，防止因网络问题或数据库问题，导致driver一直阻塞等待。(建议比statement timeout的时间长)<br>os socket timeout<br>这个是操作系统级别的socket设置(如果jdbc socket timeout没有设置，而os级别的socket timeout有设置，则使用系统的socket timeout值)。<br>上面的不同级别的timeout越往下优先级越高，也就是说如果下面的配置比上面的配置值小的话，则会优先触发timeout，那么相当于上面的配置值就”失效”了。<br>jdbc socket timeout</p>\n<p>这个不同数据的jdbc driver实现不一样<br>mysql</p>\n<p>jdbc:mysql://localhost:3306/ag_admin?useUnicode=true&amp;characterEncoding=UTF8&amp;connectTimeout=60000&amp;socketTimeout=60000<br>通过url参数传递即可<br>pg</p>\n<p>jdbc:postgresql://localhost/test?user=fred&amp;password=secret&amp;&amp;connectTimeout=60&amp;socketTimeout=60<br>pg也是通过url传递，不过它的单位与mysql不同，mysql是毫秒，而pg是秒<br>oracle</p>\n<p>oracle需要通过oracle.jdbc.ReadTimeout参数来设置，连接超时参数是oracle.net.CONNECT_TIMEOUT<br>通过properties设置<br>            Class.forName(“oracle.jdbc.driver.OracleDriver”);<br>            Properties props = new Properties() ;<br>            props.put( “user” , “test_schema”) ;<br>            props.put( “password” , “pwd”) ;<br>            props.put( “oracle.net.CONNECT_TIMEOUT” , “10000000”) ;<br>            props.put( “oracle.jdbc.ReadTimeout” , “2000” ) ;<br>            Connection conn = DriverManager.getConnection( “jdbc:oracle:thin:@10.0.1.9:1521:orcl” , props ) ;<br>通过环境变量设置<br>String readTimeout = “10000”; // ms<br>System.setProperty(“oracle.jdbc.ReadTimeout”, readTimeout);<br>Class.forName(“oracle.jdbc.OracleDriver”);<br>Connection conn = DriverManager.getConnection(jdbcUrl, user, pwd);<br>注意需要在connection连接之前设置环境变量<br>tomcat jdbc pool<br>一般我们不直接使用jdbc connection，而是使用连接池。由于tomcat jdbc pool是springboot默认使用的数据库连接池，这里就讲述一下如何在tomcat jdbc pool下设置。<br>spring.datasource.tomcat.connectionProperties=oracle.net.CONNECT_TIMEOUT=10000;oracle.jdbc.ReadTimeout=60000<br>注意，这里是分号分隔，单位是毫秒，这里可以根据各自的情况配置前缀(tomcat jdbc连接池的话，默认是spring.datasource.tomcat)，可以自定义，比如<br>@Bean@Qualifier(“writeDataSource”)<br>    @ConfigurationProperties(prefix = “spring.datasource.write”)<br>    public DataSource writeDataSource() {<br>        returnDataSourceBuilder.create().build();<br>    }<br>假设你这里是自定义了prefix为spring.datasource.write，那么上述配置就变为<br>spring.datasource.write.connectionProperties=oracle.net.CONNECT_TIMEOUT=10000;oracle.jdbc.ReadTimeout=60000<br>oracle.jdbc.ReadTimeout如果没有设置的话，driver里头默认是0<br>oracle.jdbc.ReadTimeout</p>\n<p>driver内部将该值设置到oracle.net.READ_TIMEOUT变量上<br>oracle.net.nt.TcpNTAdapter<br>    @Override<br>    publicvoid setReadTimeoutIfRequired(final Properties properties) throws IOException, NetException {<br>        String s = ((Hashtable&lt;K, String&gt;)properties).get(“oracle.net.READ_TIMEOUT”);<br>        if (s == null) {<br>            s = “0”;<br>        }<br>        this.setOption(3, s);<br>    }</p>\n<pre><code>publicvoid setOption(int var1, Object var2) throws IOException, NetException {\n    String var3;\n    switch(var1) {\n    case0:\n        var3 = (String)var2;\n        this.socket.setTcpNoDelay(var3.equals(&quot;YES&quot;));\n        break;\n    case1:\n        var3 = (String)var2;\n        if(var3.equals(&quot;YES&quot;)) {\n            this.socket.setKeepAlive(true);\n        }\n    case2:\n    default:\n        break;\n    case3:\n        this.sockTimeout = Integer.parseInt((String)var2);\n        this.socket.setSoTimeout(this.sockTimeout);\n    }\n\n}\n</code></pre><p>可用看到最后设置的是socket的soTimeout<br>实例</p>\n<pre><code>@Test\npublicvoid testReadTimeout() throws SQLException {\n    Connection connection = dataSource.getConnection();\n    String sql = &quot;select * from demo_table&quot;;\n    PreparedStatement pstmt;\n    try {\n        pstmt = (PreparedStatement)connection.prepareStatement(sql);\n        ResultSet rs = pstmt.executeQuery();\n        int col = rs.getMetaData().getColumnCount();\n        System.out.println(&quot;============================&quot;);\n        while (rs.next()) {\n            for (int i = 1; i &lt;= col; i++) {\n                System.out.print(rs.getObject(i));\n            }\n            System.out.println(&quot;&quot;);\n        }\n        System.out.println(&quot;============================&quot;);\n    } catch (SQLException e) {\n        e.printStackTrace();\n    } finally {\n        //close resources\n    }\n}\n</code></pre><p>超时错误输出<br>//部分数据输出……<br>java.sql.SQLRecoverableException: IO 错误: Socket read timed out<br>    at oracle.jdbc.driver.T4CPreparedStatement.fetch(T4CPreparedStatement.java:1128)<br>    at oracle.jdbc.driver.OracleResultSetImpl.close_or_fetch_from_next(OracleResultSetImpl.java:373)<br>    at oracle.jdbc.driver.OracleResultSetImpl.next(OracleResultSetImpl.java:277)<br>    at com.example.demo.DemoApplicationTests.testReadTimeout(DemoApplicationTests.java:68)<br>    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)<br>    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)<br>    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)<br>    at java.lang.reflect.Method.invoke(Method.java:497)<br>    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)<br>    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)<br>    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)<br>    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)<br>    at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75)<br>    at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)<br>    at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)<br>    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)<br>    at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:252)<br>    at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:94)<br>    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)<br>    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)<br>    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)<br>    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)<br>    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)<br>    at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)<br>    at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)<br>    at org.junit.runners.ParentRunner.run(ParentRunner.java:363)<br>    at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:191)<br>    at org.junit.runner.JUnitCore.run(JUnitCore.java:137)<br>    at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:69)<br>    at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:234)<br>    at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:74)<br>    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)<br>    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)<br>    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)<br>    at java.lang.reflect.Method.invoke(Method.java:497)<br>    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)<br>Caused by: oracle.net.ns.NetException: Socket read timed out<br>    at oracle.net.ns.Packet.receive(Packet.java:339)<br>    at oracle.net.ns.DataPacket.receive(DataPacket.java:106)<br>    at oracle.net.ns.NetInputStream.getNextPacket(NetInputStream.java:315)<br>    at oracle.net.ns.NetInputStream.read(NetInputStream.java:260)<br>    at oracle.net.ns.NetInputStream.read(NetInputStream.java:185)<br>    at oracle.net.ns.NetInputStream.read(NetInputStream.java:102)<br>    at oracle.jdbc.driver.T4CSocketInputStreamWrapper.readNextPacket(T4CSocketInputStreamWrapper.java:124)<br>    at oracle.jdbc.driver.T4CSocketInputStreamWrapper.read(T4CSocketInputStreamWrapper.java:80)<br>    at oracle.jdbc.driver.T4CMAREngine.unmarshalUB1(T4CMAREngine.java:1137)<br>    at oracle.jdbc.driver.T4CTTIfun.receive(T4CTTIfun.java:290)<br>    at oracle.jdbc.driver.T4CTTIfun.doRPC(T4CTTIfun.java:192)<br>    at oracle.jdbc.driver.T4C8Oall.doOALL(T4C8Oall.java:531)<br>    at oracle.jdbc.driver.T4CPreparedStatement.doOall8(T4CPreparedStatement.java:207)<br>    at oracle.jdbc.driver.T4CPreparedStatement.fetch(T4CPreparedStatement.java:1119)<br>    … 35 more<br>刚开始会有数据输出，但是到了某个resultSet的next的时候，报了超时(close_or_fetch_from_next)，这个超时指定的是当result.next方法触发新的一批数据的拉取(当一个fetchSize的数据消费完之后，接下来的next会触发新一批数据的fetch)之后在timeout时间返回内没有收到数据库返回的数据。<br>oracle的jdbc默认的fetchSize为10，也就是每个fetch，如果超过指定时间没接收到数据，则抛出timeout异常。<br>小结</p>\n<p>jdbc的socketTimeout值的设置要非常小心，不同数据库的jdbc driver设置不一样，特别是使用不同连接池的话，设置也可能不尽相同。对于严重依赖数据库操作的服务来说，非常有必要设置这个值，否则万一网络或数据库异常，会导致服务线程一直阻塞在java.net.SocketInputStream.socketRead0。<br>如果查询数据多，则会导致该线程持有的data list不能释放，相当于内存泄露，最后导致OOM</p>\n<h1 id=\"如果请求数据库操作很多且阻塞住了，会导致服务器可用的woker线程变少，严重则会导致服务不可用，nginx报504-Gateway-Timeout\"><a href=\"#如果请求数据库操作很多且阻塞住了，会导致服务器可用的woker线程变少，严重则会导致服务不可用，nginx报504-Gateway-Timeout\" class=\"headerlink\" title=\"如果请求数据库操作很多且阻塞住了，会导致服务器可用的woker线程变少，严重则会导致服务不可用，nginx报504 Gateway Timeout\"></a>如果请求数据库操作很多且阻塞住了，会导致服务器可用的woker线程变少，严重则会导致服务不可用，nginx报504 Gateway Timeout</h1><p>附：错误日志<br>org.apache.catalina.connector.ClientAbortException: java.io.IOException: Broken pipe<br>        at org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:393)<br>        at org.apache.tomcat.util.buf.ByteChunk.flushBuffer(ByteChunk.java:426)<br>        at org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:342)<br>        at org.apache.catalina.connector.OutputBuffer.flush(OutputBuffer.java:317)<br>        at org.apache.catalina.connector.CoyoteOutputStream.flush(CoyoteOutputStream.java:110)<br>        at org.springframework.session.web.http.OnCommittedResponseWrapper$SaveContextServletOutputStream.flush(OnCommittedResponseWrapper.java:437)<br>        at com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter.write(FastJsonHttpMessageConverter.java:216)<br>        at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:183)<br>        at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:81)<br>        at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:126)<br>        at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:832)<br>        at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:743)<br>        at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)<br>        at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:961)<br>        at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:895)<br>        at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:967)<br>        at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:858)<br>        at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)<br>        at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:843)<br>        at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)<br>        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:292)<br>        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)<br>        at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)<br>        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)<br>        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)<br>        at com.yjf.common.web.CrossScriptingFilter.doFilter(CrossScriptingFilter.java:120)<br>        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)<br>        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)<br>        at com.yiji.boot.web.common.ResponseHeaderFilter.doFilterInternal(ResponseHeaderFilter.java:62)<br>        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)<br>        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)<br>        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)<br>        at com.yiji.boot.actuator.acl.ActuatorACLFilter.doFilter(ActuatorACLFilter.java:36)<br>        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)<br>        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)<br>        at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)<br>        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)<br>        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)<br>        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)<br>        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)<br>        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)<br>        at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:121)<br>        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)<br>        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)<br>        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)<br>        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:212)<br>        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)<br>        at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)<br>        at org.apache.catalina.valves.RemoteIpValve.invoke(RemoteIpValve.java:676)<br>        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:141)<br>        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)<br>        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)<br>        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:522)<br>        at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1095)<br>        at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:672)<br>        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1502)<br>        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1458)<br>        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)<br>        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)<br>        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)<br>        at java.lang.Thread.run(Thread.java:745)<br>Caused by: java.io.IOException: Broken pipe<br>        at sun.nio.ch.FileDispatcherImpl.write0(Native Method)<br>        at sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:47)<br>        at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93)<br>        at sun.nio.ch.IOUtil.write(IOUtil.java:65)<br>        at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:471)<br>        at org.apache.tomcat.util.net.NioChannel.write(NioChannel.java:124)<br>        at org.apache.tomcat.util.net.NioBlockingSelector.write(NioBlockingSelector.java:101)<br>        at org.apache.tomcat.util.net.NioSelectorPool.write(NioSelectorPool.java:172)<br>        at org.apache.coyote.http11.InternalNioOutputBuffer.writeToSocket(InternalNioOutputBuffer.java:139)<br>        at org.apache.coyote.http11.InternalNioOutputBuffer.addToBB(InternalNioOutputBuffer.java:197)<br>        at org.apache.coyote.http11.InternalNioOutputBuffer.access$000(InternalNioOutputBuffer.java:41)<br>        at org.apache.coyote.http11.InternalNioOutputBuffer$SocketOutputBuffer.doWrite(InternalNioOutputBuffer.java:320)<br>        at org.apache.coyote.http11.filters.ChunkedOutputFilter.doWrite(ChunkedOutputFilter.java:116)<br>        at org.apache.coyote.http11.AbstractOutputBuffer.doWrite(AbstractOutputBuffer.java:256)<br>        at org.apache.coyote.Response.doWrite(Response.java:501)<br>        at org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:388)<br>        … 63 common frames omitted</p>\n<p>2018-07-27 11:04:24.377 ERROR [http-nio-8313-exec-12] [dispatcherServlet]– Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.IllegalStateException: getOutputStream() has already been called for this response] with root cause<br>java.lang.IllegalStateException: getOutputStream() has already been called for this response<br>        at org.apache.catalina.connector.Response.getWriter(Response.java:564)<br>        at org.apache.catalina.connector.ResponseFacade.getWriter(ResponseFacade.java:212)<br>        at javax.servlet.ServletResponseWrapper.getWriter(ServletResponseWrapper.java:152)<br>        at javax.servlet.ServletResponseWrapper.getWriter(ServletResponseWrapper.java:152)<br>        at org.springframework.session.web.http.OnCommittedResponseWrapper.getWriter(OnCommittedResponseWrapper.java:133)<br>        at javax.servlet.ServletResponseWrapper.getWriter(ServletResponseWrapper.java:152)<br>        at org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration$SpelView.render(ErrorMvcAutoConfiguration.java:195)<br>        at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1246)<br>        at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1029)<br>        at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:973)<br>        at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:895)<br>        at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:967)<br>        at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:858)<br>        at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)<br>        at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:843)<br>        at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)<br>        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:292)<br>        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)<br>        at com.yjf.common.web.CrossScriptingFilter.doFilter(CrossScriptingFilter.java:92)<br>        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)<br>        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)<br>        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101)<br>        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)<br>        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)<br>        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1、问题描述：<br>18.07.27， 10：50分dba进行mysql数据库碎片整理，11：04分，发现数据库连接爆满，此时应用已处于down掉的状态，11：22数据库强行kill，11：40分之前发现应用并没有进行新的连接，此时停止应用发现停不下来，不得不kill掉应用进程，重启后恢复。但此时发现，之前入库的记录并没有成功，而mq由于没有收到应用的ack确认消息，消息重新进入队列并重发，加上数据没入库，交易进行了重复的操作！由于是全名抢车业务，导致重复上账，重复充退。</p>\n<p>2、问题分析<br>由于没有及时的dump保护现场，加上应用down掉后，日志少的可怜，只有一些Broken pipe，以及该getOuptStream()异常，后期只能从代码层面分析。</p>\n<p>3、分析<br>jdbc sockeTimeout时间并没有设置，所以默认使用的mysql的或者操作系统本身的socketTimeout 该问题会引发类似问题</p>\n<p>相关文档:<br><a href=\"http://www.sohu.com/a/142039227_505885\" target=\"_blank\" rel=\"noopener\">http://www.sohu.com/a/142039227_505885</a><br><a href=\"http://www.sohu.com/a/141155649_539864?qq-pf-to=pcqq.c2c\" target=\"_blank\" rel=\"noopener\">http://www.sohu.com/a/141155649_539864?qq-pf-to=pcqq.c2c</a><br><a href=\"https://blog.csdn.net/lx348321409/article/details/76095751\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/lx348321409/article/details/76095751</a><br><a href=\"https://segmentfault.com/a/1190000012944562\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000012944562</a><br><a href=\"https://www.cubrid.org/blog/understanding-jdbc-internals-and-timeout-configuration\" target=\"_blank\" rel=\"noopener\">https://www.cubrid.org/blog/understanding-jdbc-internals-and-timeout-configuration</a></p>\n<p>=====================================================<br>jdbc timeout类别</p>\n<p>主要有如下几个类别</p>\n<p><img src=\"\\images\\pasted-16.png\" alt=\"upload successful\"><br>transaction timeout<br>设置的是一个事务的执行时间，里头可能包含多个statement<br>statement timeout(也相当于result set fetch timeout)<br>设置的是一个statement的执行超时时间，即driver等待statement执行完成，接收到数据的超时时间(注意statement的timeout不是整个查询的timeout，只是statement执行完成并拉取fetchSize数据返回的超时，之后resultSet的next在必要的时候还会触发fetch数据，每次fetch的超时时间是单独算的，默认也是以statement设置的timeout为准)<br>jdbc socket timeout<br>设置的是jdbc I/O socket read and write operations的超时时间，防止因网络问题或数据库问题，导致driver一直阻塞等待。(建议比statement timeout的时间长)<br>os socket timeout<br>这个是操作系统级别的socket设置(如果jdbc socket timeout没有设置，而os级别的socket timeout有设置，则使用系统的socket timeout值)。<br>上面的不同级别的timeout越往下优先级越高，也就是说如果下面的配置比上面的配置值小的话，则会优先触发timeout，那么相当于上面的配置值就”失效”了。<br>jdbc socket timeout</p>\n<p>这个不同数据的jdbc driver实现不一样<br>mysql</p>\n<p>jdbc:mysql://localhost:3306/ag_admin?useUnicode=true&amp;characterEncoding=UTF8&amp;connectTimeout=60000&amp;socketTimeout=60000<br>通过url参数传递即可<br>pg</p>\n<p>jdbc:postgresql://localhost/test?user=fred&amp;password=secret&amp;&amp;connectTimeout=60&amp;socketTimeout=60<br>pg也是通过url传递，不过它的单位与mysql不同，mysql是毫秒，而pg是秒<br>oracle</p>\n<p>oracle需要通过oracle.jdbc.ReadTimeout参数来设置，连接超时参数是oracle.net.CONNECT_TIMEOUT<br>通过properties设置<br>            Class.forName(“oracle.jdbc.driver.OracleDriver”);<br>            Properties props = new Properties() ;<br>            props.put( “user” , “test_schema”) ;<br>            props.put( “password” , “pwd”) ;<br>            props.put( “oracle.net.CONNECT_TIMEOUT” , “10000000”) ;<br>            props.put( “oracle.jdbc.ReadTimeout” , “2000” ) ;<br>            Connection conn = DriverManager.getConnection( “jdbc:oracle:thin:@10.0.1.9:1521:orcl” , props ) ;<br>通过环境变量设置<br>String readTimeout = “10000”; // ms<br>System.setProperty(“oracle.jdbc.ReadTimeout”, readTimeout);<br>Class.forName(“oracle.jdbc.OracleDriver”);<br>Connection conn = DriverManager.getConnection(jdbcUrl, user, pwd);<br>注意需要在connection连接之前设置环境变量<br>tomcat jdbc pool<br>一般我们不直接使用jdbc connection，而是使用连接池。由于tomcat jdbc pool是springboot默认使用的数据库连接池，这里就讲述一下如何在tomcat jdbc pool下设置。<br>spring.datasource.tomcat.connectionProperties=oracle.net.CONNECT_TIMEOUT=10000;oracle.jdbc.ReadTimeout=60000<br>注意，这里是分号分隔，单位是毫秒，这里可以根据各自的情况配置前缀(tomcat jdbc连接池的话，默认是spring.datasource.tomcat)，可以自定义，比如<br>@Bean@Qualifier(“writeDataSource”)<br>    @ConfigurationProperties(prefix = “spring.datasource.write”)<br>    public DataSource writeDataSource() {<br>        returnDataSourceBuilder.create().build();<br>    }<br>假设你这里是自定义了prefix为spring.datasource.write，那么上述配置就变为<br>spring.datasource.write.connectionProperties=oracle.net.CONNECT_TIMEOUT=10000;oracle.jdbc.ReadTimeout=60000<br>oracle.jdbc.ReadTimeout如果没有设置的话，driver里头默认是0<br>oracle.jdbc.ReadTimeout</p>\n<p>driver内部将该值设置到oracle.net.READ_TIMEOUT变量上<br>oracle.net.nt.TcpNTAdapter<br>    @Override<br>    publicvoid setReadTimeoutIfRequired(final Properties properties) throws IOException, NetException {<br>        String s = ((Hashtable&lt;K, String&gt;)properties).get(“oracle.net.READ_TIMEOUT”);<br>        if (s == null) {<br>            s = “0”;<br>        }<br>        this.setOption(3, s);<br>    }</p>\n<pre><code>publicvoid setOption(int var1, Object var2) throws IOException, NetException {\n    String var3;\n    switch(var1) {\n    case0:\n        var3 = (String)var2;\n        this.socket.setTcpNoDelay(var3.equals(&quot;YES&quot;));\n        break;\n    case1:\n        var3 = (String)var2;\n        if(var3.equals(&quot;YES&quot;)) {\n            this.socket.setKeepAlive(true);\n        }\n    case2:\n    default:\n        break;\n    case3:\n        this.sockTimeout = Integer.parseInt((String)var2);\n        this.socket.setSoTimeout(this.sockTimeout);\n    }\n\n}\n</code></pre><p>可用看到最后设置的是socket的soTimeout<br>实例</p>\n<pre><code>@Test\npublicvoid testReadTimeout() throws SQLException {\n    Connection connection = dataSource.getConnection();\n    String sql = &quot;select * from demo_table&quot;;\n    PreparedStatement pstmt;\n    try {\n        pstmt = (PreparedStatement)connection.prepareStatement(sql);\n        ResultSet rs = pstmt.executeQuery();\n        int col = rs.getMetaData().getColumnCount();\n        System.out.println(&quot;============================&quot;);\n        while (rs.next()) {\n            for (int i = 1; i &lt;= col; i++) {\n                System.out.print(rs.getObject(i));\n            }\n            System.out.println(&quot;&quot;);\n        }\n        System.out.println(&quot;============================&quot;);\n    } catch (SQLException e) {\n        e.printStackTrace();\n    } finally {\n        //close resources\n    }\n}\n</code></pre><p>超时错误输出<br>//部分数据输出……<br>java.sql.SQLRecoverableException: IO 错误: Socket read timed out<br>    at oracle.jdbc.driver.T4CPreparedStatement.fetch(T4CPreparedStatement.java:1128)<br>    at oracle.jdbc.driver.OracleResultSetImpl.close_or_fetch_from_next(OracleResultSetImpl.java:373)<br>    at oracle.jdbc.driver.OracleResultSetImpl.next(OracleResultSetImpl.java:277)<br>    at com.example.demo.DemoApplicationTests.testReadTimeout(DemoApplicationTests.java:68)<br>    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)<br>    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)<br>    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)<br>    at java.lang.reflect.Method.invoke(Method.java:497)<br>    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)<br>    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)<br>    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)<br>    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)<br>    at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75)<br>    at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)<br>    at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)<br>    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)<br>    at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:252)<br>    at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:94)<br>    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)<br>    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)<br>    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)<br>    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)<br>    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)<br>    at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)<br>    at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)<br>    at org.junit.runners.ParentRunner.run(ParentRunner.java:363)<br>    at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:191)<br>    at org.junit.runner.JUnitCore.run(JUnitCore.java:137)<br>    at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:69)<br>    at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:234)<br>    at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:74)<br>    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)<br>    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)<br>    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)<br>    at java.lang.reflect.Method.invoke(Method.java:497)<br>    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)<br>Caused by: oracle.net.ns.NetException: Socket read timed out<br>    at oracle.net.ns.Packet.receive(Packet.java:339)<br>    at oracle.net.ns.DataPacket.receive(DataPacket.java:106)<br>    at oracle.net.ns.NetInputStream.getNextPacket(NetInputStream.java:315)<br>    at oracle.net.ns.NetInputStream.read(NetInputStream.java:260)<br>    at oracle.net.ns.NetInputStream.read(NetInputStream.java:185)<br>    at oracle.net.ns.NetInputStream.read(NetInputStream.java:102)<br>    at oracle.jdbc.driver.T4CSocketInputStreamWrapper.readNextPacket(T4CSocketInputStreamWrapper.java:124)<br>    at oracle.jdbc.driver.T4CSocketInputStreamWrapper.read(T4CSocketInputStreamWrapper.java:80)<br>    at oracle.jdbc.driver.T4CMAREngine.unmarshalUB1(T4CMAREngine.java:1137)<br>    at oracle.jdbc.driver.T4CTTIfun.receive(T4CTTIfun.java:290)<br>    at oracle.jdbc.driver.T4CTTIfun.doRPC(T4CTTIfun.java:192)<br>    at oracle.jdbc.driver.T4C8Oall.doOALL(T4C8Oall.java:531)<br>    at oracle.jdbc.driver.T4CPreparedStatement.doOall8(T4CPreparedStatement.java:207)<br>    at oracle.jdbc.driver.T4CPreparedStatement.fetch(T4CPreparedStatement.java:1119)<br>    … 35 more<br>刚开始会有数据输出，但是到了某个resultSet的next的时候，报了超时(close_or_fetch_from_next)，这个超时指定的是当result.next方法触发新的一批数据的拉取(当一个fetchSize的数据消费完之后，接下来的next会触发新一批数据的fetch)之后在timeout时间返回内没有收到数据库返回的数据。<br>oracle的jdbc默认的fetchSize为10，也就是每个fetch，如果超过指定时间没接收到数据，则抛出timeout异常。<br>小结</p>\n<p>jdbc的socketTimeout值的设置要非常小心，不同数据库的jdbc driver设置不一样，特别是使用不同连接池的话，设置也可能不尽相同。对于严重依赖数据库操作的服务来说，非常有必要设置这个值，否则万一网络或数据库异常，会导致服务线程一直阻塞在java.net.SocketInputStream.socketRead0。<br>如果查询数据多，则会导致该线程持有的data list不能释放，相当于内存泄露，最后导致OOM</p>\n<h1 id=\"如果请求数据库操作很多且阻塞住了，会导致服务器可用的woker线程变少，严重则会导致服务不可用，nginx报504-Gateway-Timeout\"><a href=\"#如果请求数据库操作很多且阻塞住了，会导致服务器可用的woker线程变少，严重则会导致服务不可用，nginx报504-Gateway-Timeout\" class=\"headerlink\" title=\"如果请求数据库操作很多且阻塞住了，会导致服务器可用的woker线程变少，严重则会导致服务不可用，nginx报504 Gateway Timeout\"></a>如果请求数据库操作很多且阻塞住了，会导致服务器可用的woker线程变少，严重则会导致服务不可用，nginx报504 Gateway Timeout</h1><p>附：错误日志<br>org.apache.catalina.connector.ClientAbortException: java.io.IOException: Broken pipe<br>        at org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:393)<br>        at org.apache.tomcat.util.buf.ByteChunk.flushBuffer(ByteChunk.java:426)<br>        at org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:342)<br>        at org.apache.catalina.connector.OutputBuffer.flush(OutputBuffer.java:317)<br>        at org.apache.catalina.connector.CoyoteOutputStream.flush(CoyoteOutputStream.java:110)<br>        at org.springframework.session.web.http.OnCommittedResponseWrapper$SaveContextServletOutputStream.flush(OnCommittedResponseWrapper.java:437)<br>        at com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter.write(FastJsonHttpMessageConverter.java:216)<br>        at org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:183)<br>        at org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:81)<br>        at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:126)<br>        at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:832)<br>        at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:743)<br>        at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)<br>        at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:961)<br>        at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:895)<br>        at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:967)<br>        at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:858)<br>        at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)<br>        at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:843)<br>        at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)<br>        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:292)<br>        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)<br>        at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)<br>        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)<br>        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)<br>        at com.yjf.common.web.CrossScriptingFilter.doFilter(CrossScriptingFilter.java:120)<br>        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)<br>        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)<br>        at com.yiji.boot.web.common.ResponseHeaderFilter.doFilterInternal(ResponseHeaderFilter.java:62)<br>        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)<br>        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)<br>        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)<br>        at com.yiji.boot.actuator.acl.ActuatorACLFilter.doFilter(ActuatorACLFilter.java:36)<br>        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)<br>        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)<br>        at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)<br>        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)<br>        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)<br>        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)<br>        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)<br>        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)<br>        at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:121)<br>        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)<br>        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)<br>        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)<br>        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:212)<br>        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106)<br>        at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)<br>        at org.apache.catalina.valves.RemoteIpValve.invoke(RemoteIpValve.java:676)<br>        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:141)<br>        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)<br>        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88)<br>        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:522)<br>        at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1095)<br>        at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:672)<br>        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1502)<br>        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1458)<br>        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)<br>        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)<br>        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)<br>        at java.lang.Thread.run(Thread.java:745)<br>Caused by: java.io.IOException: Broken pipe<br>        at sun.nio.ch.FileDispatcherImpl.write0(Native Method)<br>        at sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:47)<br>        at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93)<br>        at sun.nio.ch.IOUtil.write(IOUtil.java:65)<br>        at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:471)<br>        at org.apache.tomcat.util.net.NioChannel.write(NioChannel.java:124)<br>        at org.apache.tomcat.util.net.NioBlockingSelector.write(NioBlockingSelector.java:101)<br>        at org.apache.tomcat.util.net.NioSelectorPool.write(NioSelectorPool.java:172)<br>        at org.apache.coyote.http11.InternalNioOutputBuffer.writeToSocket(InternalNioOutputBuffer.java:139)<br>        at org.apache.coyote.http11.InternalNioOutputBuffer.addToBB(InternalNioOutputBuffer.java:197)<br>        at org.apache.coyote.http11.InternalNioOutputBuffer.access$000(InternalNioOutputBuffer.java:41)<br>        at org.apache.coyote.http11.InternalNioOutputBuffer$SocketOutputBuffer.doWrite(InternalNioOutputBuffer.java:320)<br>        at org.apache.coyote.http11.filters.ChunkedOutputFilter.doWrite(ChunkedOutputFilter.java:116)<br>        at org.apache.coyote.http11.AbstractOutputBuffer.doWrite(AbstractOutputBuffer.java:256)<br>        at org.apache.coyote.Response.doWrite(Response.java:501)<br>        at org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:388)<br>        … 63 common frames omitted</p>\n<p>2018-07-27 11:04:24.377 ERROR [http-nio-8313-exec-12] [dispatcherServlet]– Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.IllegalStateException: getOutputStream() has already been called for this response] with root cause<br>java.lang.IllegalStateException: getOutputStream() has already been called for this response<br>        at org.apache.catalina.connector.Response.getWriter(Response.java:564)<br>        at org.apache.catalina.connector.ResponseFacade.getWriter(ResponseFacade.java:212)<br>        at javax.servlet.ServletResponseWrapper.getWriter(ServletResponseWrapper.java:152)<br>        at javax.servlet.ServletResponseWrapper.getWriter(ServletResponseWrapper.java:152)<br>        at org.springframework.session.web.http.OnCommittedResponseWrapper.getWriter(OnCommittedResponseWrapper.java:133)<br>        at javax.servlet.ServletResponseWrapper.getWriter(ServletResponseWrapper.java:152)<br>        at org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration$SpelView.render(ErrorMvcAutoConfiguration.java:195)<br>        at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1246)<br>        at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1029)<br>        at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:973)<br>        at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:895)<br>        at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:967)<br>        at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:858)<br>        at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)<br>        at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:843)<br>        at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)<br>        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:292)<br>        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)<br>        at com.yjf.common.web.CrossScriptingFilter.doFilter(CrossScriptingFilter.java:92)<br>        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)<br>        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)<br>        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101)<br>        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)<br>        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)<br>        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101)</p>\n"},{"title":"java对象的诞生与消亡","author":"Xiang Chuang","date":"2019-04-08T08:54:00.000Z","_content":"## 说在前面\n&emsp;&emsp;本文将从java对象的角度出发，探讨java应用运行过程中“对象”从诞生到消亡的生命历程，结合jvm的相关技术方案简要阐述各个环节的实现细节。需要指出的是，本文旨在阐述清楚“对象”的生命周期，对于jvm（本文基于HotSpot虚拟机）相关技术的深层次原理只会点到为止（能描述清“对象”的生命周期即可），后续将会在其他文章中单独罗列出各个主题进行深入剖析。\n\n## 概述\n+ [java内存区域](#partI)\n+ [java对象](#partII)\n+ [垃圾回收](#partIII)\n+ [内存调优](#partIV)\n\n----------------------------------\n\n## java内存区域\n&emsp;&emsp;java对象生存的载体-运行时数据区，虚拟机中数据区大致包含如下图所示的几个区域： \n![upload successful](\\images\\pasted-74.png)\n1、程序计数器\n&emsp;&emsp;当前线程所执行的字节码的行号指示器，标识执行到的节点，这是一块较小的内存空间。由于任何时刻，一个处理器（多核处理器中的某一核）只会执行一个线程中的指令，因此，每个线程都有一个独立、私有的程序计数器。此区域（唯一一个）在java虚拟机规范中没有规定任何OOM的情况。\n2、虚拟机栈\n&emsp;&emsp;其生命周期与线程相同，方法在执行时都会创建一个栈帧用于存储局部变量表、操作数栈、动态链接、方法出口等信息，每一个方法的调用就是相应栈帧在虚拟机栈中入栈和出栈的过程。\n局部变量表：存放编译期可知的各种基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（指向对象起始地址的引用指针-HotSpot方案、或者指向一个代表对象的句柄或其他与此对象相关的位置）、returnAddress类型（执行一条字节码指令的地址）。其中，除long和double占用2个局部变量空间（Slot）外，其余只占用1个Slot。局部变量表所需内存空间在编译期间完成分配，运行期间不会改变大小，即，进入一个方法时，栈帧中所需分配的局部变量空间是确定的。java虚拟机规范对此区域规定了两类异常情况，1是线程请求的栈深度大于虚拟机所允许的深度时抛出StackOverflowError，2是可动态扩展的虚拟机栈扩展时无法申请到足够的内存时抛出OOM。\n3、本地方法栈\n&emsp;&emsp;HotSpot将其与虚拟机栈合二为一。它是为虚拟机所使用到的Native方法服务。它可能抛出的异常与虚拟机栈一致。\n4、堆\n&emsp;&emsp;此区域用于存放对象的实例。java虚拟机规范原文：The heap is the runtime data area from which memory for all class instances and arrays is allocated.此区域会抛出OOM异常。由于这个区域存分的是对象实例且是线程共享区域，因此在后续的内容中将以此为核心进行讲述。\n5、方法区（HotSpot，jdk8之后已由元空间取代）\n&emsp;&emsp;该区域用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据，为了与java堆区分开来，java虚拟机规范为其命了一个别名Non-Heap。该区域会抛出OOM。\n6、运行时常量池\n&emsp;&emsp;方法区的一部分，Clas文件中除了由类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池，用于存放编译期生产的各种字面量和符号引用。除了编译期间会产生常量，java允许运行期间产生常量并存放到运行时常量池中，如String.intern()。该区域是方法区的一部分，因此申请不到内存时也会抛出OOM。\n7、直接内存\n&emsp;&emsp;它不属于虚拟机运行时数据区的一部分，但其也可能出现OOM，且使用频繁（如NIO类，引入了基于通道（Channel）与缓冲区（Buffer）的I/O方式，可使用Native函数直接分配堆外内存，然后通过一个存储在java堆中的DirectByteBuffer对象作为这块内存的引用进行操作，这样避免了在java堆与Native堆中来回复制数据从而提升了性能）。该区域使用超过机器内存等限制时会抛出OOM。\n8、元空间\n&emsp;&emsp;如示意图中所述，HotSpot在jdk8（含）之后，已经移除了老年代（方法区），转由元空间（metaspace）实现，即本地内存Native Memory。\n&emsp;&emsp;至于为什么使用本地内存替换永久代，官网有如此描述：This is part of the JRockit and Hotspot convergence effort. JRockit customers do not need to configure the permanent generation (since JRockit does not have a permanent generation) and are accustomed to not configuring the permanent generation.\n&emsp;&emsp;具体移除细节，官网由如此描述：The proposed implementation will allocate class meta-data in native memory and move interned Strings and class statics to the Java heap.\n&emsp;&emsp;详细信息参见官网地址http://openjdk.java.net/jeps/122\n\n----------------------------------\n\n## java对象\n \n&emsp;&emsp;前面聊完java对象身存的载体的具体结构，下面我们聊一聊java对象本身的一些事，需要说明的的是，此处是基于HotSpot探讨java对象在堆空间上实例的创建、布局以及访问。\n1、对象的创建\n&emsp;&emsp;从语言层面来讲，java对象的创建就是一个new关键字，当应用运行时，虚拟机遇到一条new指令，将进行如下操作：\n&emsp;&emsp;##检查类的加载：检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已经被加载、解析和初始化。\n&emsp;&emsp;##分配内存：java堆内存是否规整决定了如何分配内存，规整的内存，采用“指针碰撞”（Bump the Pointer），即从已用内存和空闲内存的指针分界点开始向空闲内存移动与对象大小相等的距离即可；如何内存不规整，则需要维护空闲列表（Free List），分配时从列表中选择足够大的空间划分给对象的实例。java堆是否规整与垃圾采集器是否带有压缩整理功能有关，如使用Serial、ParNew这种带Compact过程的收集器时采用指针碰撞，使用CMS这种基于Mark-Sweep算法的收集器时采用空闲列表。另外一个需要考虑的问题是线程安全，解决这个问题有两种方案，1是采用CAS保证原子性；2是为每个线程在java堆中预先分配一小块，即本地线程分配缓冲（TLAB），只需在分配新的TLAB时进行同步锁定，-XX：+/-UseTLAB。\n&emsp;&emsp;##初始化为0值：此处不包括对象头，这个操作保证了对象的实例可以不赋初始值即可使用。\n&emsp;&emsp;##对象头信息设置：对象头中包含如，这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的GC分代年龄、锁等信息。\n&emsp;&emsp;##初始化（执行<init>方法）：一般来说，执行new指令之后会接着执行<init>方法（由字节码中是否跟随invokespecial指令决定），从而，一个真正可以使用的对象诞生。\n2、对象的内存布局\n&emsp;&emsp;HotSpot中，对象在内存中存储的布局分为3部分：对象头（Header）、实例数据（Instance Data）以及对齐填充（Padding）。\n&emsp;&emsp;##对象头：对象头包含两部分，1是用于存储对象自身的运行时数据Mark Work，在32位和64位的虚拟机中分别占32bit、64bit,包含信息如哈希码、GC分代年龄、锁状态标志、线程持有的锁、偏向锁线程ID、偏向时间戳等。eg：32位未锁定状态的对象，25bit用于存储对象哈希码、4bit用于存储对象分代年龄、2bit用于存储锁标识位，1bit固定为0；2是类型指针，即对象指向它的类元数据的指针；对于数组来说，对象头还需有一块用于记录数组长度的数据从而确定数组的大小。\n&emsp;&emsp;##实例数据：HotSpot默认的分配策略为longs/doubles、ints、shorts/chars、bytes/boolean、oops（Oddinary Pointers），相同宽度的字段被分配在一起，父类定义的变量位于子类变量之前（如果CompactFields=true，子类较窄的变量也可能插入到父类变量的空隙中）。\n&emsp;&emsp;##对齐填充：HotSpot要求对象起始地址必须是8字节的整数倍，对象头正好符合，因此对象实例数据可用对齐填充来补全。\n3、对象的访问定位\n&emsp;&emsp;java程序需要通过栈上的reference数据来操作堆上的具体对象。\n&emsp;&emsp;##使用句柄访问：reference中存储的是对象的句柄地址，句柄中包含了对象实例数据与类型数据各自的具体地址，此方式，java堆划分出特定的内存作为句柄池。对象的定位需要两次指针定位，1次找到句柄、另1次找到具体的对象，好处则在于垃圾回收后，对象并移动，不用更改reference中的地址，只需更改句柄池中对应的地址。\n&emsp;&emsp;##使用直接指针访问：reference中存储的是对象地址。对象的定位一次就能找到，提升了性能，HotSpot采用此方案。\n4、对象的存活  \n&emsp;&emsp;前一部分提到，java程序通过栈上的reference数据操作堆上的对象，被操作的对象称之为被引用。对象是否存活与其是否尚被引用有关，那么我们首先来谈一谈引用。\n&emsp;&emsp;引用可分为强引用（Strong Reference）、软引用（Soft Reference）、弱引用（Weak Reference）、虚引用（Phantom Reference）。\n&emsp;&emsp;##强引用：类似于赋值语句那种，垃圾回收器不会回收被引用对象\n&emsp;&emsp;##软引用：jdk提供了SoftReference类实现软引用，指一些有用但并非必须的对象，系统OOM之前会回收此类对象\n&emsp;&emsp;##弱引用：jdk提供了WeakReference类实现弱引用，下一次GC时回收此类对象\n&emsp;&emsp;##虚引用：jdk提供了PhantomReference类实现虚引用，也称之为幽灵引用，对象是否存在虚引用对其本身无任何影响，且无法通过虚引用获得一个对象实例，因此，为对象设置一个虚引用的唯一目的是该对象被回收时收到一个系统通知\n&emsp;&emsp;下面来谈谈判断对象是否存活的两类算法：\n&emsp;&emsp;引用计数算法：给对象添加一个引用计算器，值为0时代表对象可回收，但，对于循环依赖来说，这似乎是个问题\n&emsp;&emsp;可达性分析算法：以一系列被称为GC Roots的对象（虚拟机栈即栈帧中本地变量表中引用的对象；方法区中类静态属性引用的对象；方法区中常量引用的对象；本地方法栈中JNI引用的对象）为起点进行搜索，判断对象是否有引用链到达GC Roots，如果没有，代表对象可回收。\n&emsp;&emsp;需要说明的是，利用可达性分析出不可达的对象，并不一定会立即回收，因为进行标记时会做一次筛选（条件是对象是否有必要执行finalize(),如果对象没有覆盖此方法或此方法被执行过一次，则不必要，否则会把此类对象放入一个F-Queue队列中由虚拟机自建一个低优先级的Finalizer线程去执行，为了避免执行缓慢，其并不会等待执行结果）。  \n\n----------------------------------\n\n## 垃圾回收\n \n&emsp;&emsp;再谈对象创建之内存分配\n&emsp;&emsp;这是一个及其重要的环节，且，根据垃圾回收机制的不同而有所差别，在聊垃圾回收之前，我想有必要就这点多说几句。\n&emsp;&emsp;##对象优先分配在Eden区域，即年轻代\n&emsp;&emsp;##大对象直接分配在老年代，需要说明的是何为大对象，不同收集器定义的不一样，Serial及ParNew收集器采用参数-XX:PretenureSizeThreshold指定，G1则默认为大于区域region大小一半的对象\n&emsp;&emsp;##长期存活的对象进入老年代，一般默认为熬过15次年轻代回收的对象，该值可以调整，具体参数名根据收集器的约定而定。另外，如果Survivor空间中相同年龄所有对象大小的总和大于Survivor空间的一半，年龄大于等于该年龄的对象直接进入老年代（针对Serial及ParNew）\n&emsp;&emsp;##空间分配担保：只要老年代的连续空间大于新生代对象总大小或历次晋升的平局大小则进行MinorGC，否则进行Full GC（针对Serial及ParNew）\n&emsp;&emsp;前面大概聊了一下虚拟机内存区域以及java对象本身的那点事，这是一个java开发者必备的基础知识，因为你不仅仅应该知道Object obj = new Object（），你更应该清楚java对象究竟是如何诞生的，JVM在这里面做了什么，另一方面，你还应该清楚JVM又是如何替我们清理那些不再被引用的对象。\n&emsp;&emsp;首先，我们来简单聊聊垃圾收集算法：\n&emsp;&emsp;标记-清除（Mark-Sweep）算法：顾名思义，它包含两步，一是标记需要回收的对象，二是清除被标记的对象。但有两个明显的问题是，标记和清除两个环节效率都不高，其次，直接清除会导致内存碎片，这将导致大对象无法找到足够大小的连续空间来分配，从而提前下一次GC。\n&emsp;&emsp;复制（Copying）算法：将内存划分为几块，当一块内存用完后，把存活的对象移动至另一块，再把当前块已使用的空间一性清理掉。但这会导致预留的那部分空间分配时不能用。如HotSpot实现为，将内存分为Eden和两个Survivor，Eden：Survivro为8：1，即预留了10%的空间。需要指出的是，如果对象生命周期长，那么预留的空间也许会出现不够用，这时便需要其他内存进行分配担保（Handle Promotion），这里指的是老年代内存。因为需要额外的空间做担保，那么此算法不适合老年代回收。\n&emsp;&emsp;标记-整理（Mark-Compact）算法：完成标记后，让所有存活的对象向一端移动，然后直接清理掉端边界之外的内存。\n&emsp;&emsp;最后要说明的是，当前的商业虚拟机采用分代收集，即区分新生代和老年代，根据其不同特点搭配不通的垃圾收集算法，如年轻代使用复制算法，老年代使用标记-清除算法或标记-整理算法。\n&emsp;&emsp;HotSpot实现垃圾回收简介：\n&emsp;&emsp;##进行对象可达性分析时，要考虑一致性问题，因为对象的引用随着应用线程的运行不停的变更着，因此需要STW，由于STW对应用线程影响很大，各种垃圾回收器中对此做了通盘的考虑，但即使如CMS这种号称不会STW的收集器也无法避免枚举根节点时的GC停顿。另外，HotSpot设计了基于OopMap的数据结构来记录对象的引用以提升效率。\n&emsp;&emsp;安全点：为指令生产OopMap需要大量额外的空间，因此，HotSpot设计中并没为每条指令生成OopMap，只是在一些成为安全点的特定位置记录这些信息，即，只有当线程进入到安全点时才能暂停下来开始GC。安全点的选定是有讲究的，不可过多也不可过少，所以基本考虑在长时间执行的部分设置安全点，如方法调用、循环跳转、异常跳转等。对于线程在安全点如何停下来的问题，有两种手段，一是抢先式中断、二是主动式中断。HotSpot选择后者，即，GC设置中断标识，用户线程主动轮询是否需要中断，轮询标志的地方和安全点重合。\n&emsp;&emsp;安全区域：对于某些暂时未分配到CUP时间的线程，如其处于Sleep或Blocked状态，JVM不可能瞎等其得到CPU时间后跑到安全点，因此提供了安全区域解决该问题。安全区域中，引用关系不会发生变化，线程进去安全区域时会标识自己已进入，离开时，需要判断系统是否已经完成了根节点枚举或者整个GC过程，没有完成时需等待接收可以离开的信号。\n&emsp;&emsp;接下来我们来聊聊HotSpot定义的垃圾回收器，这是一个重要的话题，也是日常开发中我们最直接面对的课题，先上一个总图（这里代表的是jdk11之前的垃圾回收器，因为在jdk11中，oracle推出了号称很强大很强大的ZGC，支持TB级的内存回收及单次GC暂停时间低于10ms，目前未使用到该版本的jdk，也尚未对此回收器做研究）\n![upload successful](\\images\\pasted-80.png)\n&emsp;&emsp;##Serial收集器：单线程收集器，进行垃圾回收时需暂停其他所有线程，直到收集结束。比较老的收集器了，适用于Client模式的应用。采用复制算法\n![upload successful](\\images\\pasted-82.png)\n&emsp;&emsp;##ParNew收集器：Serial的多线程版本，默认开启的收集线程数与CPU的数量相同，可通过参数-XX:ParallelGCThreads控制。采用复制算法\n![upload successful](\\images\\pasted-84.png)\n&emsp;&emsp;##Serial Old收集器：其可作为Serial、ParNew及Parallel Scavenge的老年代收集器，同时，当CMS收集发生Concurrent Model Failure时，会使用Serail Old进行Full GC。采用标记-整理算法\n![upload successful](\\images\\pasted-82.png)\n&emsp;&emsp;##Parallel Scavenge收集器：更加关注吞吐量，即追求最大吞吐量，适用于那些需要大量计算的应用。使用参数-XX:MaxGCPauseMillis控制停顿时间，参数-XX:GCTimeRatio控制吞吐量（如默认99，即1/（1+99）为GC占CPU时间），开关参数-XX:UseAdaptiveSizePolicy打开后即开启了GC自适应调节策略，无需指定年轻代大小、Survivor大小或晋升老年代对象大小。采用复制算法\n![upload successful](\\images\\pasted-85.png)\n&emsp;&emsp;##Parallel Old收集器：于jdk1.6开始提供，作为Parallel Scavenge的老年代收集器。采用标记-整理算法\n![upload successful](\\images\\pasted-85.png)\n&emsp;&emsp;##CMS收集器：更加关注暂停时间，即追求最短暂停时间。其大概包含4个步骤，初始标记、并发标记、重新标记、并发清除，其中，初始标记主要是标记GC Roots能直接关联到的对象，这是一个很快的过程，需要STW，并发标记根据初始标记结果遍历上述对象所引用的对象，这个过程耗时较长但能与用户线程并行执行，重新标记则是修正并发标记过程中用户线程导致的变动，相对并发标记来说耗时是比较短的，需要STW，最后，并发清除也能与用户线程并行执行。需要指出的是，CMS存在一定的缺点，1是其对CPU资源很敏感，比如其并发阶段是占用了CPU资源（即用户线程占用CPU时间会减少），默认线程数为（CPU数量+3）/4；2是其无法处理浮动垃圾（Floating Garbage），导致会出现Concurrent Mode Failure，从而引起Full GC，引起的原因在于并发清理阶段用户线程的运行会产生新的垃圾需下一次GC才可处理，因此CMS开始回收的阈值为默认92%，避免浮动垃圾导致内存不够用而引起Full GC（这时会临时启用Serial Old回收老年代）；3是其基于标记-清除算法，意味着存在内存碎片，那么碎片过多会导致大对象无法分配而导致Full GC，因此有一个开关参数-XX:UseCMSCompactAtFullCollection控制其在准备Full GC时进行内存整理（这是很耗时的）。采用标记-清除算法\n![upload successful](\\images\\pasted-86.png)\n&emsp;&emsp;##G1收集器：在暂停时间于吞吐量中权衡。采用G1回收器意味着java堆内存布局与其他回收器将有很大的不同，其将堆分成多个（默认2048个）大小相等的region区域（1M-32M）。注意，超过区域大小一半的对象被视为巨型对象直接分配在老年代。同时，G1维护了一个优先列表用于标识回收各区域的价值大小，从而做到了可预测停顿。同时为了避免全堆扫描对象引用，G1提供了Remembered Set用以维护对象的引用。G1回收大致包含如下4个步骤，初始标记、并发标记、最终标记及筛选回收，各步骤的大致功能与CMS类似。整体来看采用标记-整理算法，局部（region之间）来看采用了复制算法。\n![upload successful](\\images\\pasted-87.png)\n\n\n----------------------------------\n\n## 内存调优\n \n&emsp;&emsp;前面已经讲述了对象的诞生与消亡，在实际的工作中，我们日常开发或许并没有过多关注于这些细节，但有一项是我们时常直接接触到的，即，在应用内存使用不正常、应用运行慢时，我们往往会想到是否存在内存使用上的问题，并想办法进行内存调优。内存调优，它没有一个统一的解决方案，只能说其有相同的调优原则，再结合应用的实际情况针对性的优化，因此，要谈内存调优，更好的方式是从案例入手，在案例中阐述问题分析的过程，如何定位到内存上的问题，又如何进行针对性的调优。本博客中有相关案例，可参考https://realxc.github.io/tags/JVM/\n&emsp;&emsp;作为本篇文章的结尾，下面简单介绍一下我们常用的ParNew、CMS、G1回收器的常用且重要的参数配置：\nParNew：\n&emsp;&emsp;-XX:SurvivorRatio=8(默认)中年代占比1：8 sur：eden\n&emsp;&emsp;-XX:PretenureSizeThreshold 直接晋升到老年代的对象大小\n&emsp;&emsp;-XX:NewRatio=4(默认) 年轻代和老年代比例\nCMS\n&emsp;&emsp;-XX:CMSInitiatinOccupancyFraction=92 老年代达到92%时回收\n&emsp;&emsp;-XX:UseCMSCompactAtFullCollection控制其在准备Full GC时进行内存整理\n&emsp;&emsp;-XX:UseConcMarkSweepGC\nG1\n&emsp;&emsp;-XX:+UseG1GC\n&emsp;&emsp;-XX:MaxGCPauseMillis=n 单次GC暂停时间，默认200ms\n&emsp;&emsp;-XX:InitiatingHeapOccupancyPercent=n mix gc触发时间，老年代已使用空间占用整堆内存比例，默认45（很多人理解为整堆已使用空间占整堆比例，这是错误的）\n&emsp;&emsp;-XX:MaxTenuringThreshold=n 年轻代最大年龄，默认15\n&emsp;&emsp;-XX:G1ReservePercent=n 预留空间大小，避免空间被使用完而导致Full GC\n&emsp;&emsp;-XX:G1HeapRegionSize=n 区域大小，1-32（M）\n&emsp;&emsp;-XX:G1NewSizePercent=5 默认为5，如果要调整，需解锁实验性标志 eg：-XX:+UnlockExperimentalVMOptions -XX:G1NewSizePercent=10 -XX:G1MaxNewSizePercent=75\n&emsp;&emsp;-XX:G1MaxNewSizePercent=60 默认为60，如果要调整，需解锁实验性标志 eg：-XX:+UnlockExperimentalVMOptions -XX:G1NewSizePercent=10 -XX:G1MaxNewSizePercent=75\n\n----------------------------------\n参考参数（jdk8）：\n(G1): -XX:+UseG1GC -XX:MaxGCPauseMillis=50（自定义） -Xms4096m（自定义） -Xmx4096m（自定义） -XX:MetaspaceSize=128m（自定义） -XX:MaxMetaspaceSize=512m（自定义） -XX:LargePageSizeInBytes=128m（自定义） -XX:+ParallelRefProcEnabled -XX:+PrintAdaptiveSizePolicy -XX:+UseFastAccessorMethods -XX:+TieredCompilation -XX:+ExplicitGCInvokesConcurrent -XX:AutoBoxCacheMax=20000  -verbosegc -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:/XXX/gc.log -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/XXX/oom-XX.hprof\n\n----------------------------------\n(CMS):-Xms4096m（自定义） -Xmx4096m（自定义） -XX:MetaspaceSize=128m（自定义） -XX:MaxMetaspaceSize=512m（自定义） -XX:SurvivorRatio=8（自定义） -XX:NewRatio=4（自定义） -XX:+UseConcMarkSweepGC -XX:+CMSParallelRemarkEnabled -XX:LargePageSizeInBytes=128m（自定义） -XX:+UseFastAccessorMethods -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=70（自定义） -XX:+UseParNewGC -XX:MaxTenuringThreshold=5（自定义） -XX:+CMSClassUnloadingEnabled -XX:+TieredCompilation -XX:+ExplicitGCInvokesConcurrent -XX:AutoBoxCacheMax=20000 -verbosegc -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:/XXX/gc.log -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/XXX/oom-XX.hprof\n\nhttps://www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html\nhttps://www.oracle.com/technetwork/cn/articles/java/g1gc-1984535-zhs.html#Unlock\n\t\t\t\n----------------------------------","source":"_posts/浅谈JVM之垃圾回收.md","raw":"title: java对象的诞生与消亡\nauthor: Xiang Chuang\ntags:\n  - JVM\n  - 内存调优\n  - java对象\n  - 垃圾回收\ncategories:\n  - 专题研讨\ndate: 2019-04-08 16:54:00\n---\n## 说在前面\n&emsp;&emsp;本文将从java对象的角度出发，探讨java应用运行过程中“对象”从诞生到消亡的生命历程，结合jvm的相关技术方案简要阐述各个环节的实现细节。需要指出的是，本文旨在阐述清楚“对象”的生命周期，对于jvm（本文基于HotSpot虚拟机）相关技术的深层次原理只会点到为止（能描述清“对象”的生命周期即可），后续将会在其他文章中单独罗列出各个主题进行深入剖析。\n\n## 概述\n+ [java内存区域](#partI)\n+ [java对象](#partII)\n+ [垃圾回收](#partIII)\n+ [内存调优](#partIV)\n\n----------------------------------\n\n## java内存区域\n&emsp;&emsp;java对象生存的载体-运行时数据区，虚拟机中数据区大致包含如下图所示的几个区域： \n![upload successful](\\images\\pasted-74.png)\n1、程序计数器\n&emsp;&emsp;当前线程所执行的字节码的行号指示器，标识执行到的节点，这是一块较小的内存空间。由于任何时刻，一个处理器（多核处理器中的某一核）只会执行一个线程中的指令，因此，每个线程都有一个独立、私有的程序计数器。此区域（唯一一个）在java虚拟机规范中没有规定任何OOM的情况。\n2、虚拟机栈\n&emsp;&emsp;其生命周期与线程相同，方法在执行时都会创建一个栈帧用于存储局部变量表、操作数栈、动态链接、方法出口等信息，每一个方法的调用就是相应栈帧在虚拟机栈中入栈和出栈的过程。\n局部变量表：存放编译期可知的各种基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（指向对象起始地址的引用指针-HotSpot方案、或者指向一个代表对象的句柄或其他与此对象相关的位置）、returnAddress类型（执行一条字节码指令的地址）。其中，除long和double占用2个局部变量空间（Slot）外，其余只占用1个Slot。局部变量表所需内存空间在编译期间完成分配，运行期间不会改变大小，即，进入一个方法时，栈帧中所需分配的局部变量空间是确定的。java虚拟机规范对此区域规定了两类异常情况，1是线程请求的栈深度大于虚拟机所允许的深度时抛出StackOverflowError，2是可动态扩展的虚拟机栈扩展时无法申请到足够的内存时抛出OOM。\n3、本地方法栈\n&emsp;&emsp;HotSpot将其与虚拟机栈合二为一。它是为虚拟机所使用到的Native方法服务。它可能抛出的异常与虚拟机栈一致。\n4、堆\n&emsp;&emsp;此区域用于存放对象的实例。java虚拟机规范原文：The heap is the runtime data area from which memory for all class instances and arrays is allocated.此区域会抛出OOM异常。由于这个区域存分的是对象实例且是线程共享区域，因此在后续的内容中将以此为核心进行讲述。\n5、方法区（HotSpot，jdk8之后已由元空间取代）\n&emsp;&emsp;该区域用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据，为了与java堆区分开来，java虚拟机规范为其命了一个别名Non-Heap。该区域会抛出OOM。\n6、运行时常量池\n&emsp;&emsp;方法区的一部分，Clas文件中除了由类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池，用于存放编译期生产的各种字面量和符号引用。除了编译期间会产生常量，java允许运行期间产生常量并存放到运行时常量池中，如String.intern()。该区域是方法区的一部分，因此申请不到内存时也会抛出OOM。\n7、直接内存\n&emsp;&emsp;它不属于虚拟机运行时数据区的一部分，但其也可能出现OOM，且使用频繁（如NIO类，引入了基于通道（Channel）与缓冲区（Buffer）的I/O方式，可使用Native函数直接分配堆外内存，然后通过一个存储在java堆中的DirectByteBuffer对象作为这块内存的引用进行操作，这样避免了在java堆与Native堆中来回复制数据从而提升了性能）。该区域使用超过机器内存等限制时会抛出OOM。\n8、元空间\n&emsp;&emsp;如示意图中所述，HotSpot在jdk8（含）之后，已经移除了老年代（方法区），转由元空间（metaspace）实现，即本地内存Native Memory。\n&emsp;&emsp;至于为什么使用本地内存替换永久代，官网有如此描述：This is part of the JRockit and Hotspot convergence effort. JRockit customers do not need to configure the permanent generation (since JRockit does not have a permanent generation) and are accustomed to not configuring the permanent generation.\n&emsp;&emsp;具体移除细节，官网由如此描述：The proposed implementation will allocate class meta-data in native memory and move interned Strings and class statics to the Java heap.\n&emsp;&emsp;详细信息参见官网地址http://openjdk.java.net/jeps/122\n\n----------------------------------\n\n## java对象\n \n&emsp;&emsp;前面聊完java对象身存的载体的具体结构，下面我们聊一聊java对象本身的一些事，需要说明的的是，此处是基于HotSpot探讨java对象在堆空间上实例的创建、布局以及访问。\n1、对象的创建\n&emsp;&emsp;从语言层面来讲，java对象的创建就是一个new关键字，当应用运行时，虚拟机遇到一条new指令，将进行如下操作：\n&emsp;&emsp;##检查类的加载：检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已经被加载、解析和初始化。\n&emsp;&emsp;##分配内存：java堆内存是否规整决定了如何分配内存，规整的内存，采用“指针碰撞”（Bump the Pointer），即从已用内存和空闲内存的指针分界点开始向空闲内存移动与对象大小相等的距离即可；如何内存不规整，则需要维护空闲列表（Free List），分配时从列表中选择足够大的空间划分给对象的实例。java堆是否规整与垃圾采集器是否带有压缩整理功能有关，如使用Serial、ParNew这种带Compact过程的收集器时采用指针碰撞，使用CMS这种基于Mark-Sweep算法的收集器时采用空闲列表。另外一个需要考虑的问题是线程安全，解决这个问题有两种方案，1是采用CAS保证原子性；2是为每个线程在java堆中预先分配一小块，即本地线程分配缓冲（TLAB），只需在分配新的TLAB时进行同步锁定，-XX：+/-UseTLAB。\n&emsp;&emsp;##初始化为0值：此处不包括对象头，这个操作保证了对象的实例可以不赋初始值即可使用。\n&emsp;&emsp;##对象头信息设置：对象头中包含如，这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的GC分代年龄、锁等信息。\n&emsp;&emsp;##初始化（执行<init>方法）：一般来说，执行new指令之后会接着执行<init>方法（由字节码中是否跟随invokespecial指令决定），从而，一个真正可以使用的对象诞生。\n2、对象的内存布局\n&emsp;&emsp;HotSpot中，对象在内存中存储的布局分为3部分：对象头（Header）、实例数据（Instance Data）以及对齐填充（Padding）。\n&emsp;&emsp;##对象头：对象头包含两部分，1是用于存储对象自身的运行时数据Mark Work，在32位和64位的虚拟机中分别占32bit、64bit,包含信息如哈希码、GC分代年龄、锁状态标志、线程持有的锁、偏向锁线程ID、偏向时间戳等。eg：32位未锁定状态的对象，25bit用于存储对象哈希码、4bit用于存储对象分代年龄、2bit用于存储锁标识位，1bit固定为0；2是类型指针，即对象指向它的类元数据的指针；对于数组来说，对象头还需有一块用于记录数组长度的数据从而确定数组的大小。\n&emsp;&emsp;##实例数据：HotSpot默认的分配策略为longs/doubles、ints、shorts/chars、bytes/boolean、oops（Oddinary Pointers），相同宽度的字段被分配在一起，父类定义的变量位于子类变量之前（如果CompactFields=true，子类较窄的变量也可能插入到父类变量的空隙中）。\n&emsp;&emsp;##对齐填充：HotSpot要求对象起始地址必须是8字节的整数倍，对象头正好符合，因此对象实例数据可用对齐填充来补全。\n3、对象的访问定位\n&emsp;&emsp;java程序需要通过栈上的reference数据来操作堆上的具体对象。\n&emsp;&emsp;##使用句柄访问：reference中存储的是对象的句柄地址，句柄中包含了对象实例数据与类型数据各自的具体地址，此方式，java堆划分出特定的内存作为句柄池。对象的定位需要两次指针定位，1次找到句柄、另1次找到具体的对象，好处则在于垃圾回收后，对象并移动，不用更改reference中的地址，只需更改句柄池中对应的地址。\n&emsp;&emsp;##使用直接指针访问：reference中存储的是对象地址。对象的定位一次就能找到，提升了性能，HotSpot采用此方案。\n4、对象的存活  \n&emsp;&emsp;前一部分提到，java程序通过栈上的reference数据操作堆上的对象，被操作的对象称之为被引用。对象是否存活与其是否尚被引用有关，那么我们首先来谈一谈引用。\n&emsp;&emsp;引用可分为强引用（Strong Reference）、软引用（Soft Reference）、弱引用（Weak Reference）、虚引用（Phantom Reference）。\n&emsp;&emsp;##强引用：类似于赋值语句那种，垃圾回收器不会回收被引用对象\n&emsp;&emsp;##软引用：jdk提供了SoftReference类实现软引用，指一些有用但并非必须的对象，系统OOM之前会回收此类对象\n&emsp;&emsp;##弱引用：jdk提供了WeakReference类实现弱引用，下一次GC时回收此类对象\n&emsp;&emsp;##虚引用：jdk提供了PhantomReference类实现虚引用，也称之为幽灵引用，对象是否存在虚引用对其本身无任何影响，且无法通过虚引用获得一个对象实例，因此，为对象设置一个虚引用的唯一目的是该对象被回收时收到一个系统通知\n&emsp;&emsp;下面来谈谈判断对象是否存活的两类算法：\n&emsp;&emsp;引用计数算法：给对象添加一个引用计算器，值为0时代表对象可回收，但，对于循环依赖来说，这似乎是个问题\n&emsp;&emsp;可达性分析算法：以一系列被称为GC Roots的对象（虚拟机栈即栈帧中本地变量表中引用的对象；方法区中类静态属性引用的对象；方法区中常量引用的对象；本地方法栈中JNI引用的对象）为起点进行搜索，判断对象是否有引用链到达GC Roots，如果没有，代表对象可回收。\n&emsp;&emsp;需要说明的是，利用可达性分析出不可达的对象，并不一定会立即回收，因为进行标记时会做一次筛选（条件是对象是否有必要执行finalize(),如果对象没有覆盖此方法或此方法被执行过一次，则不必要，否则会把此类对象放入一个F-Queue队列中由虚拟机自建一个低优先级的Finalizer线程去执行，为了避免执行缓慢，其并不会等待执行结果）。  \n\n----------------------------------\n\n## 垃圾回收\n \n&emsp;&emsp;再谈对象创建之内存分配\n&emsp;&emsp;这是一个及其重要的环节，且，根据垃圾回收机制的不同而有所差别，在聊垃圾回收之前，我想有必要就这点多说几句。\n&emsp;&emsp;##对象优先分配在Eden区域，即年轻代\n&emsp;&emsp;##大对象直接分配在老年代，需要说明的是何为大对象，不同收集器定义的不一样，Serial及ParNew收集器采用参数-XX:PretenureSizeThreshold指定，G1则默认为大于区域region大小一半的对象\n&emsp;&emsp;##长期存活的对象进入老年代，一般默认为熬过15次年轻代回收的对象，该值可以调整，具体参数名根据收集器的约定而定。另外，如果Survivor空间中相同年龄所有对象大小的总和大于Survivor空间的一半，年龄大于等于该年龄的对象直接进入老年代（针对Serial及ParNew）\n&emsp;&emsp;##空间分配担保：只要老年代的连续空间大于新生代对象总大小或历次晋升的平局大小则进行MinorGC，否则进行Full GC（针对Serial及ParNew）\n&emsp;&emsp;前面大概聊了一下虚拟机内存区域以及java对象本身的那点事，这是一个java开发者必备的基础知识，因为你不仅仅应该知道Object obj = new Object（），你更应该清楚java对象究竟是如何诞生的，JVM在这里面做了什么，另一方面，你还应该清楚JVM又是如何替我们清理那些不再被引用的对象。\n&emsp;&emsp;首先，我们来简单聊聊垃圾收集算法：\n&emsp;&emsp;标记-清除（Mark-Sweep）算法：顾名思义，它包含两步，一是标记需要回收的对象，二是清除被标记的对象。但有两个明显的问题是，标记和清除两个环节效率都不高，其次，直接清除会导致内存碎片，这将导致大对象无法找到足够大小的连续空间来分配，从而提前下一次GC。\n&emsp;&emsp;复制（Copying）算法：将内存划分为几块，当一块内存用完后，把存活的对象移动至另一块，再把当前块已使用的空间一性清理掉。但这会导致预留的那部分空间分配时不能用。如HotSpot实现为，将内存分为Eden和两个Survivor，Eden：Survivro为8：1，即预留了10%的空间。需要指出的是，如果对象生命周期长，那么预留的空间也许会出现不够用，这时便需要其他内存进行分配担保（Handle Promotion），这里指的是老年代内存。因为需要额外的空间做担保，那么此算法不适合老年代回收。\n&emsp;&emsp;标记-整理（Mark-Compact）算法：完成标记后，让所有存活的对象向一端移动，然后直接清理掉端边界之外的内存。\n&emsp;&emsp;最后要说明的是，当前的商业虚拟机采用分代收集，即区分新生代和老年代，根据其不同特点搭配不通的垃圾收集算法，如年轻代使用复制算法，老年代使用标记-清除算法或标记-整理算法。\n&emsp;&emsp;HotSpot实现垃圾回收简介：\n&emsp;&emsp;##进行对象可达性分析时，要考虑一致性问题，因为对象的引用随着应用线程的运行不停的变更着，因此需要STW，由于STW对应用线程影响很大，各种垃圾回收器中对此做了通盘的考虑，但即使如CMS这种号称不会STW的收集器也无法避免枚举根节点时的GC停顿。另外，HotSpot设计了基于OopMap的数据结构来记录对象的引用以提升效率。\n&emsp;&emsp;安全点：为指令生产OopMap需要大量额外的空间，因此，HotSpot设计中并没为每条指令生成OopMap，只是在一些成为安全点的特定位置记录这些信息，即，只有当线程进入到安全点时才能暂停下来开始GC。安全点的选定是有讲究的，不可过多也不可过少，所以基本考虑在长时间执行的部分设置安全点，如方法调用、循环跳转、异常跳转等。对于线程在安全点如何停下来的问题，有两种手段，一是抢先式中断、二是主动式中断。HotSpot选择后者，即，GC设置中断标识，用户线程主动轮询是否需要中断，轮询标志的地方和安全点重合。\n&emsp;&emsp;安全区域：对于某些暂时未分配到CUP时间的线程，如其处于Sleep或Blocked状态，JVM不可能瞎等其得到CPU时间后跑到安全点，因此提供了安全区域解决该问题。安全区域中，引用关系不会发生变化，线程进去安全区域时会标识自己已进入，离开时，需要判断系统是否已经完成了根节点枚举或者整个GC过程，没有完成时需等待接收可以离开的信号。\n&emsp;&emsp;接下来我们来聊聊HotSpot定义的垃圾回收器，这是一个重要的话题，也是日常开发中我们最直接面对的课题，先上一个总图（这里代表的是jdk11之前的垃圾回收器，因为在jdk11中，oracle推出了号称很强大很强大的ZGC，支持TB级的内存回收及单次GC暂停时间低于10ms，目前未使用到该版本的jdk，也尚未对此回收器做研究）\n![upload successful](\\images\\pasted-80.png)\n&emsp;&emsp;##Serial收集器：单线程收集器，进行垃圾回收时需暂停其他所有线程，直到收集结束。比较老的收集器了，适用于Client模式的应用。采用复制算法\n![upload successful](\\images\\pasted-82.png)\n&emsp;&emsp;##ParNew收集器：Serial的多线程版本，默认开启的收集线程数与CPU的数量相同，可通过参数-XX:ParallelGCThreads控制。采用复制算法\n![upload successful](\\images\\pasted-84.png)\n&emsp;&emsp;##Serial Old收集器：其可作为Serial、ParNew及Parallel Scavenge的老年代收集器，同时，当CMS收集发生Concurrent Model Failure时，会使用Serail Old进行Full GC。采用标记-整理算法\n![upload successful](\\images\\pasted-82.png)\n&emsp;&emsp;##Parallel Scavenge收集器：更加关注吞吐量，即追求最大吞吐量，适用于那些需要大量计算的应用。使用参数-XX:MaxGCPauseMillis控制停顿时间，参数-XX:GCTimeRatio控制吞吐量（如默认99，即1/（1+99）为GC占CPU时间），开关参数-XX:UseAdaptiveSizePolicy打开后即开启了GC自适应调节策略，无需指定年轻代大小、Survivor大小或晋升老年代对象大小。采用复制算法\n![upload successful](\\images\\pasted-85.png)\n&emsp;&emsp;##Parallel Old收集器：于jdk1.6开始提供，作为Parallel Scavenge的老年代收集器。采用标记-整理算法\n![upload successful](\\images\\pasted-85.png)\n&emsp;&emsp;##CMS收集器：更加关注暂停时间，即追求最短暂停时间。其大概包含4个步骤，初始标记、并发标记、重新标记、并发清除，其中，初始标记主要是标记GC Roots能直接关联到的对象，这是一个很快的过程，需要STW，并发标记根据初始标记结果遍历上述对象所引用的对象，这个过程耗时较长但能与用户线程并行执行，重新标记则是修正并发标记过程中用户线程导致的变动，相对并发标记来说耗时是比较短的，需要STW，最后，并发清除也能与用户线程并行执行。需要指出的是，CMS存在一定的缺点，1是其对CPU资源很敏感，比如其并发阶段是占用了CPU资源（即用户线程占用CPU时间会减少），默认线程数为（CPU数量+3）/4；2是其无法处理浮动垃圾（Floating Garbage），导致会出现Concurrent Mode Failure，从而引起Full GC，引起的原因在于并发清理阶段用户线程的运行会产生新的垃圾需下一次GC才可处理，因此CMS开始回收的阈值为默认92%，避免浮动垃圾导致内存不够用而引起Full GC（这时会临时启用Serial Old回收老年代）；3是其基于标记-清除算法，意味着存在内存碎片，那么碎片过多会导致大对象无法分配而导致Full GC，因此有一个开关参数-XX:UseCMSCompactAtFullCollection控制其在准备Full GC时进行内存整理（这是很耗时的）。采用标记-清除算法\n![upload successful](\\images\\pasted-86.png)\n&emsp;&emsp;##G1收集器：在暂停时间于吞吐量中权衡。采用G1回收器意味着java堆内存布局与其他回收器将有很大的不同，其将堆分成多个（默认2048个）大小相等的region区域（1M-32M）。注意，超过区域大小一半的对象被视为巨型对象直接分配在老年代。同时，G1维护了一个优先列表用于标识回收各区域的价值大小，从而做到了可预测停顿。同时为了避免全堆扫描对象引用，G1提供了Remembered Set用以维护对象的引用。G1回收大致包含如下4个步骤，初始标记、并发标记、最终标记及筛选回收，各步骤的大致功能与CMS类似。整体来看采用标记-整理算法，局部（region之间）来看采用了复制算法。\n![upload successful](\\images\\pasted-87.png)\n\n\n----------------------------------\n\n## 内存调优\n \n&emsp;&emsp;前面已经讲述了对象的诞生与消亡，在实际的工作中，我们日常开发或许并没有过多关注于这些细节，但有一项是我们时常直接接触到的，即，在应用内存使用不正常、应用运行慢时，我们往往会想到是否存在内存使用上的问题，并想办法进行内存调优。内存调优，它没有一个统一的解决方案，只能说其有相同的调优原则，再结合应用的实际情况针对性的优化，因此，要谈内存调优，更好的方式是从案例入手，在案例中阐述问题分析的过程，如何定位到内存上的问题，又如何进行针对性的调优。本博客中有相关案例，可参考https://realxc.github.io/tags/JVM/\n&emsp;&emsp;作为本篇文章的结尾，下面简单介绍一下我们常用的ParNew、CMS、G1回收器的常用且重要的参数配置：\nParNew：\n&emsp;&emsp;-XX:SurvivorRatio=8(默认)中年代占比1：8 sur：eden\n&emsp;&emsp;-XX:PretenureSizeThreshold 直接晋升到老年代的对象大小\n&emsp;&emsp;-XX:NewRatio=4(默认) 年轻代和老年代比例\nCMS\n&emsp;&emsp;-XX:CMSInitiatinOccupancyFraction=92 老年代达到92%时回收\n&emsp;&emsp;-XX:UseCMSCompactAtFullCollection控制其在准备Full GC时进行内存整理\n&emsp;&emsp;-XX:UseConcMarkSweepGC\nG1\n&emsp;&emsp;-XX:+UseG1GC\n&emsp;&emsp;-XX:MaxGCPauseMillis=n 单次GC暂停时间，默认200ms\n&emsp;&emsp;-XX:InitiatingHeapOccupancyPercent=n mix gc触发时间，老年代已使用空间占用整堆内存比例，默认45（很多人理解为整堆已使用空间占整堆比例，这是错误的）\n&emsp;&emsp;-XX:MaxTenuringThreshold=n 年轻代最大年龄，默认15\n&emsp;&emsp;-XX:G1ReservePercent=n 预留空间大小，避免空间被使用完而导致Full GC\n&emsp;&emsp;-XX:G1HeapRegionSize=n 区域大小，1-32（M）\n&emsp;&emsp;-XX:G1NewSizePercent=5 默认为5，如果要调整，需解锁实验性标志 eg：-XX:+UnlockExperimentalVMOptions -XX:G1NewSizePercent=10 -XX:G1MaxNewSizePercent=75\n&emsp;&emsp;-XX:G1MaxNewSizePercent=60 默认为60，如果要调整，需解锁实验性标志 eg：-XX:+UnlockExperimentalVMOptions -XX:G1NewSizePercent=10 -XX:G1MaxNewSizePercent=75\n\n----------------------------------\n参考参数（jdk8）：\n(G1): -XX:+UseG1GC -XX:MaxGCPauseMillis=50（自定义） -Xms4096m（自定义） -Xmx4096m（自定义） -XX:MetaspaceSize=128m（自定义） -XX:MaxMetaspaceSize=512m（自定义） -XX:LargePageSizeInBytes=128m（自定义） -XX:+ParallelRefProcEnabled -XX:+PrintAdaptiveSizePolicy -XX:+UseFastAccessorMethods -XX:+TieredCompilation -XX:+ExplicitGCInvokesConcurrent -XX:AutoBoxCacheMax=20000  -verbosegc -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:/XXX/gc.log -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/XXX/oom-XX.hprof\n\n----------------------------------\n(CMS):-Xms4096m（自定义） -Xmx4096m（自定义） -XX:MetaspaceSize=128m（自定义） -XX:MaxMetaspaceSize=512m（自定义） -XX:SurvivorRatio=8（自定义） -XX:NewRatio=4（自定义） -XX:+UseConcMarkSweepGC -XX:+CMSParallelRemarkEnabled -XX:LargePageSizeInBytes=128m（自定义） -XX:+UseFastAccessorMethods -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=70（自定义） -XX:+UseParNewGC -XX:MaxTenuringThreshold=5（自定义） -XX:+CMSClassUnloadingEnabled -XX:+TieredCompilation -XX:+ExplicitGCInvokesConcurrent -XX:AutoBoxCacheMax=20000 -verbosegc -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:/XXX/gc.log -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/XXX/oom-XX.hprof\n\nhttps://www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html\nhttps://www.oracle.com/technetwork/cn/articles/java/g1gc-1984535-zhs.html#Unlock\n\t\t\t\n----------------------------------","slug":"浅谈JVM之垃圾回收","published":1,"updated":"2019-09-30T07:34:10.840Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3e5th81006dp966p59qk9v7","content":"<h2 id=\"说在前面\"><a href=\"#说在前面\" class=\"headerlink\" title=\"说在前面\"></a>说在前面</h2><p>&emsp;&emsp;本文将从java对象的角度出发，探讨java应用运行过程中“对象”从诞生到消亡的生命历程，结合jvm的相关技术方案简要阐述各个环节的实现细节。需要指出的是，本文旨在阐述清楚“对象”的生命周期，对于jvm（本文基于HotSpot虚拟机）相关技术的深层次原理只会点到为止（能描述清“对象”的生命周期即可），后续将会在其他文章中单独罗列出各个主题进行深入剖析。</p>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><ul>\n<li><a href=\"#partI\">java内存区域</a></li>\n<li><a href=\"#partII\">java对象</a></li>\n<li><a href=\"#partIII\">垃圾回收</a></li>\n<li><a href=\"#partIV\">内存调优</a></li>\n</ul>\n<hr>\n<h2 id=\"java内存区域\"><a href=\"#java内存区域\" class=\"headerlink\" title=\"java内存区域\"></a>java内存区域</h2><p>&emsp;&emsp;java对象生存的载体-运行时数据区，虚拟机中数据区大致包含如下图所示的几个区域：<br><img src=\"\\images\\pasted-74.png\" alt=\"upload successful\"><br>1、程序计数器<br>&emsp;&emsp;当前线程所执行的字节码的行号指示器，标识执行到的节点，这是一块较小的内存空间。由于任何时刻，一个处理器（多核处理器中的某一核）只会执行一个线程中的指令，因此，每个线程都有一个独立、私有的程序计数器。此区域（唯一一个）在java虚拟机规范中没有规定任何OOM的情况。<br>2、虚拟机栈<br>&emsp;&emsp;其生命周期与线程相同，方法在执行时都会创建一个栈帧用于存储局部变量表、操作数栈、动态链接、方法出口等信息，每一个方法的调用就是相应栈帧在虚拟机栈中入栈和出栈的过程。<br>局部变量表：存放编译期可知的各种基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（指向对象起始地址的引用指针-HotSpot方案、或者指向一个代表对象的句柄或其他与此对象相关的位置）、returnAddress类型（执行一条字节码指令的地址）。其中，除long和double占用2个局部变量空间（Slot）外，其余只占用1个Slot。局部变量表所需内存空间在编译期间完成分配，运行期间不会改变大小，即，进入一个方法时，栈帧中所需分配的局部变量空间是确定的。java虚拟机规范对此区域规定了两类异常情况，1是线程请求的栈深度大于虚拟机所允许的深度时抛出StackOverflowError，2是可动态扩展的虚拟机栈扩展时无法申请到足够的内存时抛出OOM。<br>3、本地方法栈<br>&emsp;&emsp;HotSpot将其与虚拟机栈合二为一。它是为虚拟机所使用到的Native方法服务。它可能抛出的异常与虚拟机栈一致。<br>4、堆<br>&emsp;&emsp;此区域用于存放对象的实例。java虚拟机规范原文：The heap is the runtime data area from which memory for all class instances and arrays is allocated.此区域会抛出OOM异常。由于这个区域存分的是对象实例且是线程共享区域，因此在后续的内容中将以此为核心进行讲述。<br>5、方法区（HotSpot，jdk8之后已由元空间取代）<br>&emsp;&emsp;该区域用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据，为了与java堆区分开来，java虚拟机规范为其命了一个别名Non-Heap。该区域会抛出OOM。<br>6、运行时常量池<br>&emsp;&emsp;方法区的一部分，Clas文件中除了由类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池，用于存放编译期生产的各种字面量和符号引用。除了编译期间会产生常量，java允许运行期间产生常量并存放到运行时常量池中，如String.intern()。该区域是方法区的一部分，因此申请不到内存时也会抛出OOM。<br>7、直接内存<br>&emsp;&emsp;它不属于虚拟机运行时数据区的一部分，但其也可能出现OOM，且使用频繁（如NIO类，引入了基于通道（Channel）与缓冲区（Buffer）的I/O方式，可使用Native函数直接分配堆外内存，然后通过一个存储在java堆中的DirectByteBuffer对象作为这块内存的引用进行操作，这样避免了在java堆与Native堆中来回复制数据从而提升了性能）。该区域使用超过机器内存等限制时会抛出OOM。<br>8、元空间<br>&emsp;&emsp;如示意图中所述，HotSpot在jdk8（含）之后，已经移除了老年代（方法区），转由元空间（metaspace）实现，即本地内存Native Memory。<br>&emsp;&emsp;至于为什么使用本地内存替换永久代，官网有如此描述：This is part of the JRockit and Hotspot convergence effort. JRockit customers do not need to configure the permanent generation (since JRockit does not have a permanent generation) and are accustomed to not configuring the permanent generation.<br>&emsp;&emsp;具体移除细节，官网由如此描述：The proposed implementation will allocate class meta-data in native memory and move interned Strings and class statics to the Java heap.<br>&emsp;&emsp;详细信息参见官网地址<a href=\"http://openjdk.java.net/jeps/122\" target=\"_blank\" rel=\"noopener\">http://openjdk.java.net/jeps/122</a></p>\n<hr>\n<h2 id=\"java对象\"><a href=\"#java对象\" class=\"headerlink\" title=\"java对象\"></a>java对象</h2><p>&emsp;&emsp;前面聊完java对象身存的载体的具体结构，下面我们聊一聊java对象本身的一些事，需要说明的的是，此处是基于HotSpot探讨java对象在堆空间上实例的创建、布局以及访问。<br>1、对象的创建<br>&emsp;&emsp;从语言层面来讲，java对象的创建就是一个new关键字，当应用运行时，虚拟机遇到一条new指令，将进行如下操作：<br>&emsp;&emsp;##检查类的加载：检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已经被加载、解析和初始化。<br>&emsp;&emsp;##分配内存：java堆内存是否规整决定了如何分配内存，规整的内存，采用“指针碰撞”（Bump the Pointer），即从已用内存和空闲内存的指针分界点开始向空闲内存移动与对象大小相等的距离即可；如何内存不规整，则需要维护空闲列表（Free List），分配时从列表中选择足够大的空间划分给对象的实例。java堆是否规整与垃圾采集器是否带有压缩整理功能有关，如使用Serial、ParNew这种带Compact过程的收集器时采用指针碰撞，使用CMS这种基于Mark-Sweep算法的收集器时采用空闲列表。另外一个需要考虑的问题是线程安全，解决这个问题有两种方案，1是采用CAS保证原子性；2是为每个线程在java堆中预先分配一小块，即本地线程分配缓冲（TLAB），只需在分配新的TLAB时进行同步锁定，-XX：+/-UseTLAB。<br>&emsp;&emsp;##初始化为0值：此处不包括对象头，这个操作保证了对象的实例可以不赋初始值即可使用。<br>&emsp;&emsp;##对象头信息设置：对象头中包含如，这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的GC分代年龄、锁等信息。<br>&emsp;&emsp;##初始化（执行<init>方法）：一般来说，执行new指令之后会接着执行<init>方法（由字节码中是否跟随invokespecial指令决定），从而，一个真正可以使用的对象诞生。<br>2、对象的内存布局<br>&emsp;&emsp;HotSpot中，对象在内存中存储的布局分为3部分：对象头（Header）、实例数据（Instance Data）以及对齐填充（Padding）。<br>&emsp;&emsp;##对象头：对象头包含两部分，1是用于存储对象自身的运行时数据Mark Work，在32位和64位的虚拟机中分别占32bit、64bit,包含信息如哈希码、GC分代年龄、锁状态标志、线程持有的锁、偏向锁线程ID、偏向时间戳等。eg：32位未锁定状态的对象，25bit用于存储对象哈希码、4bit用于存储对象分代年龄、2bit用于存储锁标识位，1bit固定为0；2是类型指针，即对象指向它的类元数据的指针；对于数组来说，对象头还需有一块用于记录数组长度的数据从而确定数组的大小。<br>&emsp;&emsp;##实例数据：HotSpot默认的分配策略为longs/doubles、ints、shorts/chars、bytes/boolean、oops（Oddinary Pointers），相同宽度的字段被分配在一起，父类定义的变量位于子类变量之前（如果CompactFields=true，子类较窄的变量也可能插入到父类变量的空隙中）。<br>&emsp;&emsp;##对齐填充：HotSpot要求对象起始地址必须是8字节的整数倍，对象头正好符合，因此对象实例数据可用对齐填充来补全。<br>3、对象的访问定位<br>&emsp;&emsp;java程序需要通过栈上的reference数据来操作堆上的具体对象。<br>&emsp;&emsp;##使用句柄访问：reference中存储的是对象的句柄地址，句柄中包含了对象实例数据与类型数据各自的具体地址，此方式，java堆划分出特定的内存作为句柄池。对象的定位需要两次指针定位，1次找到句柄、另1次找到具体的对象，好处则在于垃圾回收后，对象并移动，不用更改reference中的地址，只需更改句柄池中对应的地址。<br>&emsp;&emsp;##使用直接指针访问：reference中存储的是对象地址。对象的定位一次就能找到，提升了性能，HotSpot采用此方案。<br>4、对象的存活<br>&emsp;&emsp;前一部分提到，java程序通过栈上的reference数据操作堆上的对象，被操作的对象称之为被引用。对象是否存活与其是否尚被引用有关，那么我们首先来谈一谈引用。<br>&emsp;&emsp;引用可分为强引用（Strong Reference）、软引用（Soft Reference）、弱引用（Weak Reference）、虚引用（Phantom Reference）。<br>&emsp;&emsp;##强引用：类似于赋值语句那种，垃圾回收器不会回收被引用对象<br>&emsp;&emsp;##软引用：jdk提供了SoftReference类实现软引用，指一些有用但并非必须的对象，系统OOM之前会回收此类对象<br>&emsp;&emsp;##弱引用：jdk提供了WeakReference类实现弱引用，下一次GC时回收此类对象<br>&emsp;&emsp;##虚引用：jdk提供了PhantomReference类实现虚引用，也称之为幽灵引用，对象是否存在虚引用对其本身无任何影响，且无法通过虚引用获得一个对象实例，因此，为对象设置一个虚引用的唯一目的是该对象被回收时收到一个系统通知<br>&emsp;&emsp;下面来谈谈判断对象是否存活的两类算法：<br>&emsp;&emsp;引用计数算法：给对象添加一个引用计算器，值为0时代表对象可回收，但，对于循环依赖来说，这似乎是个问题<br>&emsp;&emsp;可达性分析算法：以一系列被称为GC Roots的对象（虚拟机栈即栈帧中本地变量表中引用的对象；方法区中类静态属性引用的对象；方法区中常量引用的对象；本地方法栈中JNI引用的对象）为起点进行搜索，判断对象是否有引用链到达GC Roots，如果没有，代表对象可回收。<br>&emsp;&emsp;需要说明的是，利用可达性分析出不可达的对象，并不一定会立即回收，因为进行标记时会做一次筛选（条件是对象是否有必要执行finalize(),如果对象没有覆盖此方法或此方法被执行过一次，则不必要，否则会把此类对象放入一个F-Queue队列中由虚拟机自建一个低优先级的Finalizer线程去执行，为了避免执行缓慢，其并不会等待执行结果）。  </init></init></p>\n<hr>\n<h2 id=\"垃圾回收\"><a href=\"#垃圾回收\" class=\"headerlink\" title=\"垃圾回收\"></a>垃圾回收</h2><p>&emsp;&emsp;再谈对象创建之内存分配<br>&emsp;&emsp;这是一个及其重要的环节，且，根据垃圾回收机制的不同而有所差别，在聊垃圾回收之前，我想有必要就这点多说几句。<br>&emsp;&emsp;##对象优先分配在Eden区域，即年轻代<br>&emsp;&emsp;##大对象直接分配在老年代，需要说明的是何为大对象，不同收集器定义的不一样，Serial及ParNew收集器采用参数-XX:PretenureSizeThreshold指定，G1则默认为大于区域region大小一半的对象<br>&emsp;&emsp;##长期存活的对象进入老年代，一般默认为熬过15次年轻代回收的对象，该值可以调整，具体参数名根据收集器的约定而定。另外，如果Survivor空间中相同年龄所有对象大小的总和大于Survivor空间的一半，年龄大于等于该年龄的对象直接进入老年代（针对Serial及ParNew）<br>&emsp;&emsp;##空间分配担保：只要老年代的连续空间大于新生代对象总大小或历次晋升的平局大小则进行MinorGC，否则进行Full GC（针对Serial及ParNew）<br>&emsp;&emsp;前面大概聊了一下虚拟机内存区域以及java对象本身的那点事，这是一个java开发者必备的基础知识，因为你不仅仅应该知道Object obj = new Object（），你更应该清楚java对象究竟是如何诞生的，JVM在这里面做了什么，另一方面，你还应该清楚JVM又是如何替我们清理那些不再被引用的对象。<br>&emsp;&emsp;首先，我们来简单聊聊垃圾收集算法：<br>&emsp;&emsp;标记-清除（Mark-Sweep）算法：顾名思义，它包含两步，一是标记需要回收的对象，二是清除被标记的对象。但有两个明显的问题是，标记和清除两个环节效率都不高，其次，直接清除会导致内存碎片，这将导致大对象无法找到足够大小的连续空间来分配，从而提前下一次GC。<br>&emsp;&emsp;复制（Copying）算法：将内存划分为几块，当一块内存用完后，把存活的对象移动至另一块，再把当前块已使用的空间一性清理掉。但这会导致预留的那部分空间分配时不能用。如HotSpot实现为，将内存分为Eden和两个Survivor，Eden：Survivro为8：1，即预留了10%的空间。需要指出的是，如果对象生命周期长，那么预留的空间也许会出现不够用，这时便需要其他内存进行分配担保（Handle Promotion），这里指的是老年代内存。因为需要额外的空间做担保，那么此算法不适合老年代回收。<br>&emsp;&emsp;标记-整理（Mark-Compact）算法：完成标记后，让所有存活的对象向一端移动，然后直接清理掉端边界之外的内存。<br>&emsp;&emsp;最后要说明的是，当前的商业虚拟机采用分代收集，即区分新生代和老年代，根据其不同特点搭配不通的垃圾收集算法，如年轻代使用复制算法，老年代使用标记-清除算法或标记-整理算法。<br>&emsp;&emsp;HotSpot实现垃圾回收简介：<br>&emsp;&emsp;##进行对象可达性分析时，要考虑一致性问题，因为对象的引用随着应用线程的运行不停的变更着，因此需要STW，由于STW对应用线程影响很大，各种垃圾回收器中对此做了通盘的考虑，但即使如CMS这种号称不会STW的收集器也无法避免枚举根节点时的GC停顿。另外，HotSpot设计了基于OopMap的数据结构来记录对象的引用以提升效率。<br>&emsp;&emsp;安全点：为指令生产OopMap需要大量额外的空间，因此，HotSpot设计中并没为每条指令生成OopMap，只是在一些成为安全点的特定位置记录这些信息，即，只有当线程进入到安全点时才能暂停下来开始GC。安全点的选定是有讲究的，不可过多也不可过少，所以基本考虑在长时间执行的部分设置安全点，如方法调用、循环跳转、异常跳转等。对于线程在安全点如何停下来的问题，有两种手段，一是抢先式中断、二是主动式中断。HotSpot选择后者，即，GC设置中断标识，用户线程主动轮询是否需要中断，轮询标志的地方和安全点重合。<br>&emsp;&emsp;安全区域：对于某些暂时未分配到CUP时间的线程，如其处于Sleep或Blocked状态，JVM不可能瞎等其得到CPU时间后跑到安全点，因此提供了安全区域解决该问题。安全区域中，引用关系不会发生变化，线程进去安全区域时会标识自己已进入，离开时，需要判断系统是否已经完成了根节点枚举或者整个GC过程，没有完成时需等待接收可以离开的信号。<br>&emsp;&emsp;接下来我们来聊聊HotSpot定义的垃圾回收器，这是一个重要的话题，也是日常开发中我们最直接面对的课题，先上一个总图（这里代表的是jdk11之前的垃圾回收器，因为在jdk11中，oracle推出了号称很强大很强大的ZGC，支持TB级的内存回收及单次GC暂停时间低于10ms，目前未使用到该版本的jdk，也尚未对此回收器做研究）<br><img src=\"\\images\\pasted-80.png\" alt=\"upload successful\"><br>&emsp;&emsp;##Serial收集器：单线程收集器，进行垃圾回收时需暂停其他所有线程，直到收集结束。比较老的收集器了，适用于Client模式的应用。采用复制算法<br><img src=\"\\images\\pasted-82.png\" alt=\"upload successful\"><br>&emsp;&emsp;##ParNew收集器：Serial的多线程版本，默认开启的收集线程数与CPU的数量相同，可通过参数-XX:ParallelGCThreads控制。采用复制算法<br><img src=\"\\images\\pasted-84.png\" alt=\"upload successful\"><br>&emsp;&emsp;##Serial Old收集器：其可作为Serial、ParNew及Parallel Scavenge的老年代收集器，同时，当CMS收集发生Concurrent Model Failure时，会使用Serail Old进行Full GC。采用标记-整理算法<br><img src=\"\\images\\pasted-82.png\" alt=\"upload successful\"><br>&emsp;&emsp;##Parallel Scavenge收集器：更加关注吞吐量，即追求最大吞吐量，适用于那些需要大量计算的应用。使用参数-XX:MaxGCPauseMillis控制停顿时间，参数-XX:GCTimeRatio控制吞吐量（如默认99，即1/（1+99）为GC占CPU时间），开关参数-XX:UseAdaptiveSizePolicy打开后即开启了GC自适应调节策略，无需指定年轻代大小、Survivor大小或晋升老年代对象大小。采用复制算法<br><img src=\"\\images\\pasted-85.png\" alt=\"upload successful\"><br>&emsp;&emsp;##Parallel Old收集器：于jdk1.6开始提供，作为Parallel Scavenge的老年代收集器。采用标记-整理算法<br><img src=\"\\images\\pasted-85.png\" alt=\"upload successful\"><br>&emsp;&emsp;##CMS收集器：更加关注暂停时间，即追求最短暂停时间。其大概包含4个步骤，初始标记、并发标记、重新标记、并发清除，其中，初始标记主要是标记GC Roots能直接关联到的对象，这是一个很快的过程，需要STW，并发标记根据初始标记结果遍历上述对象所引用的对象，这个过程耗时较长但能与用户线程并行执行，重新标记则是修正并发标记过程中用户线程导致的变动，相对并发标记来说耗时是比较短的，需要STW，最后，并发清除也能与用户线程并行执行。需要指出的是，CMS存在一定的缺点，1是其对CPU资源很敏感，比如其并发阶段是占用了CPU资源（即用户线程占用CPU时间会减少），默认线程数为（CPU数量+3）/4；2是其无法处理浮动垃圾（Floating Garbage），导致会出现Concurrent Mode Failure，从而引起Full GC，引起的原因在于并发清理阶段用户线程的运行会产生新的垃圾需下一次GC才可处理，因此CMS开始回收的阈值为默认92%，避免浮动垃圾导致内存不够用而引起Full GC（这时会临时启用Serial Old回收老年代）；3是其基于标记-清除算法，意味着存在内存碎片，那么碎片过多会导致大对象无法分配而导致Full GC，因此有一个开关参数-XX:UseCMSCompactAtFullCollection控制其在准备Full GC时进行内存整理（这是很耗时的）。采用标记-清除算法<br><img src=\"\\images\\pasted-86.png\" alt=\"upload successful\"><br>&emsp;&emsp;##G1收集器：在暂停时间于吞吐量中权衡。采用G1回收器意味着java堆内存布局与其他回收器将有很大的不同，其将堆分成多个（默认2048个）大小相等的region区域（1M-32M）。注意，超过区域大小一半的对象被视为巨型对象直接分配在老年代。同时，G1维护了一个优先列表用于标识回收各区域的价值大小，从而做到了可预测停顿。同时为了避免全堆扫描对象引用，G1提供了Remembered Set用以维护对象的引用。G1回收大致包含如下4个步骤，初始标记、并发标记、最终标记及筛选回收，各步骤的大致功能与CMS类似。整体来看采用标记-整理算法，局部（region之间）来看采用了复制算法。<br><img src=\"\\images\\pasted-87.png\" alt=\"upload successful\"></p>\n<hr>\n<h2 id=\"内存调优\"><a href=\"#内存调优\" class=\"headerlink\" title=\"内存调优\"></a>内存调优</h2><p>&emsp;&emsp;前面已经讲述了对象的诞生与消亡，在实际的工作中，我们日常开发或许并没有过多关注于这些细节，但有一项是我们时常直接接触到的，即，在应用内存使用不正常、应用运行慢时，我们往往会想到是否存在内存使用上的问题，并想办法进行内存调优。内存调优，它没有一个统一的解决方案，只能说其有相同的调优原则，再结合应用的实际情况针对性的优化，因此，要谈内存调优，更好的方式是从案例入手，在案例中阐述问题分析的过程，如何定位到内存上的问题，又如何进行针对性的调优。本博客中有相关案例，可参考<a href=\"https://realxc.github.io/tags/JVM/\" target=\"_blank\" rel=\"noopener\">https://realxc.github.io/tags/JVM/</a><br>&emsp;&emsp;作为本篇文章的结尾，下面简单介绍一下我们常用的ParNew、CMS、G1回收器的常用且重要的参数配置：<br>ParNew：<br>&emsp;&emsp;-XX:SurvivorRatio=8(默认)中年代占比1：8 sur：eden<br>&emsp;&emsp;-XX:PretenureSizeThreshold 直接晋升到老年代的对象大小<br>&emsp;&emsp;-XX:NewRatio=4(默认) 年轻代和老年代比例<br>CMS<br>&emsp;&emsp;-XX:CMSInitiatinOccupancyFraction=92 老年代达到92%时回收<br>&emsp;&emsp;-XX:UseCMSCompactAtFullCollection控制其在准备Full GC时进行内存整理<br>&emsp;&emsp;-XX:UseConcMarkSweepGC<br>G1<br>&emsp;&emsp;-XX:+UseG1GC<br>&emsp;&emsp;-XX:MaxGCPauseMillis=n 单次GC暂停时间，默认200ms<br>&emsp;&emsp;-XX:InitiatingHeapOccupancyPercent=n mix gc触发时间，老年代已使用空间占用整堆内存比例，默认45（很多人理解为整堆已使用空间占整堆比例，这是错误的）<br>&emsp;&emsp;-XX:MaxTenuringThreshold=n 年轻代最大年龄，默认15<br>&emsp;&emsp;-XX:G1ReservePercent=n 预留空间大小，避免空间被使用完而导致Full GC<br>&emsp;&emsp;-XX:G1HeapRegionSize=n 区域大小，1-32（M）<br>&emsp;&emsp;-XX:G1NewSizePercent=5 默认为5，如果要调整，需解锁实验性标志 eg：-XX:+UnlockExperimentalVMOptions -XX:G1NewSizePercent=10 -XX:G1MaxNewSizePercent=75<br>&emsp;&emsp;-XX:G1MaxNewSizePercent=60 默认为60，如果要调整，需解锁实验性标志 eg：-XX:+UnlockExperimentalVMOptions -XX:G1NewSizePercent=10 -XX:G1MaxNewSizePercent=75</p>\n<hr>\n<p>参考参数（jdk8）：<br>(G1): -XX:+UseG1GC -XX:MaxGCPauseMillis=50（自定义） -Xms4096m（自定义） -Xmx4096m（自定义） -XX:MetaspaceSize=128m（自定义） -XX:MaxMetaspaceSize=512m（自定义） -XX:LargePageSizeInBytes=128m（自定义） -XX:+ParallelRefProcEnabled -XX:+PrintAdaptiveSizePolicy -XX:+UseFastAccessorMethods -XX:+TieredCompilation -XX:+ExplicitGCInvokesConcurrent -XX:AutoBoxCacheMax=20000  -verbosegc -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:/XXX/gc.log -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/XXX/oom-XX.hprof</p>\n<hr>\n<p>(CMS):-Xms4096m（自定义） -Xmx4096m（自定义） -XX:MetaspaceSize=128m（自定义） -XX:MaxMetaspaceSize=512m（自定义） -XX:SurvivorRatio=8（自定义） -XX:NewRatio=4（自定义） -XX:+UseConcMarkSweepGC -XX:+CMSParallelRemarkEnabled -XX:LargePageSizeInBytes=128m（自定义） -XX:+UseFastAccessorMethods -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=70（自定义） -XX:+UseParNewGC -XX:MaxTenuringThreshold=5（自定义） -XX:+CMSClassUnloadingEnabled -XX:+TieredCompilation -XX:+ExplicitGCInvokesConcurrent -XX:AutoBoxCacheMax=20000 -verbosegc -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:/XXX/gc.log -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/XXX/oom-XX.hprof</p>\n<p><a href=\"https://www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html\" target=\"_blank\" rel=\"noopener\">https://www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html</a><br><a href=\"https://www.oracle.com/technetwork/cn/articles/java/g1gc-1984535-zhs.html#Unlock\" target=\"_blank\" rel=\"noopener\">https://www.oracle.com/technetwork/cn/articles/java/g1gc-1984535-zhs.html#Unlock</a></p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"说在前面\"><a href=\"#说在前面\" class=\"headerlink\" title=\"说在前面\"></a>说在前面</h2><p>&emsp;&emsp;本文将从java对象的角度出发，探讨java应用运行过程中“对象”从诞生到消亡的生命历程，结合jvm的相关技术方案简要阐述各个环节的实现细节。需要指出的是，本文旨在阐述清楚“对象”的生命周期，对于jvm（本文基于HotSpot虚拟机）相关技术的深层次原理只会点到为止（能描述清“对象”的生命周期即可），后续将会在其他文章中单独罗列出各个主题进行深入剖析。</p>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><ul>\n<li><a href=\"#partI\">java内存区域</a></li>\n<li><a href=\"#partII\">java对象</a></li>\n<li><a href=\"#partIII\">垃圾回收</a></li>\n<li><a href=\"#partIV\">内存调优</a></li>\n</ul>\n<hr>\n<h2 id=\"java内存区域\"><a href=\"#java内存区域\" class=\"headerlink\" title=\"java内存区域\"></a>java内存区域</h2><p>&emsp;&emsp;java对象生存的载体-运行时数据区，虚拟机中数据区大致包含如下图所示的几个区域：<br><img src=\"\\images\\pasted-74.png\" alt=\"upload successful\"><br>1、程序计数器<br>&emsp;&emsp;当前线程所执行的字节码的行号指示器，标识执行到的节点，这是一块较小的内存空间。由于任何时刻，一个处理器（多核处理器中的某一核）只会执行一个线程中的指令，因此，每个线程都有一个独立、私有的程序计数器。此区域（唯一一个）在java虚拟机规范中没有规定任何OOM的情况。<br>2、虚拟机栈<br>&emsp;&emsp;其生命周期与线程相同，方法在执行时都会创建一个栈帧用于存储局部变量表、操作数栈、动态链接、方法出口等信息，每一个方法的调用就是相应栈帧在虚拟机栈中入栈和出栈的过程。<br>局部变量表：存放编译期可知的各种基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（指向对象起始地址的引用指针-HotSpot方案、或者指向一个代表对象的句柄或其他与此对象相关的位置）、returnAddress类型（执行一条字节码指令的地址）。其中，除long和double占用2个局部变量空间（Slot）外，其余只占用1个Slot。局部变量表所需内存空间在编译期间完成分配，运行期间不会改变大小，即，进入一个方法时，栈帧中所需分配的局部变量空间是确定的。java虚拟机规范对此区域规定了两类异常情况，1是线程请求的栈深度大于虚拟机所允许的深度时抛出StackOverflowError，2是可动态扩展的虚拟机栈扩展时无法申请到足够的内存时抛出OOM。<br>3、本地方法栈<br>&emsp;&emsp;HotSpot将其与虚拟机栈合二为一。它是为虚拟机所使用到的Native方法服务。它可能抛出的异常与虚拟机栈一致。<br>4、堆<br>&emsp;&emsp;此区域用于存放对象的实例。java虚拟机规范原文：The heap is the runtime data area from which memory for all class instances and arrays is allocated.此区域会抛出OOM异常。由于这个区域存分的是对象实例且是线程共享区域，因此在后续的内容中将以此为核心进行讲述。<br>5、方法区（HotSpot，jdk8之后已由元空间取代）<br>&emsp;&emsp;该区域用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据，为了与java堆区分开来，java虚拟机规范为其命了一个别名Non-Heap。该区域会抛出OOM。<br>6、运行时常量池<br>&emsp;&emsp;方法区的一部分，Clas文件中除了由类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池，用于存放编译期生产的各种字面量和符号引用。除了编译期间会产生常量，java允许运行期间产生常量并存放到运行时常量池中，如String.intern()。该区域是方法区的一部分，因此申请不到内存时也会抛出OOM。<br>7、直接内存<br>&emsp;&emsp;它不属于虚拟机运行时数据区的一部分，但其也可能出现OOM，且使用频繁（如NIO类，引入了基于通道（Channel）与缓冲区（Buffer）的I/O方式，可使用Native函数直接分配堆外内存，然后通过一个存储在java堆中的DirectByteBuffer对象作为这块内存的引用进行操作，这样避免了在java堆与Native堆中来回复制数据从而提升了性能）。该区域使用超过机器内存等限制时会抛出OOM。<br>8、元空间<br>&emsp;&emsp;如示意图中所述，HotSpot在jdk8（含）之后，已经移除了老年代（方法区），转由元空间（metaspace）实现，即本地内存Native Memory。<br>&emsp;&emsp;至于为什么使用本地内存替换永久代，官网有如此描述：This is part of the JRockit and Hotspot convergence effort. JRockit customers do not need to configure the permanent generation (since JRockit does not have a permanent generation) and are accustomed to not configuring the permanent generation.<br>&emsp;&emsp;具体移除细节，官网由如此描述：The proposed implementation will allocate class meta-data in native memory and move interned Strings and class statics to the Java heap.<br>&emsp;&emsp;详细信息参见官网地址<a href=\"http://openjdk.java.net/jeps/122\" target=\"_blank\" rel=\"noopener\">http://openjdk.java.net/jeps/122</a></p>\n<hr>\n<h2 id=\"java对象\"><a href=\"#java对象\" class=\"headerlink\" title=\"java对象\"></a>java对象</h2><p>&emsp;&emsp;前面聊完java对象身存的载体的具体结构，下面我们聊一聊java对象本身的一些事，需要说明的的是，此处是基于HotSpot探讨java对象在堆空间上实例的创建、布局以及访问。<br>1、对象的创建<br>&emsp;&emsp;从语言层面来讲，java对象的创建就是一个new关键字，当应用运行时，虚拟机遇到一条new指令，将进行如下操作：<br>&emsp;&emsp;##检查类的加载：检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已经被加载、解析和初始化。<br>&emsp;&emsp;##分配内存：java堆内存是否规整决定了如何分配内存，规整的内存，采用“指针碰撞”（Bump the Pointer），即从已用内存和空闲内存的指针分界点开始向空闲内存移动与对象大小相等的距离即可；如何内存不规整，则需要维护空闲列表（Free List），分配时从列表中选择足够大的空间划分给对象的实例。java堆是否规整与垃圾采集器是否带有压缩整理功能有关，如使用Serial、ParNew这种带Compact过程的收集器时采用指针碰撞，使用CMS这种基于Mark-Sweep算法的收集器时采用空闲列表。另外一个需要考虑的问题是线程安全，解决这个问题有两种方案，1是采用CAS保证原子性；2是为每个线程在java堆中预先分配一小块，即本地线程分配缓冲（TLAB），只需在分配新的TLAB时进行同步锁定，-XX：+/-UseTLAB。<br>&emsp;&emsp;##初始化为0值：此处不包括对象头，这个操作保证了对象的实例可以不赋初始值即可使用。<br>&emsp;&emsp;##对象头信息设置：对象头中包含如，这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的GC分代年龄、锁等信息。<br>&emsp;&emsp;##初始化（执行<init>方法）：一般来说，执行new指令之后会接着执行<init>方法（由字节码中是否跟随invokespecial指令决定），从而，一个真正可以使用的对象诞生。<br>2、对象的内存布局<br>&emsp;&emsp;HotSpot中，对象在内存中存储的布局分为3部分：对象头（Header）、实例数据（Instance Data）以及对齐填充（Padding）。<br>&emsp;&emsp;##对象头：对象头包含两部分，1是用于存储对象自身的运行时数据Mark Work，在32位和64位的虚拟机中分别占32bit、64bit,包含信息如哈希码、GC分代年龄、锁状态标志、线程持有的锁、偏向锁线程ID、偏向时间戳等。eg：32位未锁定状态的对象，25bit用于存储对象哈希码、4bit用于存储对象分代年龄、2bit用于存储锁标识位，1bit固定为0；2是类型指针，即对象指向它的类元数据的指针；对于数组来说，对象头还需有一块用于记录数组长度的数据从而确定数组的大小。<br>&emsp;&emsp;##实例数据：HotSpot默认的分配策略为longs/doubles、ints、shorts/chars、bytes/boolean、oops（Oddinary Pointers），相同宽度的字段被分配在一起，父类定义的变量位于子类变量之前（如果CompactFields=true，子类较窄的变量也可能插入到父类变量的空隙中）。<br>&emsp;&emsp;##对齐填充：HotSpot要求对象起始地址必须是8字节的整数倍，对象头正好符合，因此对象实例数据可用对齐填充来补全。<br>3、对象的访问定位<br>&emsp;&emsp;java程序需要通过栈上的reference数据来操作堆上的具体对象。<br>&emsp;&emsp;##使用句柄访问：reference中存储的是对象的句柄地址，句柄中包含了对象实例数据与类型数据各自的具体地址，此方式，java堆划分出特定的内存作为句柄池。对象的定位需要两次指针定位，1次找到句柄、另1次找到具体的对象，好处则在于垃圾回收后，对象并移动，不用更改reference中的地址，只需更改句柄池中对应的地址。<br>&emsp;&emsp;##使用直接指针访问：reference中存储的是对象地址。对象的定位一次就能找到，提升了性能，HotSpot采用此方案。<br>4、对象的存活<br>&emsp;&emsp;前一部分提到，java程序通过栈上的reference数据操作堆上的对象，被操作的对象称之为被引用。对象是否存活与其是否尚被引用有关，那么我们首先来谈一谈引用。<br>&emsp;&emsp;引用可分为强引用（Strong Reference）、软引用（Soft Reference）、弱引用（Weak Reference）、虚引用（Phantom Reference）。<br>&emsp;&emsp;##强引用：类似于赋值语句那种，垃圾回收器不会回收被引用对象<br>&emsp;&emsp;##软引用：jdk提供了SoftReference类实现软引用，指一些有用但并非必须的对象，系统OOM之前会回收此类对象<br>&emsp;&emsp;##弱引用：jdk提供了WeakReference类实现弱引用，下一次GC时回收此类对象<br>&emsp;&emsp;##虚引用：jdk提供了PhantomReference类实现虚引用，也称之为幽灵引用，对象是否存在虚引用对其本身无任何影响，且无法通过虚引用获得一个对象实例，因此，为对象设置一个虚引用的唯一目的是该对象被回收时收到一个系统通知<br>&emsp;&emsp;下面来谈谈判断对象是否存活的两类算法：<br>&emsp;&emsp;引用计数算法：给对象添加一个引用计算器，值为0时代表对象可回收，但，对于循环依赖来说，这似乎是个问题<br>&emsp;&emsp;可达性分析算法：以一系列被称为GC Roots的对象（虚拟机栈即栈帧中本地变量表中引用的对象；方法区中类静态属性引用的对象；方法区中常量引用的对象；本地方法栈中JNI引用的对象）为起点进行搜索，判断对象是否有引用链到达GC Roots，如果没有，代表对象可回收。<br>&emsp;&emsp;需要说明的是，利用可达性分析出不可达的对象，并不一定会立即回收，因为进行标记时会做一次筛选（条件是对象是否有必要执行finalize(),如果对象没有覆盖此方法或此方法被执行过一次，则不必要，否则会把此类对象放入一个F-Queue队列中由虚拟机自建一个低优先级的Finalizer线程去执行，为了避免执行缓慢，其并不会等待执行结果）。  </init></init></p>\n<hr>\n<h2 id=\"垃圾回收\"><a href=\"#垃圾回收\" class=\"headerlink\" title=\"垃圾回收\"></a>垃圾回收</h2><p>&emsp;&emsp;再谈对象创建之内存分配<br>&emsp;&emsp;这是一个及其重要的环节，且，根据垃圾回收机制的不同而有所差别，在聊垃圾回收之前，我想有必要就这点多说几句。<br>&emsp;&emsp;##对象优先分配在Eden区域，即年轻代<br>&emsp;&emsp;##大对象直接分配在老年代，需要说明的是何为大对象，不同收集器定义的不一样，Serial及ParNew收集器采用参数-XX:PretenureSizeThreshold指定，G1则默认为大于区域region大小一半的对象<br>&emsp;&emsp;##长期存活的对象进入老年代，一般默认为熬过15次年轻代回收的对象，该值可以调整，具体参数名根据收集器的约定而定。另外，如果Survivor空间中相同年龄所有对象大小的总和大于Survivor空间的一半，年龄大于等于该年龄的对象直接进入老年代（针对Serial及ParNew）<br>&emsp;&emsp;##空间分配担保：只要老年代的连续空间大于新生代对象总大小或历次晋升的平局大小则进行MinorGC，否则进行Full GC（针对Serial及ParNew）<br>&emsp;&emsp;前面大概聊了一下虚拟机内存区域以及java对象本身的那点事，这是一个java开发者必备的基础知识，因为你不仅仅应该知道Object obj = new Object（），你更应该清楚java对象究竟是如何诞生的，JVM在这里面做了什么，另一方面，你还应该清楚JVM又是如何替我们清理那些不再被引用的对象。<br>&emsp;&emsp;首先，我们来简单聊聊垃圾收集算法：<br>&emsp;&emsp;标记-清除（Mark-Sweep）算法：顾名思义，它包含两步，一是标记需要回收的对象，二是清除被标记的对象。但有两个明显的问题是，标记和清除两个环节效率都不高，其次，直接清除会导致内存碎片，这将导致大对象无法找到足够大小的连续空间来分配，从而提前下一次GC。<br>&emsp;&emsp;复制（Copying）算法：将内存划分为几块，当一块内存用完后，把存活的对象移动至另一块，再把当前块已使用的空间一性清理掉。但这会导致预留的那部分空间分配时不能用。如HotSpot实现为，将内存分为Eden和两个Survivor，Eden：Survivro为8：1，即预留了10%的空间。需要指出的是，如果对象生命周期长，那么预留的空间也许会出现不够用，这时便需要其他内存进行分配担保（Handle Promotion），这里指的是老年代内存。因为需要额外的空间做担保，那么此算法不适合老年代回收。<br>&emsp;&emsp;标记-整理（Mark-Compact）算法：完成标记后，让所有存活的对象向一端移动，然后直接清理掉端边界之外的内存。<br>&emsp;&emsp;最后要说明的是，当前的商业虚拟机采用分代收集，即区分新生代和老年代，根据其不同特点搭配不通的垃圾收集算法，如年轻代使用复制算法，老年代使用标记-清除算法或标记-整理算法。<br>&emsp;&emsp;HotSpot实现垃圾回收简介：<br>&emsp;&emsp;##进行对象可达性分析时，要考虑一致性问题，因为对象的引用随着应用线程的运行不停的变更着，因此需要STW，由于STW对应用线程影响很大，各种垃圾回收器中对此做了通盘的考虑，但即使如CMS这种号称不会STW的收集器也无法避免枚举根节点时的GC停顿。另外，HotSpot设计了基于OopMap的数据结构来记录对象的引用以提升效率。<br>&emsp;&emsp;安全点：为指令生产OopMap需要大量额外的空间，因此，HotSpot设计中并没为每条指令生成OopMap，只是在一些成为安全点的特定位置记录这些信息，即，只有当线程进入到安全点时才能暂停下来开始GC。安全点的选定是有讲究的，不可过多也不可过少，所以基本考虑在长时间执行的部分设置安全点，如方法调用、循环跳转、异常跳转等。对于线程在安全点如何停下来的问题，有两种手段，一是抢先式中断、二是主动式中断。HotSpot选择后者，即，GC设置中断标识，用户线程主动轮询是否需要中断，轮询标志的地方和安全点重合。<br>&emsp;&emsp;安全区域：对于某些暂时未分配到CUP时间的线程，如其处于Sleep或Blocked状态，JVM不可能瞎等其得到CPU时间后跑到安全点，因此提供了安全区域解决该问题。安全区域中，引用关系不会发生变化，线程进去安全区域时会标识自己已进入，离开时，需要判断系统是否已经完成了根节点枚举或者整个GC过程，没有完成时需等待接收可以离开的信号。<br>&emsp;&emsp;接下来我们来聊聊HotSpot定义的垃圾回收器，这是一个重要的话题，也是日常开发中我们最直接面对的课题，先上一个总图（这里代表的是jdk11之前的垃圾回收器，因为在jdk11中，oracle推出了号称很强大很强大的ZGC，支持TB级的内存回收及单次GC暂停时间低于10ms，目前未使用到该版本的jdk，也尚未对此回收器做研究）<br><img src=\"\\images\\pasted-80.png\" alt=\"upload successful\"><br>&emsp;&emsp;##Serial收集器：单线程收集器，进行垃圾回收时需暂停其他所有线程，直到收集结束。比较老的收集器了，适用于Client模式的应用。采用复制算法<br><img src=\"\\images\\pasted-82.png\" alt=\"upload successful\"><br>&emsp;&emsp;##ParNew收集器：Serial的多线程版本，默认开启的收集线程数与CPU的数量相同，可通过参数-XX:ParallelGCThreads控制。采用复制算法<br><img src=\"\\images\\pasted-84.png\" alt=\"upload successful\"><br>&emsp;&emsp;##Serial Old收集器：其可作为Serial、ParNew及Parallel Scavenge的老年代收集器，同时，当CMS收集发生Concurrent Model Failure时，会使用Serail Old进行Full GC。采用标记-整理算法<br><img src=\"\\images\\pasted-82.png\" alt=\"upload successful\"><br>&emsp;&emsp;##Parallel Scavenge收集器：更加关注吞吐量，即追求最大吞吐量，适用于那些需要大量计算的应用。使用参数-XX:MaxGCPauseMillis控制停顿时间，参数-XX:GCTimeRatio控制吞吐量（如默认99，即1/（1+99）为GC占CPU时间），开关参数-XX:UseAdaptiveSizePolicy打开后即开启了GC自适应调节策略，无需指定年轻代大小、Survivor大小或晋升老年代对象大小。采用复制算法<br><img src=\"\\images\\pasted-85.png\" alt=\"upload successful\"><br>&emsp;&emsp;##Parallel Old收集器：于jdk1.6开始提供，作为Parallel Scavenge的老年代收集器。采用标记-整理算法<br><img src=\"\\images\\pasted-85.png\" alt=\"upload successful\"><br>&emsp;&emsp;##CMS收集器：更加关注暂停时间，即追求最短暂停时间。其大概包含4个步骤，初始标记、并发标记、重新标记、并发清除，其中，初始标记主要是标记GC Roots能直接关联到的对象，这是一个很快的过程，需要STW，并发标记根据初始标记结果遍历上述对象所引用的对象，这个过程耗时较长但能与用户线程并行执行，重新标记则是修正并发标记过程中用户线程导致的变动，相对并发标记来说耗时是比较短的，需要STW，最后，并发清除也能与用户线程并行执行。需要指出的是，CMS存在一定的缺点，1是其对CPU资源很敏感，比如其并发阶段是占用了CPU资源（即用户线程占用CPU时间会减少），默认线程数为（CPU数量+3）/4；2是其无法处理浮动垃圾（Floating Garbage），导致会出现Concurrent Mode Failure，从而引起Full GC，引起的原因在于并发清理阶段用户线程的运行会产生新的垃圾需下一次GC才可处理，因此CMS开始回收的阈值为默认92%，避免浮动垃圾导致内存不够用而引起Full GC（这时会临时启用Serial Old回收老年代）；3是其基于标记-清除算法，意味着存在内存碎片，那么碎片过多会导致大对象无法分配而导致Full GC，因此有一个开关参数-XX:UseCMSCompactAtFullCollection控制其在准备Full GC时进行内存整理（这是很耗时的）。采用标记-清除算法<br><img src=\"\\images\\pasted-86.png\" alt=\"upload successful\"><br>&emsp;&emsp;##G1收集器：在暂停时间于吞吐量中权衡。采用G1回收器意味着java堆内存布局与其他回收器将有很大的不同，其将堆分成多个（默认2048个）大小相等的region区域（1M-32M）。注意，超过区域大小一半的对象被视为巨型对象直接分配在老年代。同时，G1维护了一个优先列表用于标识回收各区域的价值大小，从而做到了可预测停顿。同时为了避免全堆扫描对象引用，G1提供了Remembered Set用以维护对象的引用。G1回收大致包含如下4个步骤，初始标记、并发标记、最终标记及筛选回收，各步骤的大致功能与CMS类似。整体来看采用标记-整理算法，局部（region之间）来看采用了复制算法。<br><img src=\"\\images\\pasted-87.png\" alt=\"upload successful\"></p>\n<hr>\n<h2 id=\"内存调优\"><a href=\"#内存调优\" class=\"headerlink\" title=\"内存调优\"></a>内存调优</h2><p>&emsp;&emsp;前面已经讲述了对象的诞生与消亡，在实际的工作中，我们日常开发或许并没有过多关注于这些细节，但有一项是我们时常直接接触到的，即，在应用内存使用不正常、应用运行慢时，我们往往会想到是否存在内存使用上的问题，并想办法进行内存调优。内存调优，它没有一个统一的解决方案，只能说其有相同的调优原则，再结合应用的实际情况针对性的优化，因此，要谈内存调优，更好的方式是从案例入手，在案例中阐述问题分析的过程，如何定位到内存上的问题，又如何进行针对性的调优。本博客中有相关案例，可参考<a href=\"https://realxc.github.io/tags/JVM/\" target=\"_blank\" rel=\"noopener\">https://realxc.github.io/tags/JVM/</a><br>&emsp;&emsp;作为本篇文章的结尾，下面简单介绍一下我们常用的ParNew、CMS、G1回收器的常用且重要的参数配置：<br>ParNew：<br>&emsp;&emsp;-XX:SurvivorRatio=8(默认)中年代占比1：8 sur：eden<br>&emsp;&emsp;-XX:PretenureSizeThreshold 直接晋升到老年代的对象大小<br>&emsp;&emsp;-XX:NewRatio=4(默认) 年轻代和老年代比例<br>CMS<br>&emsp;&emsp;-XX:CMSInitiatinOccupancyFraction=92 老年代达到92%时回收<br>&emsp;&emsp;-XX:UseCMSCompactAtFullCollection控制其在准备Full GC时进行内存整理<br>&emsp;&emsp;-XX:UseConcMarkSweepGC<br>G1<br>&emsp;&emsp;-XX:+UseG1GC<br>&emsp;&emsp;-XX:MaxGCPauseMillis=n 单次GC暂停时间，默认200ms<br>&emsp;&emsp;-XX:InitiatingHeapOccupancyPercent=n mix gc触发时间，老年代已使用空间占用整堆内存比例，默认45（很多人理解为整堆已使用空间占整堆比例，这是错误的）<br>&emsp;&emsp;-XX:MaxTenuringThreshold=n 年轻代最大年龄，默认15<br>&emsp;&emsp;-XX:G1ReservePercent=n 预留空间大小，避免空间被使用完而导致Full GC<br>&emsp;&emsp;-XX:G1HeapRegionSize=n 区域大小，1-32（M）<br>&emsp;&emsp;-XX:G1NewSizePercent=5 默认为5，如果要调整，需解锁实验性标志 eg：-XX:+UnlockExperimentalVMOptions -XX:G1NewSizePercent=10 -XX:G1MaxNewSizePercent=75<br>&emsp;&emsp;-XX:G1MaxNewSizePercent=60 默认为60，如果要调整，需解锁实验性标志 eg：-XX:+UnlockExperimentalVMOptions -XX:G1NewSizePercent=10 -XX:G1MaxNewSizePercent=75</p>\n<hr>\n<p>参考参数（jdk8）：<br>(G1): -XX:+UseG1GC -XX:MaxGCPauseMillis=50（自定义） -Xms4096m（自定义） -Xmx4096m（自定义） -XX:MetaspaceSize=128m（自定义） -XX:MaxMetaspaceSize=512m（自定义） -XX:LargePageSizeInBytes=128m（自定义） -XX:+ParallelRefProcEnabled -XX:+PrintAdaptiveSizePolicy -XX:+UseFastAccessorMethods -XX:+TieredCompilation -XX:+ExplicitGCInvokesConcurrent -XX:AutoBoxCacheMax=20000  -verbosegc -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:/XXX/gc.log -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/XXX/oom-XX.hprof</p>\n<hr>\n<p>(CMS):-Xms4096m（自定义） -Xmx4096m（自定义） -XX:MetaspaceSize=128m（自定义） -XX:MaxMetaspaceSize=512m（自定义） -XX:SurvivorRatio=8（自定义） -XX:NewRatio=4（自定义） -XX:+UseConcMarkSweepGC -XX:+CMSParallelRemarkEnabled -XX:LargePageSizeInBytes=128m（自定义） -XX:+UseFastAccessorMethods -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=70（自定义） -XX:+UseParNewGC -XX:MaxTenuringThreshold=5（自定义） -XX:+CMSClassUnloadingEnabled -XX:+TieredCompilation -XX:+ExplicitGCInvokesConcurrent -XX:AutoBoxCacheMax=20000 -verbosegc -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:/XXX/gc.log -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/XXX/oom-XX.hprof</p>\n<p><a href=\"https://www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html\" target=\"_blank\" rel=\"noopener\">https://www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html</a><br><a href=\"https://www.oracle.com/technetwork/cn/articles/java/g1gc-1984535-zhs.html#Unlock\" target=\"_blank\" rel=\"noopener\">https://www.oracle.com/technetwork/cn/articles/java/g1gc-1984535-zhs.html#Unlock</a></p>\n<hr>\n"},{"title":"spring-boot1.3.5支持jsp导致浏览器访问应用偶尔慢","author":"Xiang Chuang","date":"2019-07-08T06:42:00.000Z","_content":"本文将阐述在基于spring-boot1.3.5日常开发中所遇到的一个疑惑的问题，下面将按照问题处理的过程进行行文！！！\n\n一、项目简介：\n\t这儿有一个业务系统，我们称之为M，架构基于springboot1.3.5，同时提供了web能力，前后端分离。线上生产环境中，外部商户的【取现业务】会跳转到本系统的页面上进行操作，实际场景中更多的是手机端进行页面跳转，但也可以PC端网页版跳转，因为M是基于spring-mvc提供的能力（这是对项目的通用认知，但某些关键的细节点并没有包含在里面，以至于在后续问题分析中走了很多弯路，耗时2天半才定位到问题）。\n    \n二、问题现象\n\t业务运行过程中，外部商户吐槽声来了，为什么跳转到你们的页面那么慢，耗时3-4s甚至更久，且频次比较高（后经运维部门同时查看，发现超过10%的请求出现慢的情况）。由于外部商户是移动端app，因此业务跳转耗时3-4s反馈到用户那儿便是点击确认操作后白板3-4s。这确实是一个糟糕的用户体验！另，据相关小伙伴反映，这是一个由来已久的问题，只是以前业务少，而且是自己的前端业务部门使用，有时忍忍就过去了。（这儿提到这一点，因为，如果能证实以前的慢和现在的慢问题一样，那么可以推导出并不是新的改动后其他操作带来的新问题，这对问题定位有指导性意义，但分析问题时总归是仓促的，这些信息极容易被丢掉）。\n    \n三、业务描述\n\t为了阐述问题的分析过程，业务场景必须清晰，下面简介一下该业务场景：\n    \n![upload successful](\\images\\pasted-88.png)\n\n四、问题排查\n\t通过前面的描述，我们知道了业务场景、系统情况及问题现象，接下来，我们开始了问题排查的过程，这过程，是痛苦的！！！\na、首先，我们根据商户提供的流水号进行日志查询，发现商户请求的时间和我们底层系统M实际收到的时间确实相差了3-4s，于是，我们找到了入口系统Api，因为整个业务场景，是由Api进行的页面跳转，会不会是Api做了什么事，导致页面跳转慢了？\nb、通过查询Api的日志，发现收到请求的时间确实和商户时间一致，我们似乎找到问题根源，即Api有问题，但当进一步排查时，发现Api和M的交互只是做了简单的302重定向，并无其他逻辑，且发现Api发起重定向的时间到M“接收”到请求便耗时了3-4s，于是，我们把矛头指向了网络问题，加之跳转过程是用的域名跳转，我们更深信这3-4s花在了网络上！\nc、我们怀疑是否是网络问题，于是找到运维的小伙伴，一通排查，回复我们网络没问题，并给了我们ng日志\n![upload successful](\\images\\pasted-89.png)\nd、这个回复让我们不甘心，因为我们的Api正常的发起了跳转请求，我们的M系统3-4s后才接收到请求，那这耗时一定是在网络上啊，并多次反复追问信息中心域名等相关网络问题，后来，我通过PC页面直接进行测试（因为我也是该产品的用户），当我一顿操作并点击确认按钮后，咦，很快呀，但，接下来我反复的重试、刷新、重试，果不其然偶尔出现了一笔3-4s的耗时，看来这真是偶尔出现呀（偶发问题，那这不应该是应用问题呀！），紧接着我使用谷歌浏览器看了请求情况，发现如下信息：\n![upload successful](\\images\\pasted-90.png)，咦，这耗时花在了TTFB上面呀，然后百度一查，TTFB包含了tcp握手时间及服务端返回第一个字节的时间。哦，那这不正说明了网络问题嘛！同时我发现处理页面偶尔慢，某些纯后台服务或者图片也慢呀，于是又找到了运维同事，这已经大半天过去了（虽然中间处理问题断断续续）\ne、这时，运维同事按照我们的方式测试，也确实出现了偶尔慢，他们抓包分析，发现当前网络正常呀，但有一个现象，慢的请求有三次重复ACK的现象，这是什么鬼？运维同事说这是正常的，TCP包乱序会重复发起ACK嘛，我将信将疑，但问题没说通啊，为什么慢，一小时过去了。这时更多的同事加入到问题分析，运维小伙伴为证明不是网络问题，在线上服务器直接ip访问页面，发现，也会出现慢，于是，我们也选择相信了网络没问题，但问题是什么？\nf、这时我们测试过程中，又发现了某些图片资源404，某些图片资源即使存在但偶尔会慢，咦，是不是因为页面访问了资源而资源慢导致页面慢？这时其实问题的分析稍有偏差了，因为前面d的时候已经出现过类似问题，但没有包含资源的纯后台功能也慢啊！但花了近一天的分析，实在是太困惑，于是我们朝着这个方向去了。\ng、我们把页面扣了出来，并扔到了ng上，既然图片资源慢，我们改动页面，以至于后面仅仅是一个纯文本页面了，确实，访问不慢了（但前面说了，这已经偏离了，因为页面位于ng中，而不是项目中，但这也是分析的必经之地，因为这儿确实也存在问题），我们尝试加上css、js资源，慢又出现了，并且发现都是图标慢，但，这不应该呀，CDN上静态资源应该很快呀，但后面我们发现这些慢的图片并不位于CDN，而是在项目M中，同时也存在访问了CDN上不存在且并不需要依赖的资源。我们把图片映射做了一下ng映射（前面说的这是在ng上的页面），再次访问，正常了。于是结论出来了，至少，前端开发中，动静分离不合规，同时copy代码，无用的资源访问也出现了。这是今天耗时一天的分析结论。但。\nh、第二天，上班后，按照昨日的分析，前端进行了标准化的优化，上线，但问题依旧（毕竟前面图片这个问题是问题，但不是这次问题的根本问题）。这时，大家伙都很无语了，不知道为什么了！运维小伙伴又将纯文本页面扔到M项目中，启动访问，发现，也会慢呀，什么情况！同时，相同页面单独扔到tomcat中启动就正常，哎，见鬼了。似乎无下文了。\ni、这时M系统负责人突然说到，测试环境能重现慢的问题，（我似乎看到了一丝曙光），但本地启动没问题（这个。。。），，难道还是环境问题？我来到测试环境中进行测试，看着业务日志与gc日志，发现几乎每次慢的时候就会做一次gc回收，咦，内存有问题？（实际是因为测试环境内存小，512M堆大小），但我又发现线上gc正常啊，但一点蛛丝马迹都得一试，把线上1.5G堆调成了4G堆，不过，问题依旧啊，似乎还慢的更频繁的样子（还好是基于http访问有硬件负载均衡，正常业务跑不进来）。\nj、心有不甘，但想着能重现问题，应该就能定位到问题，于是我开始了代码分析之路，和其他小伙伴从两个方向并行去分析，都耗时一天半了，心想着，两个思路一起搞，兴许快点。既然测试环境能重现，好吧，我试试本地是不是真重现不了，我打开idea启动M，一顿尝试，好像真不可以呢。但我debug到了请求执行的环节，那，好吧，开启debug日志在测试环境看看，是哪个环节慢了？基于warn日志级别重启测试环境M，然后测试，发现，咦，真是的业务系统自己慢呢，已经收到请求了，在某个环节慢，而且，把页面扔到其他系统进行访问却没问题：\n```\n2019-07-05 19:05:38.955 DEBUG [http-nio-8004-exec-3] InternalNioInputBuffer:180-- Received [GET /creditCard/cardBinInfo.json HTTP/1.1\nHost: 192.168.46.3:8004\nConnection: keep-alive\nUpgrade-Insecure-Requests: 1\nUser-Agent: Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Mobile Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\nAccept-Encoding: gzip, deflate, sdch\nAccept-Language: zh-CN,zh;q=0.8\nCookie: _csrf=c25ca56a-799f-4e23-b179-b09abaf7fa0e; cavyboss-session=40c8e4d0-0d09-4952-8812-93a1f44b0068; mpay-session=0714ad72-0e83-43d9-8b87-b002c34a71f3\n\n]\n2019-07-05 19:05:38.956 DEBUG [http-nio-8004-exec-3] CoyoteAdapter:180-- The variable [uriBC] has value [/creditCard/cardBinInfo.json]\n2019-07-05 19:05:38.957 DEBUG [http-nio-8004-exec-3] CoyoteAdapter:180-- The variable [semicolon] has value [-1]\n2019-07-05 19:05:38.957 DEBUG [http-nio-8004-exec-3] CoyoteAdapter:180-- The variable [enc] has value [utf-8]\n2019-07-05 19:05:42.640 DEBUG [http-nio-8004-exec-3] LegacyCookieProcessor:180-- Cookies: Parsing b[]: _csrf=c25ca56a-799f-4e23-b179-b09abaf7fa0e; cavyboss-session=40c8e4d0-0d09-4952-8812-93a1f44b0068; mpay-session=0714ad72-0e83-43d9-8b87-b002c34a71f3\n2019-07-05 19:05:42.643 DEBUG [http-nio-8004-exec-3] CoyoteAdapter:180--  Requested cookie session id is 0714ad72-0e83-43d9-8b87-b002c34a71f3\n2019-07-05 19:05:42.645 DEBUG [http-nio-8004-exec-3] RemoteIpValve:180-- Incoming request /creditCard/cardBinInfo.json with originalRemoteAddr '192.168.47.152', originalRemoteHost='192.168.47.152', originalSecure='false', originalScheme='http' will be seen as newRemoteAddr='192.168.47.152', newRemoteHost='192.168.47.152', newScheme='http', newSecure='false'\n2019-07-05 19:05:42.645 DEBUG [http-nio-8004-exec-3] AuthenticatorBase:180-- Security checking request GET /creditCard/cardBinInfo.json\n2019-07-05 19:05:42.646 DEBUG [http-nio-8004-exec-3] RealmBase:180--   No applicable constraints defined\n2019-07-05 19:05:42.646 DEBUG [http-nio-8004-exec-3] AuthenticatorBase:180--  Not subject to any constraint\n2019-07-05 19:05:42.653 DEBUG [http-nio-8004-exec-3] OrderedRequestContextFilter:114-- Bound request context to thread: org.springframework.session.web.http.SessionRepositoryFilter$SessionRepositoryRequestWrapper@5edc7f61\n2019-07-05 19:05:42.654 DEBUG [http-nio-8004-exec-3] DispatcherServlet:863-- DispatcherServlet with name 'dispatcherServlet' processing GET request for [/creditCard/cardBinInfo.json]\n2019-07-05 19:05:42.655 DEBUG [http-nio-8004-exec-3] Parameters:180-- Set encoding to UTF-8\n2019-07-05 19:05:42.660 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:125-- Opening RedisConnection\n2019-07-05 19:05:42.663 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:205-- Closing Redis Connection\n2019-07-05 19:05:42.663 DEBUG [http-nio-8004-exec-3] EndpointHandlerMapping:301-- Looking up handler method for path /creditCard/cardBinInfo.json\n2019-07-05 19:05:42.671 DEBUG [http-nio-8004-exec-3] EndpointHandlerMapping:311-- Did not find handler method for [/creditCard/cardBinInfo.json]\n2019-07-05 19:05:42.671 DEBUG [http-nio-8004-exec-3] RequestMappingHandlerMapping:301-- Looking up handler method for path /creditCard/cardBinInfo.json\n2019-07-05 19:05:42.692 DEBUG [http-nio-8004-exec-3] RequestMappingHandlerMapping:308-- Returning handler method [public java.lang.Object com.yiji.mobilepay.web.controller.CreditCardWithdrawControler.cardBinInfo(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)]\n2019-07-05 19:05:42.692 DEBUG [http-nio-8004-exec-3] DefaultListableBeanFactory:251-- Returning cached instance of singleton bean 'creditCardWithdrawControler'\n2019-07-05 19:05:42.693 DEBUG [http-nio-8004-exec-3] DispatcherServlet:949-- Last-Modified value for [/creditCard/cardBinInfo.json] is: -1\n2019-07-05 19:05:42.704 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:125-- Opening RedisConnection\n2019-07-05 19:05:42.704 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:205-- Closing Redis Connection\n2019-07-05 19:05:42.831 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     findResources(META-INF/services/com.alibaba.fastjson.serializer.AutowiredObjectSerializer)\n2019-07-05 19:05:42.841 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:125-- Opening RedisConnection\n2019-07-05 19:05:42.842 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:205-- Closing Redis Connection\n2019-07-05 19:05:42.844 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:125-- Opening RedisConnection\n2019-07-05 19:05:42.844 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:205-- Closing Redis Connection\n2019-07-05 19:05:42.847 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:125-- Opening RedisConnection\n2019-07-05 19:05:42.848 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:205-- Closing Redis Connection\n2019-07-05 19:05:42.848 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:125-- Opening RedisConnection\n2019-07-05 19:05:42.849 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:205-- Closing Redis Connection\n2019-07-05 19:05:42.849 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:125-- Opening RedisConnection\n2019-07-05 19:05:42.849 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:205-- Closing Redis Connection\n2019-07-05 19:05:42.862 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     findClass(com.yjf.common.lang.result.ViewResultInfoBeanInfo)\n2019-07-05 19:05:42.862 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     --> Returning ClassNotFoundException\n2019-07-05 19:05:42.866 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     findClass(com.yjf.common.lang.result.ViewResultInfoCustomizer)\n2019-07-05 19:05:42.867 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     --> Returning ClassNotFoundException\n2019-07-05 19:05:42.869 DEBUG [dubbo-remoting-client-heartbeat-thread-1] HeartBeatTask:66--  [DUBBO] Send heartbeat to remote channel /192.168.46.3:20917, cause: The channel has no data-transmission exceeds a heartbeat period: 60000ms\n2019-07-05 19:05:42.870 DEBUG [New I/O client worker #1-3] HeartbeatHandler:82--  [DUBBO] Receive heartbeat response in thread New I/O client worker #1-3\n2019-07-05 19:05:42.874 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180-- getResource(Object.class)\n2019-07-05 19:05:42.874 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   Delegating to parent classloader org.springframework.boot.loader.LaunchedURLClassLoader@11a9e7c8\n2019-07-05 19:05:42.875 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     findResource(Object.class)\n2019-07-05 19:05:42.876 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     --> Resource not found, returning null\n2019-07-05 19:05:42.876 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   --> Resource not found, returning null\n2019-07-05 19:05:42.877 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180-- getResource(String.class)\n2019-07-05 19:05:42.878 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   Delegating to parent classloader org.springframework.boot.loader.LaunchedURLClassLoader@11a9e7c8\n2019-07-05 19:05:42.879 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     findResource(String.class)\n2019-07-05 19:05:42.879 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     --> Resource not found, returning null\n2019-07-05 19:05:42.880 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   --> Resource not found, returning null\n2019-07-05 19:05:42.881 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180-- getResource(StringBuilder.class)\n2019-07-05 19:05:42.882 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   Delegating to parent classloader org.springframework.boot.loader.LaunchedURLClassLoader@11a9e7c8\n2019-07-05 19:05:42.883 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     findResource(StringBuilder.class)\n2019-07-05 19:05:42.883 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     --> Resource not found, returning null\n2019-07-05 19:05:42.884 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   --> Resource not found, returning null\n2019-07-05 19:05:42.887 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180-- getResource(com.class)\n2019-07-05 19:05:42.887 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   Delegating to parent classloader org.springframework.boot.loader.LaunchedURLClassLoader@11a9e7c8\n2019-07-05 19:05:42.888 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     findResource(com.class)\n2019-07-05 19:05:42.889 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     --> Resource not found, returning null\n2019-07-05 19:05:42.889 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   --> Resource not found, returning null\n2019-07-05 19:05:42.890 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180-- getResource(java/lang/com.class)\n2019-07-05 19:05:42.891 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   Delegating to parent classloader org.springframework.boot.loader.LaunchedURLClassLoader@11a9e7c8\n2019-07-05 19:05:42.892 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     findResource(java/lang/com.class)\n2019-07-05 19:05:42.892 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     --> Resource not found, returning null\n2019-07-05 19:05:42.893 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   --> Resource not found, returning null\n2019-07-05 19:05:42.894 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180-- getResource(com/yjf.class)\n2019-07-05 19:05:42.894 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   Delegating to parent classloader org.springframework.boot.loader.LaunchedURLClassLoader@11a9e7c8\n2019-07-05 19:05:42.895 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     findResource(com/yjf.class)\n2019-07-05 19:05:42.896 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     --> Resource not found, returning null\n2019-07-05 19:05:42.896 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   --> Resource not found, returning null\n2019-07-05 19:05:42.897 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180-- getResource(com/yjf/common.class)\n2019-07-05 19:05:42.898 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   Delegating to parent classloader org.springframework.boot.loader.LaunchedURLClassLoader@11a9e7c8\n2019-07-05 19:05:42.899 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     findResource(com/yjf/common.class)\n2019-07-05 19:05:42.899 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     --> Resource not found, returning null\n2019-07-05 19:05:42.900 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   --> Resource not found, returning null\n2019-07-05 19:05:42.901 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180-- getResource(com/yjf/common/util.class)\n2019-07-05 19:05:42.901 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   Delegating to parent classloader org.springframework.boot.loader.LaunchedURLClassLoader@11a9e7c8\n2019-07-05 19:05:42.902 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     findResource(com/yjf/common/util.class)\n2019-07-05 19:05:42.903 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     --> Resource not found, returning null\n2019-07-05 19:05:42.903 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   --> Resource not found, returning null\n2019-07-05 19:05:42.908 DEBUG [http-nio-8004-exec-3] ToString:550-- classloader:TomcatEmbeddedWebappClassLoader\n  context: ROOT\n  delegate: true\n----------> Parent Classloader:\norg.springframework.boot.loader.LaunchedURLClassLoader@11a9e7c8\n\n2019-07-05 19:05:42.910 DEBUG [http-nio-8004-exec-3] RequestResponseBodyMethodProcessor:225-- Written [ViewResultInfo{code=null,data=null,message=请通过网页正常步骤进行访问或者系统已超时,success=false}] as \"application/json;charset=UTF-8\" using [com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter@3220bfbc]\n2019-07-05 19:05:42.911 DEBUG [http-nio-8004-exec-3] DispatcherServlet:1036-- Null ModelAndView returned to DispatcherServlet with name 'dispatcherServlet': assuming HandlerAdapter completed request handling\n2019-07-05 19:05:42.911 DEBUG [http-nio-8004-exec-3] DispatcherServlet:997-- Successfully completed request\n2019-07-05 19:05:42.911 DEBUG [http-nio-8004-exec-3] OrderedRequestContextFilter:104-- Cleared thread-bound request context: org.springframework.session.web.http.SessionRepositoryFilter$SessionRepositoryRequestWrapper@5edc7f61\n2019-07-05 19:05:42.912 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:125-- Opening RedisConnection\n2019-07-05 19:05:42.912 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:205-- Closing Redis Connection\n2019-07-05 19:05:42.912 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:125-- Opening RedisConnection\n2019-07-05 19:05:42.913 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:205-- Closing Redis Connection\n2019-07-05 19:05:42.913 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:125-- Opening RedisConnection\n2019-07-05 19:05:42.913 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:205-- Closing Redis Connection\n```\n但是，这个环节去干什么了呢？源代码日志很少，看不出来呀！难道是分布式session问题，发现springboot分布式session我们内部是用redis实现的，后经一顿排查，发现上面日志中已经包含了redis的操作，但是是在慢的那个环节之后呀（不过提了个醒，以后redis要是抽风，这也是个风险点呢）。\nk、现在知道问题就出在org.apache.catalina.connector.CoyoteAdapter这个类日志中显示的慢的那个环节了，但他究竟干了什么？貌似只是简单的一些操作啊，代码层次很深，今天也疲惫了，就没往深处看，为什么本地测试不出现问题？带着这些疑问，今天收班了。\nl、今天本来是周六，但问题没解决，心有不甘呀，而且都能重现问题了，要是不定位到，好可惜。于是背着包来到了公司，反正今日无安排！来到公司，经过昨晚和今早放松了大脑，又准备整装待发了。本地不出问题，难道是打包环节不一样？两个私服不一致?于是我把测试环境的jar包拷了下来，java XXX -jar启动，咦，本地重现问题了！真是私服问题，包版本不一致？我又把本地项目用另一个私服打了jar包java XXX -jar启动，咦，问题也重现了，哦！原来是idea启动时候和java -jar有些区别（也许是classpath加载的区别吧），此处没深究，但很庆幸，本地重现问题，离问题定位再进一步\nm、既然本地都重现问题了，虽然不能用idea断点测试，但我改改源码加加日志吧。ok！源码日志已加好，这下日志详细了吧，java XXX -jar启动，测试，啊！原来是这慢，还以为只是简单的map呢，被类名迷惑了：\n```\n2019-07-06 11:44:55.430 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- normaliztion start............................\n2019-07-06 11:44:55.430 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- normaliztion end............................\n2019-07-06 11:44:55.432 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- decodedURI start............................\n2019-07-06 11:44:55.432 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- decodedURI end............................\n2019-07-06 11:44:55.432 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- check normaliztion start............................\n2019-07-06 11:44:55.432 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- check normaliztion end............................\n2019-07-06 11:44:55.433 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- check getUseIPVHosts start............................{}false\n2019-07-06 11:44:55.433 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- check getUseIPVHosts end............................{}localhost\n2019-07-06 11:44:55.433 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- check mapreu start............................{}\n2019-07-06 11:45:00.570 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- check mapreu end............................{}\n2019-07-06 11:45:00.570 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- check session start1............................{}\n2019-07-06 11:45:00.570 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- check session start4............................{}\n2019-07-06 11:45:00.571 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- check session start5............................{}\n2019-07-06 11:45:00.571 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- check session start6............................{}\n2019-07-06 11:45:00.571 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- check session start7............................{}\n```\n源码\n```\n// This will map the the latest version by default\n            connector.getService().getMapper().map(serverName, decodedURI,\n                    version, request.getMappingData());\n```\n此时内心激动，问题似乎更清晰了，打开idea，断点调试，往里面跟，发现了一个gateway页面，咦，这是我们自定义的页面，全项目搜索一下，它干啥了！\n源码：\n```\n // Rule 1 -- Exact Match\n        MappedWrapper[] exactWrappers = contextVersion.exactWrappers;\n        internalMapExactWrapper(exactWrappers, path, mappingData);\n\n        // Rule 2 -- Prefix Match\n        boolean checkJspWelcomeFiles = false;\n        MappedWrapper[] wildcardWrappers = contextVersion.wildcardWrappers;\n        if (mappingData.wrapper == null) {\n            internalMapWildcardWrapper(wildcardWrappers, contextVersion.nesting,\n                                       path, mappingData);                                    \n```\n包含gateway的代码：\n```\n@Configuration\npublic class StargateConfigration {\n\t@Bean\n\tpublic ServletRegistrationBean dispatcherRegistration(StargateDispachServlet stargateDispachServlet) {\n\t    ServletRegistrationBean registration = new ServletRegistrationBean(\n\t    \t\tstargateDispachServlet);\n\t    registration.addUrlMappings(\"/gateway\");\n\t    return registration;\n\t}\n\n```\n咦，servlet，我顿时想起以前好像我们的spring-boot专门做了对jsp的支持，于是来到我们的tomcat-staters，\n```\n\n\t@Bean(name = \"yijiEmbeddedServletContainerCustomizer\")\n\tpublic EmbeddedServletContainerCustomizer embeddedServletContainerCustomizer() {\n\t\t\n\t\treturn container -> {\n\t\t\t//1. disable jsp if possible\n\t\t\tif (!tomcatProperties.getJsp().isEnable()) {\n\t\t\t\tJspServlet jspServlet = new JspServlet();\n\t\t\t\tjspServlet.setRegistered(false);\n\t\t\t\tcontainer.setJspServlet(jspServlet);\n\t\t\t}\n```\n难道是M系统启用了yiji.tomcat.jsp.enable=true？通过线上系统变量搜索，发现，确实，M启用了，其他系统没有，恍然大悟，这就是为什么M有问题而其他系统没问题的原因吧！于是我java -Dyiji.tomcat.jsp.enable=false -jar M，测试，果然，不慢了。。。问题终于定位到，spring-boot本身不推荐jsp，但提供了支持，这说明本身支持的方式就存在性能问题！\nn、嗯，接下来，下掉jsp吧，本来这就是遗留问题，传统项目采用jsp，切换springboot后强行支持了jsp，但却有性能问题！还有安全漏洞！\n\n下面说说spring-boot如何支持jsp吧。其实就是多注册一个JspServlet!\n1、添加依赖\n```\n<dependency>\n            <groupId>org.apache.tomcat.embed</groupId>\n            <artifactId>tomcat-embed-jasper</artifactId>\n            <scope>provided</scope>\n        </dependency>\n        <dependency>\n            <groupId>javax.servlet</groupId>\n            <artifactId>jstl</artifactId>\n        </dependency>\n```\n2、配置文件中指定jsp文件存放路径\n```\n#路径,在webapp文件夹下新建文件夹WEB-INF,在往下建文件夹jsp\nspring.mvc.view.prefix=/WEB-INF/jsp/\n#文件名的后缀,例如:index.jsp,放在jsp文件夹下\nspring.mvc.view.suffix=.jsp\n```\n![upload successful](\\images\\pasted-91.png)\n3、作为框架，我们默认不支持jsp，因为有性能损耗\n```\nif (!tomcatProperties.getJsp().isEnable()) {\n\t\t\t\tJspServlet jspServlet = new JspServlet();\n\t\t\t\tjspServlet.setRegistered(false);\n\t\t\t\tcontainer.setJspServlet(jspServlet);\n\t\t\t}\n```\n4、业务系统根据自身情况决定是否启动jsp支持，启用，意味着接受性能损耗！\n\n心得：\n  本地问题分析历史2天半（中途很多时间在处理其他事情），心理感受颇多，分析线上类似问题一定要思路清晰，类似问题，先网路再应用，另外一定要有主线，如果能本地重现问题，那可是天大的好事，源码跟踪，源码添加日志可有效帮我们分析问题，总之，分析跨系统、跨部门、框架级问题时，协作、心态很重要！","source":"_posts/spring-boot1-3-5支持jsp导致浏览器访问应用偶尔慢.md","raw":"title: spring-boot1.3.5支持jsp导致浏览器访问应用偶尔慢\nauthor: Xiang Chuang\ntags:\n  - spring-boot\n  - jsp\ncategories:\n  - 这些年，那些坑\ndate: 2019-07-08 14:42:00\n---\n本文将阐述在基于spring-boot1.3.5日常开发中所遇到的一个疑惑的问题，下面将按照问题处理的过程进行行文！！！\n\n一、项目简介：\n\t这儿有一个业务系统，我们称之为M，架构基于springboot1.3.5，同时提供了web能力，前后端分离。线上生产环境中，外部商户的【取现业务】会跳转到本系统的页面上进行操作，实际场景中更多的是手机端进行页面跳转，但也可以PC端网页版跳转，因为M是基于spring-mvc提供的能力（这是对项目的通用认知，但某些关键的细节点并没有包含在里面，以至于在后续问题分析中走了很多弯路，耗时2天半才定位到问题）。\n    \n二、问题现象\n\t业务运行过程中，外部商户吐槽声来了，为什么跳转到你们的页面那么慢，耗时3-4s甚至更久，且频次比较高（后经运维部门同时查看，发现超过10%的请求出现慢的情况）。由于外部商户是移动端app，因此业务跳转耗时3-4s反馈到用户那儿便是点击确认操作后白板3-4s。这确实是一个糟糕的用户体验！另，据相关小伙伴反映，这是一个由来已久的问题，只是以前业务少，而且是自己的前端业务部门使用，有时忍忍就过去了。（这儿提到这一点，因为，如果能证实以前的慢和现在的慢问题一样，那么可以推导出并不是新的改动后其他操作带来的新问题，这对问题定位有指导性意义，但分析问题时总归是仓促的，这些信息极容易被丢掉）。\n    \n三、业务描述\n\t为了阐述问题的分析过程，业务场景必须清晰，下面简介一下该业务场景：\n    \n![upload successful](\\images\\pasted-88.png)\n\n四、问题排查\n\t通过前面的描述，我们知道了业务场景、系统情况及问题现象，接下来，我们开始了问题排查的过程，这过程，是痛苦的！！！\na、首先，我们根据商户提供的流水号进行日志查询，发现商户请求的时间和我们底层系统M实际收到的时间确实相差了3-4s，于是，我们找到了入口系统Api，因为整个业务场景，是由Api进行的页面跳转，会不会是Api做了什么事，导致页面跳转慢了？\nb、通过查询Api的日志，发现收到请求的时间确实和商户时间一致，我们似乎找到问题根源，即Api有问题，但当进一步排查时，发现Api和M的交互只是做了简单的302重定向，并无其他逻辑，且发现Api发起重定向的时间到M“接收”到请求便耗时了3-4s，于是，我们把矛头指向了网络问题，加之跳转过程是用的域名跳转，我们更深信这3-4s花在了网络上！\nc、我们怀疑是否是网络问题，于是找到运维的小伙伴，一通排查，回复我们网络没问题，并给了我们ng日志\n![upload successful](\\images\\pasted-89.png)\nd、这个回复让我们不甘心，因为我们的Api正常的发起了跳转请求，我们的M系统3-4s后才接收到请求，那这耗时一定是在网络上啊，并多次反复追问信息中心域名等相关网络问题，后来，我通过PC页面直接进行测试（因为我也是该产品的用户），当我一顿操作并点击确认按钮后，咦，很快呀，但，接下来我反复的重试、刷新、重试，果不其然偶尔出现了一笔3-4s的耗时，看来这真是偶尔出现呀（偶发问题，那这不应该是应用问题呀！），紧接着我使用谷歌浏览器看了请求情况，发现如下信息：\n![upload successful](\\images\\pasted-90.png)，咦，这耗时花在了TTFB上面呀，然后百度一查，TTFB包含了tcp握手时间及服务端返回第一个字节的时间。哦，那这不正说明了网络问题嘛！同时我发现处理页面偶尔慢，某些纯后台服务或者图片也慢呀，于是又找到了运维同事，这已经大半天过去了（虽然中间处理问题断断续续）\ne、这时，运维同事按照我们的方式测试，也确实出现了偶尔慢，他们抓包分析，发现当前网络正常呀，但有一个现象，慢的请求有三次重复ACK的现象，这是什么鬼？运维同事说这是正常的，TCP包乱序会重复发起ACK嘛，我将信将疑，但问题没说通啊，为什么慢，一小时过去了。这时更多的同事加入到问题分析，运维小伙伴为证明不是网络问题，在线上服务器直接ip访问页面，发现，也会出现慢，于是，我们也选择相信了网络没问题，但问题是什么？\nf、这时我们测试过程中，又发现了某些图片资源404，某些图片资源即使存在但偶尔会慢，咦，是不是因为页面访问了资源而资源慢导致页面慢？这时其实问题的分析稍有偏差了，因为前面d的时候已经出现过类似问题，但没有包含资源的纯后台功能也慢啊！但花了近一天的分析，实在是太困惑，于是我们朝着这个方向去了。\ng、我们把页面扣了出来，并扔到了ng上，既然图片资源慢，我们改动页面，以至于后面仅仅是一个纯文本页面了，确实，访问不慢了（但前面说了，这已经偏离了，因为页面位于ng中，而不是项目中，但这也是分析的必经之地，因为这儿确实也存在问题），我们尝试加上css、js资源，慢又出现了，并且发现都是图标慢，但，这不应该呀，CDN上静态资源应该很快呀，但后面我们发现这些慢的图片并不位于CDN，而是在项目M中，同时也存在访问了CDN上不存在且并不需要依赖的资源。我们把图片映射做了一下ng映射（前面说的这是在ng上的页面），再次访问，正常了。于是结论出来了，至少，前端开发中，动静分离不合规，同时copy代码，无用的资源访问也出现了。这是今天耗时一天的分析结论。但。\nh、第二天，上班后，按照昨日的分析，前端进行了标准化的优化，上线，但问题依旧（毕竟前面图片这个问题是问题，但不是这次问题的根本问题）。这时，大家伙都很无语了，不知道为什么了！运维小伙伴又将纯文本页面扔到M项目中，启动访问，发现，也会慢呀，什么情况！同时，相同页面单独扔到tomcat中启动就正常，哎，见鬼了。似乎无下文了。\ni、这时M系统负责人突然说到，测试环境能重现慢的问题，（我似乎看到了一丝曙光），但本地启动没问题（这个。。。），，难道还是环境问题？我来到测试环境中进行测试，看着业务日志与gc日志，发现几乎每次慢的时候就会做一次gc回收，咦，内存有问题？（实际是因为测试环境内存小，512M堆大小），但我又发现线上gc正常啊，但一点蛛丝马迹都得一试，把线上1.5G堆调成了4G堆，不过，问题依旧啊，似乎还慢的更频繁的样子（还好是基于http访问有硬件负载均衡，正常业务跑不进来）。\nj、心有不甘，但想着能重现问题，应该就能定位到问题，于是我开始了代码分析之路，和其他小伙伴从两个方向并行去分析，都耗时一天半了，心想着，两个思路一起搞，兴许快点。既然测试环境能重现，好吧，我试试本地是不是真重现不了，我打开idea启动M，一顿尝试，好像真不可以呢。但我debug到了请求执行的环节，那，好吧，开启debug日志在测试环境看看，是哪个环节慢了？基于warn日志级别重启测试环境M，然后测试，发现，咦，真是的业务系统自己慢呢，已经收到请求了，在某个环节慢，而且，把页面扔到其他系统进行访问却没问题：\n```\n2019-07-05 19:05:38.955 DEBUG [http-nio-8004-exec-3] InternalNioInputBuffer:180-- Received [GET /creditCard/cardBinInfo.json HTTP/1.1\nHost: 192.168.46.3:8004\nConnection: keep-alive\nUpgrade-Insecure-Requests: 1\nUser-Agent: Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Mobile Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\nAccept-Encoding: gzip, deflate, sdch\nAccept-Language: zh-CN,zh;q=0.8\nCookie: _csrf=c25ca56a-799f-4e23-b179-b09abaf7fa0e; cavyboss-session=40c8e4d0-0d09-4952-8812-93a1f44b0068; mpay-session=0714ad72-0e83-43d9-8b87-b002c34a71f3\n\n]\n2019-07-05 19:05:38.956 DEBUG [http-nio-8004-exec-3] CoyoteAdapter:180-- The variable [uriBC] has value [/creditCard/cardBinInfo.json]\n2019-07-05 19:05:38.957 DEBUG [http-nio-8004-exec-3] CoyoteAdapter:180-- The variable [semicolon] has value [-1]\n2019-07-05 19:05:38.957 DEBUG [http-nio-8004-exec-3] CoyoteAdapter:180-- The variable [enc] has value [utf-8]\n2019-07-05 19:05:42.640 DEBUG [http-nio-8004-exec-3] LegacyCookieProcessor:180-- Cookies: Parsing b[]: _csrf=c25ca56a-799f-4e23-b179-b09abaf7fa0e; cavyboss-session=40c8e4d0-0d09-4952-8812-93a1f44b0068; mpay-session=0714ad72-0e83-43d9-8b87-b002c34a71f3\n2019-07-05 19:05:42.643 DEBUG [http-nio-8004-exec-3] CoyoteAdapter:180--  Requested cookie session id is 0714ad72-0e83-43d9-8b87-b002c34a71f3\n2019-07-05 19:05:42.645 DEBUG [http-nio-8004-exec-3] RemoteIpValve:180-- Incoming request /creditCard/cardBinInfo.json with originalRemoteAddr '192.168.47.152', originalRemoteHost='192.168.47.152', originalSecure='false', originalScheme='http' will be seen as newRemoteAddr='192.168.47.152', newRemoteHost='192.168.47.152', newScheme='http', newSecure='false'\n2019-07-05 19:05:42.645 DEBUG [http-nio-8004-exec-3] AuthenticatorBase:180-- Security checking request GET /creditCard/cardBinInfo.json\n2019-07-05 19:05:42.646 DEBUG [http-nio-8004-exec-3] RealmBase:180--   No applicable constraints defined\n2019-07-05 19:05:42.646 DEBUG [http-nio-8004-exec-3] AuthenticatorBase:180--  Not subject to any constraint\n2019-07-05 19:05:42.653 DEBUG [http-nio-8004-exec-3] OrderedRequestContextFilter:114-- Bound request context to thread: org.springframework.session.web.http.SessionRepositoryFilter$SessionRepositoryRequestWrapper@5edc7f61\n2019-07-05 19:05:42.654 DEBUG [http-nio-8004-exec-3] DispatcherServlet:863-- DispatcherServlet with name 'dispatcherServlet' processing GET request for [/creditCard/cardBinInfo.json]\n2019-07-05 19:05:42.655 DEBUG [http-nio-8004-exec-3] Parameters:180-- Set encoding to UTF-8\n2019-07-05 19:05:42.660 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:125-- Opening RedisConnection\n2019-07-05 19:05:42.663 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:205-- Closing Redis Connection\n2019-07-05 19:05:42.663 DEBUG [http-nio-8004-exec-3] EndpointHandlerMapping:301-- Looking up handler method for path /creditCard/cardBinInfo.json\n2019-07-05 19:05:42.671 DEBUG [http-nio-8004-exec-3] EndpointHandlerMapping:311-- Did not find handler method for [/creditCard/cardBinInfo.json]\n2019-07-05 19:05:42.671 DEBUG [http-nio-8004-exec-3] RequestMappingHandlerMapping:301-- Looking up handler method for path /creditCard/cardBinInfo.json\n2019-07-05 19:05:42.692 DEBUG [http-nio-8004-exec-3] RequestMappingHandlerMapping:308-- Returning handler method [public java.lang.Object com.yiji.mobilepay.web.controller.CreditCardWithdrawControler.cardBinInfo(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)]\n2019-07-05 19:05:42.692 DEBUG [http-nio-8004-exec-3] DefaultListableBeanFactory:251-- Returning cached instance of singleton bean 'creditCardWithdrawControler'\n2019-07-05 19:05:42.693 DEBUG [http-nio-8004-exec-3] DispatcherServlet:949-- Last-Modified value for [/creditCard/cardBinInfo.json] is: -1\n2019-07-05 19:05:42.704 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:125-- Opening RedisConnection\n2019-07-05 19:05:42.704 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:205-- Closing Redis Connection\n2019-07-05 19:05:42.831 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     findResources(META-INF/services/com.alibaba.fastjson.serializer.AutowiredObjectSerializer)\n2019-07-05 19:05:42.841 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:125-- Opening RedisConnection\n2019-07-05 19:05:42.842 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:205-- Closing Redis Connection\n2019-07-05 19:05:42.844 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:125-- Opening RedisConnection\n2019-07-05 19:05:42.844 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:205-- Closing Redis Connection\n2019-07-05 19:05:42.847 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:125-- Opening RedisConnection\n2019-07-05 19:05:42.848 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:205-- Closing Redis Connection\n2019-07-05 19:05:42.848 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:125-- Opening RedisConnection\n2019-07-05 19:05:42.849 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:205-- Closing Redis Connection\n2019-07-05 19:05:42.849 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:125-- Opening RedisConnection\n2019-07-05 19:05:42.849 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:205-- Closing Redis Connection\n2019-07-05 19:05:42.862 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     findClass(com.yjf.common.lang.result.ViewResultInfoBeanInfo)\n2019-07-05 19:05:42.862 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     --> Returning ClassNotFoundException\n2019-07-05 19:05:42.866 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     findClass(com.yjf.common.lang.result.ViewResultInfoCustomizer)\n2019-07-05 19:05:42.867 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     --> Returning ClassNotFoundException\n2019-07-05 19:05:42.869 DEBUG [dubbo-remoting-client-heartbeat-thread-1] HeartBeatTask:66--  [DUBBO] Send heartbeat to remote channel /192.168.46.3:20917, cause: The channel has no data-transmission exceeds a heartbeat period: 60000ms\n2019-07-05 19:05:42.870 DEBUG [New I/O client worker #1-3] HeartbeatHandler:82--  [DUBBO] Receive heartbeat response in thread New I/O client worker #1-3\n2019-07-05 19:05:42.874 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180-- getResource(Object.class)\n2019-07-05 19:05:42.874 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   Delegating to parent classloader org.springframework.boot.loader.LaunchedURLClassLoader@11a9e7c8\n2019-07-05 19:05:42.875 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     findResource(Object.class)\n2019-07-05 19:05:42.876 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     --> Resource not found, returning null\n2019-07-05 19:05:42.876 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   --> Resource not found, returning null\n2019-07-05 19:05:42.877 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180-- getResource(String.class)\n2019-07-05 19:05:42.878 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   Delegating to parent classloader org.springframework.boot.loader.LaunchedURLClassLoader@11a9e7c8\n2019-07-05 19:05:42.879 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     findResource(String.class)\n2019-07-05 19:05:42.879 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     --> Resource not found, returning null\n2019-07-05 19:05:42.880 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   --> Resource not found, returning null\n2019-07-05 19:05:42.881 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180-- getResource(StringBuilder.class)\n2019-07-05 19:05:42.882 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   Delegating to parent classloader org.springframework.boot.loader.LaunchedURLClassLoader@11a9e7c8\n2019-07-05 19:05:42.883 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     findResource(StringBuilder.class)\n2019-07-05 19:05:42.883 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     --> Resource not found, returning null\n2019-07-05 19:05:42.884 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   --> Resource not found, returning null\n2019-07-05 19:05:42.887 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180-- getResource(com.class)\n2019-07-05 19:05:42.887 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   Delegating to parent classloader org.springframework.boot.loader.LaunchedURLClassLoader@11a9e7c8\n2019-07-05 19:05:42.888 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     findResource(com.class)\n2019-07-05 19:05:42.889 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     --> Resource not found, returning null\n2019-07-05 19:05:42.889 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   --> Resource not found, returning null\n2019-07-05 19:05:42.890 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180-- getResource(java/lang/com.class)\n2019-07-05 19:05:42.891 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   Delegating to parent classloader org.springframework.boot.loader.LaunchedURLClassLoader@11a9e7c8\n2019-07-05 19:05:42.892 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     findResource(java/lang/com.class)\n2019-07-05 19:05:42.892 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     --> Resource not found, returning null\n2019-07-05 19:05:42.893 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   --> Resource not found, returning null\n2019-07-05 19:05:42.894 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180-- getResource(com/yjf.class)\n2019-07-05 19:05:42.894 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   Delegating to parent classloader org.springframework.boot.loader.LaunchedURLClassLoader@11a9e7c8\n2019-07-05 19:05:42.895 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     findResource(com/yjf.class)\n2019-07-05 19:05:42.896 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     --> Resource not found, returning null\n2019-07-05 19:05:42.896 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   --> Resource not found, returning null\n2019-07-05 19:05:42.897 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180-- getResource(com/yjf/common.class)\n2019-07-05 19:05:42.898 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   Delegating to parent classloader org.springframework.boot.loader.LaunchedURLClassLoader@11a9e7c8\n2019-07-05 19:05:42.899 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     findResource(com/yjf/common.class)\n2019-07-05 19:05:42.899 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     --> Resource not found, returning null\n2019-07-05 19:05:42.900 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   --> Resource not found, returning null\n2019-07-05 19:05:42.901 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180-- getResource(com/yjf/common/util.class)\n2019-07-05 19:05:42.901 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   Delegating to parent classloader org.springframework.boot.loader.LaunchedURLClassLoader@11a9e7c8\n2019-07-05 19:05:42.902 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     findResource(com/yjf/common/util.class)\n2019-07-05 19:05:42.903 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     --> Resource not found, returning null\n2019-07-05 19:05:42.903 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   --> Resource not found, returning null\n2019-07-05 19:05:42.908 DEBUG [http-nio-8004-exec-3] ToString:550-- classloader:TomcatEmbeddedWebappClassLoader\n  context: ROOT\n  delegate: true\n----------> Parent Classloader:\norg.springframework.boot.loader.LaunchedURLClassLoader@11a9e7c8\n\n2019-07-05 19:05:42.910 DEBUG [http-nio-8004-exec-3] RequestResponseBodyMethodProcessor:225-- Written [ViewResultInfo{code=null,data=null,message=请通过网页正常步骤进行访问或者系统已超时,success=false}] as \"application/json;charset=UTF-8\" using [com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter@3220bfbc]\n2019-07-05 19:05:42.911 DEBUG [http-nio-8004-exec-3] DispatcherServlet:1036-- Null ModelAndView returned to DispatcherServlet with name 'dispatcherServlet': assuming HandlerAdapter completed request handling\n2019-07-05 19:05:42.911 DEBUG [http-nio-8004-exec-3] DispatcherServlet:997-- Successfully completed request\n2019-07-05 19:05:42.911 DEBUG [http-nio-8004-exec-3] OrderedRequestContextFilter:104-- Cleared thread-bound request context: org.springframework.session.web.http.SessionRepositoryFilter$SessionRepositoryRequestWrapper@5edc7f61\n2019-07-05 19:05:42.912 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:125-- Opening RedisConnection\n2019-07-05 19:05:42.912 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:205-- Closing Redis Connection\n2019-07-05 19:05:42.912 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:125-- Opening RedisConnection\n2019-07-05 19:05:42.913 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:205-- Closing Redis Connection\n2019-07-05 19:05:42.913 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:125-- Opening RedisConnection\n2019-07-05 19:05:42.913 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:205-- Closing Redis Connection\n```\n但是，这个环节去干什么了呢？源代码日志很少，看不出来呀！难道是分布式session问题，发现springboot分布式session我们内部是用redis实现的，后经一顿排查，发现上面日志中已经包含了redis的操作，但是是在慢的那个环节之后呀（不过提了个醒，以后redis要是抽风，这也是个风险点呢）。\nk、现在知道问题就出在org.apache.catalina.connector.CoyoteAdapter这个类日志中显示的慢的那个环节了，但他究竟干了什么？貌似只是简单的一些操作啊，代码层次很深，今天也疲惫了，就没往深处看，为什么本地测试不出现问题？带着这些疑问，今天收班了。\nl、今天本来是周六，但问题没解决，心有不甘呀，而且都能重现问题了，要是不定位到，好可惜。于是背着包来到了公司，反正今日无安排！来到公司，经过昨晚和今早放松了大脑，又准备整装待发了。本地不出问题，难道是打包环节不一样？两个私服不一致?于是我把测试环境的jar包拷了下来，java XXX -jar启动，咦，本地重现问题了！真是私服问题，包版本不一致？我又把本地项目用另一个私服打了jar包java XXX -jar启动，咦，问题也重现了，哦！原来是idea启动时候和java -jar有些区别（也许是classpath加载的区别吧），此处没深究，但很庆幸，本地重现问题，离问题定位再进一步\nm、既然本地都重现问题了，虽然不能用idea断点测试，但我改改源码加加日志吧。ok！源码日志已加好，这下日志详细了吧，java XXX -jar启动，测试，啊！原来是这慢，还以为只是简单的map呢，被类名迷惑了：\n```\n2019-07-06 11:44:55.430 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- normaliztion start............................\n2019-07-06 11:44:55.430 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- normaliztion end............................\n2019-07-06 11:44:55.432 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- decodedURI start............................\n2019-07-06 11:44:55.432 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- decodedURI end............................\n2019-07-06 11:44:55.432 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- check normaliztion start............................\n2019-07-06 11:44:55.432 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- check normaliztion end............................\n2019-07-06 11:44:55.433 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- check getUseIPVHosts start............................{}false\n2019-07-06 11:44:55.433 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- check getUseIPVHosts end............................{}localhost\n2019-07-06 11:44:55.433 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- check mapreu start............................{}\n2019-07-06 11:45:00.570 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- check mapreu end............................{}\n2019-07-06 11:45:00.570 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- check session start1............................{}\n2019-07-06 11:45:00.570 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- check session start4............................{}\n2019-07-06 11:45:00.571 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- check session start5............................{}\n2019-07-06 11:45:00.571 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- check session start6............................{}\n2019-07-06 11:45:00.571 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- check session start7............................{}\n```\n源码\n```\n// This will map the the latest version by default\n            connector.getService().getMapper().map(serverName, decodedURI,\n                    version, request.getMappingData());\n```\n此时内心激动，问题似乎更清晰了，打开idea，断点调试，往里面跟，发现了一个gateway页面，咦，这是我们自定义的页面，全项目搜索一下，它干啥了！\n源码：\n```\n // Rule 1 -- Exact Match\n        MappedWrapper[] exactWrappers = contextVersion.exactWrappers;\n        internalMapExactWrapper(exactWrappers, path, mappingData);\n\n        // Rule 2 -- Prefix Match\n        boolean checkJspWelcomeFiles = false;\n        MappedWrapper[] wildcardWrappers = contextVersion.wildcardWrappers;\n        if (mappingData.wrapper == null) {\n            internalMapWildcardWrapper(wildcardWrappers, contextVersion.nesting,\n                                       path, mappingData);                                    \n```\n包含gateway的代码：\n```\n@Configuration\npublic class StargateConfigration {\n\t@Bean\n\tpublic ServletRegistrationBean dispatcherRegistration(StargateDispachServlet stargateDispachServlet) {\n\t    ServletRegistrationBean registration = new ServletRegistrationBean(\n\t    \t\tstargateDispachServlet);\n\t    registration.addUrlMappings(\"/gateway\");\n\t    return registration;\n\t}\n\n```\n咦，servlet，我顿时想起以前好像我们的spring-boot专门做了对jsp的支持，于是来到我们的tomcat-staters，\n```\n\n\t@Bean(name = \"yijiEmbeddedServletContainerCustomizer\")\n\tpublic EmbeddedServletContainerCustomizer embeddedServletContainerCustomizer() {\n\t\t\n\t\treturn container -> {\n\t\t\t//1. disable jsp if possible\n\t\t\tif (!tomcatProperties.getJsp().isEnable()) {\n\t\t\t\tJspServlet jspServlet = new JspServlet();\n\t\t\t\tjspServlet.setRegistered(false);\n\t\t\t\tcontainer.setJspServlet(jspServlet);\n\t\t\t}\n```\n难道是M系统启用了yiji.tomcat.jsp.enable=true？通过线上系统变量搜索，发现，确实，M启用了，其他系统没有，恍然大悟，这就是为什么M有问题而其他系统没问题的原因吧！于是我java -Dyiji.tomcat.jsp.enable=false -jar M，测试，果然，不慢了。。。问题终于定位到，spring-boot本身不推荐jsp，但提供了支持，这说明本身支持的方式就存在性能问题！\nn、嗯，接下来，下掉jsp吧，本来这就是遗留问题，传统项目采用jsp，切换springboot后强行支持了jsp，但却有性能问题！还有安全漏洞！\n\n下面说说spring-boot如何支持jsp吧。其实就是多注册一个JspServlet!\n1、添加依赖\n```\n<dependency>\n            <groupId>org.apache.tomcat.embed</groupId>\n            <artifactId>tomcat-embed-jasper</artifactId>\n            <scope>provided</scope>\n        </dependency>\n        <dependency>\n            <groupId>javax.servlet</groupId>\n            <artifactId>jstl</artifactId>\n        </dependency>\n```\n2、配置文件中指定jsp文件存放路径\n```\n#路径,在webapp文件夹下新建文件夹WEB-INF,在往下建文件夹jsp\nspring.mvc.view.prefix=/WEB-INF/jsp/\n#文件名的后缀,例如:index.jsp,放在jsp文件夹下\nspring.mvc.view.suffix=.jsp\n```\n![upload successful](\\images\\pasted-91.png)\n3、作为框架，我们默认不支持jsp，因为有性能损耗\n```\nif (!tomcatProperties.getJsp().isEnable()) {\n\t\t\t\tJspServlet jspServlet = new JspServlet();\n\t\t\t\tjspServlet.setRegistered(false);\n\t\t\t\tcontainer.setJspServlet(jspServlet);\n\t\t\t}\n```\n4、业务系统根据自身情况决定是否启动jsp支持，启用，意味着接受性能损耗！\n\n心得：\n  本地问题分析历史2天半（中途很多时间在处理其他事情），心理感受颇多，分析线上类似问题一定要思路清晰，类似问题，先网路再应用，另外一定要有主线，如果能本地重现问题，那可是天大的好事，源码跟踪，源码添加日志可有效帮我们分析问题，总之，分析跨系统、跨部门、框架级问题时，协作、心态很重要！","slug":"spring-boot1-3-5支持jsp导致浏览器访问应用偶尔慢","published":1,"updated":"2019-09-30T07:34:10.838Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3e5th8p006qp96653se88cc","content":"<p>本文将阐述在基于spring-boot1.3.5日常开发中所遇到的一个疑惑的问题，下面将按照问题处理的过程进行行文！！！</p>\n<p>一、项目简介：<br>    这儿有一个业务系统，我们称之为M，架构基于springboot1.3.5，同时提供了web能力，前后端分离。线上生产环境中，外部商户的【取现业务】会跳转到本系统的页面上进行操作，实际场景中更多的是手机端进行页面跳转，但也可以PC端网页版跳转，因为M是基于spring-mvc提供的能力（这是对项目的通用认知，但某些关键的细节点并没有包含在里面，以至于在后续问题分析中走了很多弯路，耗时2天半才定位到问题）。</p>\n<p>二、问题现象<br>    业务运行过程中，外部商户吐槽声来了，为什么跳转到你们的页面那么慢，耗时3-4s甚至更久，且频次比较高（后经运维部门同时查看，发现超过10%的请求出现慢的情况）。由于外部商户是移动端app，因此业务跳转耗时3-4s反馈到用户那儿便是点击确认操作后白板3-4s。这确实是一个糟糕的用户体验！另，据相关小伙伴反映，这是一个由来已久的问题，只是以前业务少，而且是自己的前端业务部门使用，有时忍忍就过去了。（这儿提到这一点，因为，如果能证实以前的慢和现在的慢问题一样，那么可以推导出并不是新的改动后其他操作带来的新问题，这对问题定位有指导性意义，但分析问题时总归是仓促的，这些信息极容易被丢掉）。</p>\n<p>三、业务描述<br>    为了阐述问题的分析过程，业务场景必须清晰，下面简介一下该业务场景：</p>\n<p><img src=\"\\images\\pasted-88.png\" alt=\"upload successful\"></p>\n<p>四、问题排查<br>    通过前面的描述，我们知道了业务场景、系统情况及问题现象，接下来，我们开始了问题排查的过程，这过程，是痛苦的！！！<br>a、首先，我们根据商户提供的流水号进行日志查询，发现商户请求的时间和我们底层系统M实际收到的时间确实相差了3-4s，于是，我们找到了入口系统Api，因为整个业务场景，是由Api进行的页面跳转，会不会是Api做了什么事，导致页面跳转慢了？<br>b、通过查询Api的日志，发现收到请求的时间确实和商户时间一致，我们似乎找到问题根源，即Api有问题，但当进一步排查时，发现Api和M的交互只是做了简单的302重定向，并无其他逻辑，且发现Api发起重定向的时间到M“接收”到请求便耗时了3-4s，于是，我们把矛头指向了网络问题，加之跳转过程是用的域名跳转，我们更深信这3-4s花在了网络上！<br>c、我们怀疑是否是网络问题，于是找到运维的小伙伴，一通排查，回复我们网络没问题，并给了我们ng日志<br><img src=\"\\images\\pasted-89.png\" alt=\"upload successful\"><br>d、这个回复让我们不甘心，因为我们的Api正常的发起了跳转请求，我们的M系统3-4s后才接收到请求，那这耗时一定是在网络上啊，并多次反复追问信息中心域名等相关网络问题，后来，我通过PC页面直接进行测试（因为我也是该产品的用户），当我一顿操作并点击确认按钮后，咦，很快呀，但，接下来我反复的重试、刷新、重试，果不其然偶尔出现了一笔3-4s的耗时，看来这真是偶尔出现呀（偶发问题，那这不应该是应用问题呀！），紧接着我使用谷歌浏览器看了请求情况，发现如下信息：<br><img src=\"\\images\\pasted-90.png\" alt=\"upload successful\">，咦，这耗时花在了TTFB上面呀，然后百度一查，TTFB包含了tcp握手时间及服务端返回第一个字节的时间。哦，那这不正说明了网络问题嘛！同时我发现处理页面偶尔慢，某些纯后台服务或者图片也慢呀，于是又找到了运维同事，这已经大半天过去了（虽然中间处理问题断断续续）<br>e、这时，运维同事按照我们的方式测试，也确实出现了偶尔慢，他们抓包分析，发现当前网络正常呀，但有一个现象，慢的请求有三次重复ACK的现象，这是什么鬼？运维同事说这是正常的，TCP包乱序会重复发起ACK嘛，我将信将疑，但问题没说通啊，为什么慢，一小时过去了。这时更多的同事加入到问题分析，运维小伙伴为证明不是网络问题，在线上服务器直接ip访问页面，发现，也会出现慢，于是，我们也选择相信了网络没问题，但问题是什么？<br>f、这时我们测试过程中，又发现了某些图片资源404，某些图片资源即使存在但偶尔会慢，咦，是不是因为页面访问了资源而资源慢导致页面慢？这时其实问题的分析稍有偏差了，因为前面d的时候已经出现过类似问题，但没有包含资源的纯后台功能也慢啊！但花了近一天的分析，实在是太困惑，于是我们朝着这个方向去了。<br>g、我们把页面扣了出来，并扔到了ng上，既然图片资源慢，我们改动页面，以至于后面仅仅是一个纯文本页面了，确实，访问不慢了（但前面说了，这已经偏离了，因为页面位于ng中，而不是项目中，但这也是分析的必经之地，因为这儿确实也存在问题），我们尝试加上css、js资源，慢又出现了，并且发现都是图标慢，但，这不应该呀，CDN上静态资源应该很快呀，但后面我们发现这些慢的图片并不位于CDN，而是在项目M中，同时也存在访问了CDN上不存在且并不需要依赖的资源。我们把图片映射做了一下ng映射（前面说的这是在ng上的页面），再次访问，正常了。于是结论出来了，至少，前端开发中，动静分离不合规，同时copy代码，无用的资源访问也出现了。这是今天耗时一天的分析结论。但。<br>h、第二天，上班后，按照昨日的分析，前端进行了标准化的优化，上线，但问题依旧（毕竟前面图片这个问题是问题，但不是这次问题的根本问题）。这时，大家伙都很无语了，不知道为什么了！运维小伙伴又将纯文本页面扔到M项目中，启动访问，发现，也会慢呀，什么情况！同时，相同页面单独扔到tomcat中启动就正常，哎，见鬼了。似乎无下文了。<br>i、这时M系统负责人突然说到，测试环境能重现慢的问题，（我似乎看到了一丝曙光），但本地启动没问题（这个。。。），，难道还是环境问题？我来到测试环境中进行测试，看着业务日志与gc日志，发现几乎每次慢的时候就会做一次gc回收，咦，内存有问题？（实际是因为测试环境内存小，512M堆大小），但我又发现线上gc正常啊，但一点蛛丝马迹都得一试，把线上1.5G堆调成了4G堆，不过，问题依旧啊，似乎还慢的更频繁的样子（还好是基于http访问有硬件负载均衡，正常业务跑不进来）。<br>j、心有不甘，但想着能重现问题，应该就能定位到问题，于是我开始了代码分析之路，和其他小伙伴从两个方向并行去分析，都耗时一天半了，心想着，两个思路一起搞，兴许快点。既然测试环境能重现，好吧，我试试本地是不是真重现不了，我打开idea启动M，一顿尝试，好像真不可以呢。但我debug到了请求执行的环节，那，好吧，开启debug日志在测试环境看看，是哪个环节慢了？基于warn日志级别重启测试环境M，然后测试，发现，咦，真是的业务系统自己慢呢，已经收到请求了，在某个环节慢，而且，把页面扔到其他系统进行访问却没问题：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2019-07-05 19:05:38.955 DEBUG [http-nio-8004-exec-3] InternalNioInputBuffer:180-- Received [GET /creditCard/cardBinInfo.json HTTP/1.1</span><br><span class=\"line\">Host: 192.168.46.3:8004</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">Upgrade-Insecure-Requests: 1</span><br><span class=\"line\">User-Agent: Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Mobile Safari/537.36</span><br><span class=\"line\">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class=\"line\">Accept-Encoding: gzip, deflate, sdch</span><br><span class=\"line\">Accept-Language: zh-CN,zh;q=0.8</span><br><span class=\"line\">Cookie: _csrf=c25ca56a-799f-4e23-b179-b09abaf7fa0e; cavyboss-session=40c8e4d0-0d09-4952-8812-93a1f44b0068; mpay-session=0714ad72-0e83-43d9-8b87-b002c34a71f3</span><br><span class=\"line\"></span><br><span class=\"line\">]</span><br><span class=\"line\">2019-07-05 19:05:38.956 DEBUG [http-nio-8004-exec-3] CoyoteAdapter:180-- The variable [uriBC] has value [/creditCard/cardBinInfo.json]</span><br><span class=\"line\">2019-07-05 19:05:38.957 DEBUG [http-nio-8004-exec-3] CoyoteAdapter:180-- The variable [semicolon] has value [-1]</span><br><span class=\"line\">2019-07-05 19:05:38.957 DEBUG [http-nio-8004-exec-3] CoyoteAdapter:180-- The variable [enc] has value [utf-8]</span><br><span class=\"line\">2019-07-05 19:05:42.640 DEBUG [http-nio-8004-exec-3] LegacyCookieProcessor:180-- Cookies: Parsing b[]: _csrf=c25ca56a-799f-4e23-b179-b09abaf7fa0e; cavyboss-session=40c8e4d0-0d09-4952-8812-93a1f44b0068; mpay-session=0714ad72-0e83-43d9-8b87-b002c34a71f3</span><br><span class=\"line\">2019-07-05 19:05:42.643 DEBUG [http-nio-8004-exec-3] CoyoteAdapter:180--  Requested cookie session id is 0714ad72-0e83-43d9-8b87-b002c34a71f3</span><br><span class=\"line\">2019-07-05 19:05:42.645 DEBUG [http-nio-8004-exec-3] RemoteIpValve:180-- Incoming request /creditCard/cardBinInfo.json with originalRemoteAddr &apos;192.168.47.152&apos;, originalRemoteHost=&apos;192.168.47.152&apos;, originalSecure=&apos;false&apos;, originalScheme=&apos;http&apos; will be seen as newRemoteAddr=&apos;192.168.47.152&apos;, newRemoteHost=&apos;192.168.47.152&apos;, newScheme=&apos;http&apos;, newSecure=&apos;false&apos;</span><br><span class=\"line\">2019-07-05 19:05:42.645 DEBUG [http-nio-8004-exec-3] AuthenticatorBase:180-- Security checking request GET /creditCard/cardBinInfo.json</span><br><span class=\"line\">2019-07-05 19:05:42.646 DEBUG [http-nio-8004-exec-3] RealmBase:180--   No applicable constraints defined</span><br><span class=\"line\">2019-07-05 19:05:42.646 DEBUG [http-nio-8004-exec-3] AuthenticatorBase:180--  Not subject to any constraint</span><br><span class=\"line\">2019-07-05 19:05:42.653 DEBUG [http-nio-8004-exec-3] OrderedRequestContextFilter:114-- Bound request context to thread: org.springframework.session.web.http.SessionRepositoryFilter$SessionRepositoryRequestWrapper@5edc7f61</span><br><span class=\"line\">2019-07-05 19:05:42.654 DEBUG [http-nio-8004-exec-3] DispatcherServlet:863-- DispatcherServlet with name &apos;dispatcherServlet&apos; processing GET request for [/creditCard/cardBinInfo.json]</span><br><span class=\"line\">2019-07-05 19:05:42.655 DEBUG [http-nio-8004-exec-3] Parameters:180-- Set encoding to UTF-8</span><br><span class=\"line\">2019-07-05 19:05:42.660 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:125-- Opening RedisConnection</span><br><span class=\"line\">2019-07-05 19:05:42.663 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:205-- Closing Redis Connection</span><br><span class=\"line\">2019-07-05 19:05:42.663 DEBUG [http-nio-8004-exec-3] EndpointHandlerMapping:301-- Looking up handler method for path /creditCard/cardBinInfo.json</span><br><span class=\"line\">2019-07-05 19:05:42.671 DEBUG [http-nio-8004-exec-3] EndpointHandlerMapping:311-- Did not find handler method for [/creditCard/cardBinInfo.json]</span><br><span class=\"line\">2019-07-05 19:05:42.671 DEBUG [http-nio-8004-exec-3] RequestMappingHandlerMapping:301-- Looking up handler method for path /creditCard/cardBinInfo.json</span><br><span class=\"line\">2019-07-05 19:05:42.692 DEBUG [http-nio-8004-exec-3] RequestMappingHandlerMapping:308-- Returning handler method [public java.lang.Object com.yiji.mobilepay.web.controller.CreditCardWithdrawControler.cardBinInfo(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)]</span><br><span class=\"line\">2019-07-05 19:05:42.692 DEBUG [http-nio-8004-exec-3] DefaultListableBeanFactory:251-- Returning cached instance of singleton bean &apos;creditCardWithdrawControler&apos;</span><br><span class=\"line\">2019-07-05 19:05:42.693 DEBUG [http-nio-8004-exec-3] DispatcherServlet:949-- Last-Modified value for [/creditCard/cardBinInfo.json] is: -1</span><br><span class=\"line\">2019-07-05 19:05:42.704 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:125-- Opening RedisConnection</span><br><span class=\"line\">2019-07-05 19:05:42.704 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:205-- Closing Redis Connection</span><br><span class=\"line\">2019-07-05 19:05:42.831 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     findResources(META-INF/services/com.alibaba.fastjson.serializer.AutowiredObjectSerializer)</span><br><span class=\"line\">2019-07-05 19:05:42.841 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:125-- Opening RedisConnection</span><br><span class=\"line\">2019-07-05 19:05:42.842 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:205-- Closing Redis Connection</span><br><span class=\"line\">2019-07-05 19:05:42.844 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:125-- Opening RedisConnection</span><br><span class=\"line\">2019-07-05 19:05:42.844 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:205-- Closing Redis Connection</span><br><span class=\"line\">2019-07-05 19:05:42.847 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:125-- Opening RedisConnection</span><br><span class=\"line\">2019-07-05 19:05:42.848 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:205-- Closing Redis Connection</span><br><span class=\"line\">2019-07-05 19:05:42.848 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:125-- Opening RedisConnection</span><br><span class=\"line\">2019-07-05 19:05:42.849 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:205-- Closing Redis Connection</span><br><span class=\"line\">2019-07-05 19:05:42.849 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:125-- Opening RedisConnection</span><br><span class=\"line\">2019-07-05 19:05:42.849 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:205-- Closing Redis Connection</span><br><span class=\"line\">2019-07-05 19:05:42.862 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     findClass(com.yjf.common.lang.result.ViewResultInfoBeanInfo)</span><br><span class=\"line\">2019-07-05 19:05:42.862 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     --&gt; Returning ClassNotFoundException</span><br><span class=\"line\">2019-07-05 19:05:42.866 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     findClass(com.yjf.common.lang.result.ViewResultInfoCustomizer)</span><br><span class=\"line\">2019-07-05 19:05:42.867 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     --&gt; Returning ClassNotFoundException</span><br><span class=\"line\">2019-07-05 19:05:42.869 DEBUG [dubbo-remoting-client-heartbeat-thread-1] HeartBeatTask:66--  [DUBBO] Send heartbeat to remote channel /192.168.46.3:20917, cause: The channel has no data-transmission exceeds a heartbeat period: 60000ms</span><br><span class=\"line\">2019-07-05 19:05:42.870 DEBUG [New I/O client worker #1-3] HeartbeatHandler:82--  [DUBBO] Receive heartbeat response in thread New I/O client worker #1-3</span><br><span class=\"line\">2019-07-05 19:05:42.874 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180-- getResource(Object.class)</span><br><span class=\"line\">2019-07-05 19:05:42.874 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   Delegating to parent classloader org.springframework.boot.loader.LaunchedURLClassLoader@11a9e7c8</span><br><span class=\"line\">2019-07-05 19:05:42.875 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     findResource(Object.class)</span><br><span class=\"line\">2019-07-05 19:05:42.876 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     --&gt; Resource not found, returning null</span><br><span class=\"line\">2019-07-05 19:05:42.876 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   --&gt; Resource not found, returning null</span><br><span class=\"line\">2019-07-05 19:05:42.877 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180-- getResource(String.class)</span><br><span class=\"line\">2019-07-05 19:05:42.878 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   Delegating to parent classloader org.springframework.boot.loader.LaunchedURLClassLoader@11a9e7c8</span><br><span class=\"line\">2019-07-05 19:05:42.879 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     findResource(String.class)</span><br><span class=\"line\">2019-07-05 19:05:42.879 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     --&gt; Resource not found, returning null</span><br><span class=\"line\">2019-07-05 19:05:42.880 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   --&gt; Resource not found, returning null</span><br><span class=\"line\">2019-07-05 19:05:42.881 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180-- getResource(StringBuilder.class)</span><br><span class=\"line\">2019-07-05 19:05:42.882 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   Delegating to parent classloader org.springframework.boot.loader.LaunchedURLClassLoader@11a9e7c8</span><br><span class=\"line\">2019-07-05 19:05:42.883 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     findResource(StringBuilder.class)</span><br><span class=\"line\">2019-07-05 19:05:42.883 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     --&gt; Resource not found, returning null</span><br><span class=\"line\">2019-07-05 19:05:42.884 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   --&gt; Resource not found, returning null</span><br><span class=\"line\">2019-07-05 19:05:42.887 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180-- getResource(com.class)</span><br><span class=\"line\">2019-07-05 19:05:42.887 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   Delegating to parent classloader org.springframework.boot.loader.LaunchedURLClassLoader@11a9e7c8</span><br><span class=\"line\">2019-07-05 19:05:42.888 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     findResource(com.class)</span><br><span class=\"line\">2019-07-05 19:05:42.889 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     --&gt; Resource not found, returning null</span><br><span class=\"line\">2019-07-05 19:05:42.889 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   --&gt; Resource not found, returning null</span><br><span class=\"line\">2019-07-05 19:05:42.890 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180-- getResource(java/lang/com.class)</span><br><span class=\"line\">2019-07-05 19:05:42.891 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   Delegating to parent classloader org.springframework.boot.loader.LaunchedURLClassLoader@11a9e7c8</span><br><span class=\"line\">2019-07-05 19:05:42.892 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     findResource(java/lang/com.class)</span><br><span class=\"line\">2019-07-05 19:05:42.892 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     --&gt; Resource not found, returning null</span><br><span class=\"line\">2019-07-05 19:05:42.893 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   --&gt; Resource not found, returning null</span><br><span class=\"line\">2019-07-05 19:05:42.894 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180-- getResource(com/yjf.class)</span><br><span class=\"line\">2019-07-05 19:05:42.894 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   Delegating to parent classloader org.springframework.boot.loader.LaunchedURLClassLoader@11a9e7c8</span><br><span class=\"line\">2019-07-05 19:05:42.895 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     findResource(com/yjf.class)</span><br><span class=\"line\">2019-07-05 19:05:42.896 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     --&gt; Resource not found, returning null</span><br><span class=\"line\">2019-07-05 19:05:42.896 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   --&gt; Resource not found, returning null</span><br><span class=\"line\">2019-07-05 19:05:42.897 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180-- getResource(com/yjf/common.class)</span><br><span class=\"line\">2019-07-05 19:05:42.898 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   Delegating to parent classloader org.springframework.boot.loader.LaunchedURLClassLoader@11a9e7c8</span><br><span class=\"line\">2019-07-05 19:05:42.899 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     findResource(com/yjf/common.class)</span><br><span class=\"line\">2019-07-05 19:05:42.899 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     --&gt; Resource not found, returning null</span><br><span class=\"line\">2019-07-05 19:05:42.900 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   --&gt; Resource not found, returning null</span><br><span class=\"line\">2019-07-05 19:05:42.901 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180-- getResource(com/yjf/common/util.class)</span><br><span class=\"line\">2019-07-05 19:05:42.901 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   Delegating to parent classloader org.springframework.boot.loader.LaunchedURLClassLoader@11a9e7c8</span><br><span class=\"line\">2019-07-05 19:05:42.902 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     findResource(com/yjf/common/util.class)</span><br><span class=\"line\">2019-07-05 19:05:42.903 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     --&gt; Resource not found, returning null</span><br><span class=\"line\">2019-07-05 19:05:42.903 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   --&gt; Resource not found, returning null</span><br><span class=\"line\">2019-07-05 19:05:42.908 DEBUG [http-nio-8004-exec-3] ToString:550-- classloader:TomcatEmbeddedWebappClassLoader</span><br><span class=\"line\">  context: ROOT</span><br><span class=\"line\">  delegate: true</span><br><span class=\"line\">----------&gt; Parent Classloader:</span><br><span class=\"line\">org.springframework.boot.loader.LaunchedURLClassLoader@11a9e7c8</span><br><span class=\"line\"></span><br><span class=\"line\">2019-07-05 19:05:42.910 DEBUG [http-nio-8004-exec-3] RequestResponseBodyMethodProcessor:225-- Written [ViewResultInfo&#123;code=null,data=null,message=请通过网页正常步骤进行访问或者系统已超时,success=false&#125;] as &quot;application/json;charset=UTF-8&quot; using [com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter@3220bfbc]</span><br><span class=\"line\">2019-07-05 19:05:42.911 DEBUG [http-nio-8004-exec-3] DispatcherServlet:1036-- Null ModelAndView returned to DispatcherServlet with name &apos;dispatcherServlet&apos;: assuming HandlerAdapter completed request handling</span><br><span class=\"line\">2019-07-05 19:05:42.911 DEBUG [http-nio-8004-exec-3] DispatcherServlet:997-- Successfully completed request</span><br><span class=\"line\">2019-07-05 19:05:42.911 DEBUG [http-nio-8004-exec-3] OrderedRequestContextFilter:104-- Cleared thread-bound request context: org.springframework.session.web.http.SessionRepositoryFilter$SessionRepositoryRequestWrapper@5edc7f61</span><br><span class=\"line\">2019-07-05 19:05:42.912 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:125-- Opening RedisConnection</span><br><span class=\"line\">2019-07-05 19:05:42.912 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:205-- Closing Redis Connection</span><br><span class=\"line\">2019-07-05 19:05:42.912 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:125-- Opening RedisConnection</span><br><span class=\"line\">2019-07-05 19:05:42.913 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:205-- Closing Redis Connection</span><br><span class=\"line\">2019-07-05 19:05:42.913 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:125-- Opening RedisConnection</span><br><span class=\"line\">2019-07-05 19:05:42.913 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:205-- Closing Redis Connection</span><br></pre></td></tr></table></figure></p>\n<p>但是，这个环节去干什么了呢？源代码日志很少，看不出来呀！难道是分布式session问题，发现springboot分布式session我们内部是用redis实现的，后经一顿排查，发现上面日志中已经包含了redis的操作，但是是在慢的那个环节之后呀（不过提了个醒，以后redis要是抽风，这也是个风险点呢）。<br>k、现在知道问题就出在org.apache.catalina.connector.CoyoteAdapter这个类日志中显示的慢的那个环节了，但他究竟干了什么？貌似只是简单的一些操作啊，代码层次很深，今天也疲惫了，就没往深处看，为什么本地测试不出现问题？带着这些疑问，今天收班了。<br>l、今天本来是周六，但问题没解决，心有不甘呀，而且都能重现问题了，要是不定位到，好可惜。于是背着包来到了公司，反正今日无安排！来到公司，经过昨晚和今早放松了大脑，又准备整装待发了。本地不出问题，难道是打包环节不一样？两个私服不一致?于是我把测试环境的jar包拷了下来，java XXX -jar启动，咦，本地重现问题了！真是私服问题，包版本不一致？我又把本地项目用另一个私服打了jar包java XXX -jar启动，咦，问题也重现了，哦！原来是idea启动时候和java -jar有些区别（也许是classpath加载的区别吧），此处没深究，但很庆幸，本地重现问题，离问题定位再进一步<br>m、既然本地都重现问题了，虽然不能用idea断点测试，但我改改源码加加日志吧。ok！源码日志已加好，这下日志详细了吧，java XXX -jar启动，测试，啊！原来是这慢，还以为只是简单的map呢，被类名迷惑了：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2019-07-06 11:44:55.430 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- normaliztion start............................</span><br><span class=\"line\">2019-07-06 11:44:55.430 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- normaliztion end............................</span><br><span class=\"line\">2019-07-06 11:44:55.432 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- decodedURI start............................</span><br><span class=\"line\">2019-07-06 11:44:55.432 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- decodedURI end............................</span><br><span class=\"line\">2019-07-06 11:44:55.432 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- check normaliztion start............................</span><br><span class=\"line\">2019-07-06 11:44:55.432 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- check normaliztion end............................</span><br><span class=\"line\">2019-07-06 11:44:55.433 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- check getUseIPVHosts start............................&#123;&#125;false</span><br><span class=\"line\">2019-07-06 11:44:55.433 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- check getUseIPVHosts end............................&#123;&#125;localhost</span><br><span class=\"line\">2019-07-06 11:44:55.433 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- check mapreu start............................&#123;&#125;</span><br><span class=\"line\">2019-07-06 11:45:00.570 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- check mapreu end............................&#123;&#125;</span><br><span class=\"line\">2019-07-06 11:45:00.570 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- check session start1............................&#123;&#125;</span><br><span class=\"line\">2019-07-06 11:45:00.570 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- check session start4............................&#123;&#125;</span><br><span class=\"line\">2019-07-06 11:45:00.571 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- check session start5............................&#123;&#125;</span><br><span class=\"line\">2019-07-06 11:45:00.571 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- check session start6............................&#123;&#125;</span><br><span class=\"line\">2019-07-06 11:45:00.571 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- check session start7............................&#123;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>源码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// This will map the the latest version by default</span><br><span class=\"line\">            connector.getService().getMapper().map(serverName, decodedURI,</span><br><span class=\"line\">                    version, request.getMappingData());</span><br></pre></td></tr></table></figure></p>\n<p>此时内心激动，问题似乎更清晰了，打开idea，断点调试，往里面跟，发现了一个gateway页面，咦，这是我们自定义的页面，全项目搜索一下，它干啥了！<br>源码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Rule 1 -- Exact Match</span><br><span class=\"line\">       MappedWrapper[] exactWrappers = contextVersion.exactWrappers;</span><br><span class=\"line\">       internalMapExactWrapper(exactWrappers, path, mappingData);</span><br><span class=\"line\"></span><br><span class=\"line\">       // Rule 2 -- Prefix Match</span><br><span class=\"line\">       boolean checkJspWelcomeFiles = false;</span><br><span class=\"line\">       MappedWrapper[] wildcardWrappers = contextVersion.wildcardWrappers;</span><br><span class=\"line\">       if (mappingData.wrapper == null) &#123;</span><br><span class=\"line\">           internalMapWildcardWrapper(wildcardWrappers, contextVersion.nesting,</span><br><span class=\"line\">                                      path, mappingData);</span><br></pre></td></tr></table></figure></p>\n<p>包含gateway的代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">public class StargateConfigration &#123;</span><br><span class=\"line\">\t@Bean</span><br><span class=\"line\">\tpublic ServletRegistrationBean dispatcherRegistration(StargateDispachServlet stargateDispachServlet) &#123;</span><br><span class=\"line\">\t    ServletRegistrationBean registration = new ServletRegistrationBean(</span><br><span class=\"line\">\t    \t\tstargateDispachServlet);</span><br><span class=\"line\">\t    registration.addUrlMappings(&quot;/gateway&quot;);</span><br><span class=\"line\">\t    return registration;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure></p>\n<p>咦，servlet，我顿时想起以前好像我们的spring-boot专门做了对jsp的支持，于是来到我们的tomcat-staters，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">@Bean(name = &quot;yijiEmbeddedServletContainerCustomizer&quot;)</span><br><span class=\"line\">public EmbeddedServletContainerCustomizer embeddedServletContainerCustomizer() &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\treturn container -&gt; &#123;</span><br><span class=\"line\">\t\t//1. disable jsp if possible</span><br><span class=\"line\">\t\tif (!tomcatProperties.getJsp().isEnable()) &#123;</span><br><span class=\"line\">\t\t\tJspServlet jspServlet = new JspServlet();</span><br><span class=\"line\">\t\t\tjspServlet.setRegistered(false);</span><br><span class=\"line\">\t\t\tcontainer.setJspServlet(jspServlet);</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure></p>\n<p>难道是M系统启用了yiji.tomcat.jsp.enable=true？通过线上系统变量搜索，发现，确实，M启用了，其他系统没有，恍然大悟，这就是为什么M有问题而其他系统没问题的原因吧！于是我java -Dyiji.tomcat.jsp.enable=false -jar M，测试，果然，不慢了。。。问题终于定位到，spring-boot本身不推荐jsp，但提供了支持，这说明本身支持的方式就存在性能问题！<br>n、嗯，接下来，下掉jsp吧，本来这就是遗留问题，传统项目采用jsp，切换springboot后强行支持了jsp，但却有性能问题！还有安全漏洞！</p>\n<p>下面说说spring-boot如何支持jsp吧。其实就是多注册一个JspServlet!<br>1、添加依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;jstl&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>2、配置文件中指定jsp文件存放路径<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#路径,在webapp文件夹下新建文件夹WEB-INF,在往下建文件夹jsp</span><br><span class=\"line\">spring.mvc.view.prefix=/WEB-INF/jsp/</span><br><span class=\"line\">#文件名的后缀,例如:index.jsp,放在jsp文件夹下</span><br><span class=\"line\">spring.mvc.view.suffix=.jsp</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"\\images\\pasted-91.png\" alt=\"upload successful\"><br>3、作为框架，我们默认不支持jsp，因为有性能损耗<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (!tomcatProperties.getJsp().isEnable()) &#123;</span><br><span class=\"line\">\t\t\t\tJspServlet jspServlet = new JspServlet();</span><br><span class=\"line\">\t\t\t\tjspServlet.setRegistered(false);</span><br><span class=\"line\">\t\t\t\tcontainer.setJspServlet(jspServlet);</span><br><span class=\"line\">\t\t\t&#125;</span><br></pre></td></tr></table></figure></p>\n<p>4、业务系统根据自身情况决定是否启动jsp支持，启用，意味着接受性能损耗！</p>\n<p>心得：<br>  本地问题分析历史2天半（中途很多时间在处理其他事情），心理感受颇多，分析线上类似问题一定要思路清晰，类似问题，先网路再应用，另外一定要有主线，如果能本地重现问题，那可是天大的好事，源码跟踪，源码添加日志可有效帮我们分析问题，总之，分析跨系统、跨部门、框架级问题时，协作、心态很重要！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文将阐述在基于spring-boot1.3.5日常开发中所遇到的一个疑惑的问题，下面将按照问题处理的过程进行行文！！！</p>\n<p>一、项目简介：<br>    这儿有一个业务系统，我们称之为M，架构基于springboot1.3.5，同时提供了web能力，前后端分离。线上生产环境中，外部商户的【取现业务】会跳转到本系统的页面上进行操作，实际场景中更多的是手机端进行页面跳转，但也可以PC端网页版跳转，因为M是基于spring-mvc提供的能力（这是对项目的通用认知，但某些关键的细节点并没有包含在里面，以至于在后续问题分析中走了很多弯路，耗时2天半才定位到问题）。</p>\n<p>二、问题现象<br>    业务运行过程中，外部商户吐槽声来了，为什么跳转到你们的页面那么慢，耗时3-4s甚至更久，且频次比较高（后经运维部门同时查看，发现超过10%的请求出现慢的情况）。由于外部商户是移动端app，因此业务跳转耗时3-4s反馈到用户那儿便是点击确认操作后白板3-4s。这确实是一个糟糕的用户体验！另，据相关小伙伴反映，这是一个由来已久的问题，只是以前业务少，而且是自己的前端业务部门使用，有时忍忍就过去了。（这儿提到这一点，因为，如果能证实以前的慢和现在的慢问题一样，那么可以推导出并不是新的改动后其他操作带来的新问题，这对问题定位有指导性意义，但分析问题时总归是仓促的，这些信息极容易被丢掉）。</p>\n<p>三、业务描述<br>    为了阐述问题的分析过程，业务场景必须清晰，下面简介一下该业务场景：</p>\n<p><img src=\"\\images\\pasted-88.png\" alt=\"upload successful\"></p>\n<p>四、问题排查<br>    通过前面的描述，我们知道了业务场景、系统情况及问题现象，接下来，我们开始了问题排查的过程，这过程，是痛苦的！！！<br>a、首先，我们根据商户提供的流水号进行日志查询，发现商户请求的时间和我们底层系统M实际收到的时间确实相差了3-4s，于是，我们找到了入口系统Api，因为整个业务场景，是由Api进行的页面跳转，会不会是Api做了什么事，导致页面跳转慢了？<br>b、通过查询Api的日志，发现收到请求的时间确实和商户时间一致，我们似乎找到问题根源，即Api有问题，但当进一步排查时，发现Api和M的交互只是做了简单的302重定向，并无其他逻辑，且发现Api发起重定向的时间到M“接收”到请求便耗时了3-4s，于是，我们把矛头指向了网络问题，加之跳转过程是用的域名跳转，我们更深信这3-4s花在了网络上！<br>c、我们怀疑是否是网络问题，于是找到运维的小伙伴，一通排查，回复我们网络没问题，并给了我们ng日志<br><img src=\"\\images\\pasted-89.png\" alt=\"upload successful\"><br>d、这个回复让我们不甘心，因为我们的Api正常的发起了跳转请求，我们的M系统3-4s后才接收到请求，那这耗时一定是在网络上啊，并多次反复追问信息中心域名等相关网络问题，后来，我通过PC页面直接进行测试（因为我也是该产品的用户），当我一顿操作并点击确认按钮后，咦，很快呀，但，接下来我反复的重试、刷新、重试，果不其然偶尔出现了一笔3-4s的耗时，看来这真是偶尔出现呀（偶发问题，那这不应该是应用问题呀！），紧接着我使用谷歌浏览器看了请求情况，发现如下信息：<br><img src=\"\\images\\pasted-90.png\" alt=\"upload successful\">，咦，这耗时花在了TTFB上面呀，然后百度一查，TTFB包含了tcp握手时间及服务端返回第一个字节的时间。哦，那这不正说明了网络问题嘛！同时我发现处理页面偶尔慢，某些纯后台服务或者图片也慢呀，于是又找到了运维同事，这已经大半天过去了（虽然中间处理问题断断续续）<br>e、这时，运维同事按照我们的方式测试，也确实出现了偶尔慢，他们抓包分析，发现当前网络正常呀，但有一个现象，慢的请求有三次重复ACK的现象，这是什么鬼？运维同事说这是正常的，TCP包乱序会重复发起ACK嘛，我将信将疑，但问题没说通啊，为什么慢，一小时过去了。这时更多的同事加入到问题分析，运维小伙伴为证明不是网络问题，在线上服务器直接ip访问页面，发现，也会出现慢，于是，我们也选择相信了网络没问题，但问题是什么？<br>f、这时我们测试过程中，又发现了某些图片资源404，某些图片资源即使存在但偶尔会慢，咦，是不是因为页面访问了资源而资源慢导致页面慢？这时其实问题的分析稍有偏差了，因为前面d的时候已经出现过类似问题，但没有包含资源的纯后台功能也慢啊！但花了近一天的分析，实在是太困惑，于是我们朝着这个方向去了。<br>g、我们把页面扣了出来，并扔到了ng上，既然图片资源慢，我们改动页面，以至于后面仅仅是一个纯文本页面了，确实，访问不慢了（但前面说了，这已经偏离了，因为页面位于ng中，而不是项目中，但这也是分析的必经之地，因为这儿确实也存在问题），我们尝试加上css、js资源，慢又出现了，并且发现都是图标慢，但，这不应该呀，CDN上静态资源应该很快呀，但后面我们发现这些慢的图片并不位于CDN，而是在项目M中，同时也存在访问了CDN上不存在且并不需要依赖的资源。我们把图片映射做了一下ng映射（前面说的这是在ng上的页面），再次访问，正常了。于是结论出来了，至少，前端开发中，动静分离不合规，同时copy代码，无用的资源访问也出现了。这是今天耗时一天的分析结论。但。<br>h、第二天，上班后，按照昨日的分析，前端进行了标准化的优化，上线，但问题依旧（毕竟前面图片这个问题是问题，但不是这次问题的根本问题）。这时，大家伙都很无语了，不知道为什么了！运维小伙伴又将纯文本页面扔到M项目中，启动访问，发现，也会慢呀，什么情况！同时，相同页面单独扔到tomcat中启动就正常，哎，见鬼了。似乎无下文了。<br>i、这时M系统负责人突然说到，测试环境能重现慢的问题，（我似乎看到了一丝曙光），但本地启动没问题（这个。。。），，难道还是环境问题？我来到测试环境中进行测试，看着业务日志与gc日志，发现几乎每次慢的时候就会做一次gc回收，咦，内存有问题？（实际是因为测试环境内存小，512M堆大小），但我又发现线上gc正常啊，但一点蛛丝马迹都得一试，把线上1.5G堆调成了4G堆，不过，问题依旧啊，似乎还慢的更频繁的样子（还好是基于http访问有硬件负载均衡，正常业务跑不进来）。<br>j、心有不甘，但想着能重现问题，应该就能定位到问题，于是我开始了代码分析之路，和其他小伙伴从两个方向并行去分析，都耗时一天半了，心想着，两个思路一起搞，兴许快点。既然测试环境能重现，好吧，我试试本地是不是真重现不了，我打开idea启动M，一顿尝试，好像真不可以呢。但我debug到了请求执行的环节，那，好吧，开启debug日志在测试环境看看，是哪个环节慢了？基于warn日志级别重启测试环境M，然后测试，发现，咦，真是的业务系统自己慢呢，已经收到请求了，在某个环节慢，而且，把页面扔到其他系统进行访问却没问题：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2019-07-05 19:05:38.955 DEBUG [http-nio-8004-exec-3] InternalNioInputBuffer:180-- Received [GET /creditCard/cardBinInfo.json HTTP/1.1</span><br><span class=\"line\">Host: 192.168.46.3:8004</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">Upgrade-Insecure-Requests: 1</span><br><span class=\"line\">User-Agent: Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Mobile Safari/537.36</span><br><span class=\"line\">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class=\"line\">Accept-Encoding: gzip, deflate, sdch</span><br><span class=\"line\">Accept-Language: zh-CN,zh;q=0.8</span><br><span class=\"line\">Cookie: _csrf=c25ca56a-799f-4e23-b179-b09abaf7fa0e; cavyboss-session=40c8e4d0-0d09-4952-8812-93a1f44b0068; mpay-session=0714ad72-0e83-43d9-8b87-b002c34a71f3</span><br><span class=\"line\"></span><br><span class=\"line\">]</span><br><span class=\"line\">2019-07-05 19:05:38.956 DEBUG [http-nio-8004-exec-3] CoyoteAdapter:180-- The variable [uriBC] has value [/creditCard/cardBinInfo.json]</span><br><span class=\"line\">2019-07-05 19:05:38.957 DEBUG [http-nio-8004-exec-3] CoyoteAdapter:180-- The variable [semicolon] has value [-1]</span><br><span class=\"line\">2019-07-05 19:05:38.957 DEBUG [http-nio-8004-exec-3] CoyoteAdapter:180-- The variable [enc] has value [utf-8]</span><br><span class=\"line\">2019-07-05 19:05:42.640 DEBUG [http-nio-8004-exec-3] LegacyCookieProcessor:180-- Cookies: Parsing b[]: _csrf=c25ca56a-799f-4e23-b179-b09abaf7fa0e; cavyboss-session=40c8e4d0-0d09-4952-8812-93a1f44b0068; mpay-session=0714ad72-0e83-43d9-8b87-b002c34a71f3</span><br><span class=\"line\">2019-07-05 19:05:42.643 DEBUG [http-nio-8004-exec-3] CoyoteAdapter:180--  Requested cookie session id is 0714ad72-0e83-43d9-8b87-b002c34a71f3</span><br><span class=\"line\">2019-07-05 19:05:42.645 DEBUG [http-nio-8004-exec-3] RemoteIpValve:180-- Incoming request /creditCard/cardBinInfo.json with originalRemoteAddr &apos;192.168.47.152&apos;, originalRemoteHost=&apos;192.168.47.152&apos;, originalSecure=&apos;false&apos;, originalScheme=&apos;http&apos; will be seen as newRemoteAddr=&apos;192.168.47.152&apos;, newRemoteHost=&apos;192.168.47.152&apos;, newScheme=&apos;http&apos;, newSecure=&apos;false&apos;</span><br><span class=\"line\">2019-07-05 19:05:42.645 DEBUG [http-nio-8004-exec-3] AuthenticatorBase:180-- Security checking request GET /creditCard/cardBinInfo.json</span><br><span class=\"line\">2019-07-05 19:05:42.646 DEBUG [http-nio-8004-exec-3] RealmBase:180--   No applicable constraints defined</span><br><span class=\"line\">2019-07-05 19:05:42.646 DEBUG [http-nio-8004-exec-3] AuthenticatorBase:180--  Not subject to any constraint</span><br><span class=\"line\">2019-07-05 19:05:42.653 DEBUG [http-nio-8004-exec-3] OrderedRequestContextFilter:114-- Bound request context to thread: org.springframework.session.web.http.SessionRepositoryFilter$SessionRepositoryRequestWrapper@5edc7f61</span><br><span class=\"line\">2019-07-05 19:05:42.654 DEBUG [http-nio-8004-exec-3] DispatcherServlet:863-- DispatcherServlet with name &apos;dispatcherServlet&apos; processing GET request for [/creditCard/cardBinInfo.json]</span><br><span class=\"line\">2019-07-05 19:05:42.655 DEBUG [http-nio-8004-exec-3] Parameters:180-- Set encoding to UTF-8</span><br><span class=\"line\">2019-07-05 19:05:42.660 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:125-- Opening RedisConnection</span><br><span class=\"line\">2019-07-05 19:05:42.663 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:205-- Closing Redis Connection</span><br><span class=\"line\">2019-07-05 19:05:42.663 DEBUG [http-nio-8004-exec-3] EndpointHandlerMapping:301-- Looking up handler method for path /creditCard/cardBinInfo.json</span><br><span class=\"line\">2019-07-05 19:05:42.671 DEBUG [http-nio-8004-exec-3] EndpointHandlerMapping:311-- Did not find handler method for [/creditCard/cardBinInfo.json]</span><br><span class=\"line\">2019-07-05 19:05:42.671 DEBUG [http-nio-8004-exec-3] RequestMappingHandlerMapping:301-- Looking up handler method for path /creditCard/cardBinInfo.json</span><br><span class=\"line\">2019-07-05 19:05:42.692 DEBUG [http-nio-8004-exec-3] RequestMappingHandlerMapping:308-- Returning handler method [public java.lang.Object com.yiji.mobilepay.web.controller.CreditCardWithdrawControler.cardBinInfo(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.http.HttpSession)]</span><br><span class=\"line\">2019-07-05 19:05:42.692 DEBUG [http-nio-8004-exec-3] DefaultListableBeanFactory:251-- Returning cached instance of singleton bean &apos;creditCardWithdrawControler&apos;</span><br><span class=\"line\">2019-07-05 19:05:42.693 DEBUG [http-nio-8004-exec-3] DispatcherServlet:949-- Last-Modified value for [/creditCard/cardBinInfo.json] is: -1</span><br><span class=\"line\">2019-07-05 19:05:42.704 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:125-- Opening RedisConnection</span><br><span class=\"line\">2019-07-05 19:05:42.704 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:205-- Closing Redis Connection</span><br><span class=\"line\">2019-07-05 19:05:42.831 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     findResources(META-INF/services/com.alibaba.fastjson.serializer.AutowiredObjectSerializer)</span><br><span class=\"line\">2019-07-05 19:05:42.841 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:125-- Opening RedisConnection</span><br><span class=\"line\">2019-07-05 19:05:42.842 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:205-- Closing Redis Connection</span><br><span class=\"line\">2019-07-05 19:05:42.844 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:125-- Opening RedisConnection</span><br><span class=\"line\">2019-07-05 19:05:42.844 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:205-- Closing Redis Connection</span><br><span class=\"line\">2019-07-05 19:05:42.847 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:125-- Opening RedisConnection</span><br><span class=\"line\">2019-07-05 19:05:42.848 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:205-- Closing Redis Connection</span><br><span class=\"line\">2019-07-05 19:05:42.848 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:125-- Opening RedisConnection</span><br><span class=\"line\">2019-07-05 19:05:42.849 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:205-- Closing Redis Connection</span><br><span class=\"line\">2019-07-05 19:05:42.849 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:125-- Opening RedisConnection</span><br><span class=\"line\">2019-07-05 19:05:42.849 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:205-- Closing Redis Connection</span><br><span class=\"line\">2019-07-05 19:05:42.862 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     findClass(com.yjf.common.lang.result.ViewResultInfoBeanInfo)</span><br><span class=\"line\">2019-07-05 19:05:42.862 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     --&gt; Returning ClassNotFoundException</span><br><span class=\"line\">2019-07-05 19:05:42.866 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     findClass(com.yjf.common.lang.result.ViewResultInfoCustomizer)</span><br><span class=\"line\">2019-07-05 19:05:42.867 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     --&gt; Returning ClassNotFoundException</span><br><span class=\"line\">2019-07-05 19:05:42.869 DEBUG [dubbo-remoting-client-heartbeat-thread-1] HeartBeatTask:66--  [DUBBO] Send heartbeat to remote channel /192.168.46.3:20917, cause: The channel has no data-transmission exceeds a heartbeat period: 60000ms</span><br><span class=\"line\">2019-07-05 19:05:42.870 DEBUG [New I/O client worker #1-3] HeartbeatHandler:82--  [DUBBO] Receive heartbeat response in thread New I/O client worker #1-3</span><br><span class=\"line\">2019-07-05 19:05:42.874 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180-- getResource(Object.class)</span><br><span class=\"line\">2019-07-05 19:05:42.874 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   Delegating to parent classloader org.springframework.boot.loader.LaunchedURLClassLoader@11a9e7c8</span><br><span class=\"line\">2019-07-05 19:05:42.875 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     findResource(Object.class)</span><br><span class=\"line\">2019-07-05 19:05:42.876 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     --&gt; Resource not found, returning null</span><br><span class=\"line\">2019-07-05 19:05:42.876 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   --&gt; Resource not found, returning null</span><br><span class=\"line\">2019-07-05 19:05:42.877 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180-- getResource(String.class)</span><br><span class=\"line\">2019-07-05 19:05:42.878 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   Delegating to parent classloader org.springframework.boot.loader.LaunchedURLClassLoader@11a9e7c8</span><br><span class=\"line\">2019-07-05 19:05:42.879 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     findResource(String.class)</span><br><span class=\"line\">2019-07-05 19:05:42.879 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     --&gt; Resource not found, returning null</span><br><span class=\"line\">2019-07-05 19:05:42.880 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   --&gt; Resource not found, returning null</span><br><span class=\"line\">2019-07-05 19:05:42.881 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180-- getResource(StringBuilder.class)</span><br><span class=\"line\">2019-07-05 19:05:42.882 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   Delegating to parent classloader org.springframework.boot.loader.LaunchedURLClassLoader@11a9e7c8</span><br><span class=\"line\">2019-07-05 19:05:42.883 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     findResource(StringBuilder.class)</span><br><span class=\"line\">2019-07-05 19:05:42.883 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     --&gt; Resource not found, returning null</span><br><span class=\"line\">2019-07-05 19:05:42.884 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   --&gt; Resource not found, returning null</span><br><span class=\"line\">2019-07-05 19:05:42.887 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180-- getResource(com.class)</span><br><span class=\"line\">2019-07-05 19:05:42.887 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   Delegating to parent classloader org.springframework.boot.loader.LaunchedURLClassLoader@11a9e7c8</span><br><span class=\"line\">2019-07-05 19:05:42.888 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     findResource(com.class)</span><br><span class=\"line\">2019-07-05 19:05:42.889 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     --&gt; Resource not found, returning null</span><br><span class=\"line\">2019-07-05 19:05:42.889 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   --&gt; Resource not found, returning null</span><br><span class=\"line\">2019-07-05 19:05:42.890 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180-- getResource(java/lang/com.class)</span><br><span class=\"line\">2019-07-05 19:05:42.891 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   Delegating to parent classloader org.springframework.boot.loader.LaunchedURLClassLoader@11a9e7c8</span><br><span class=\"line\">2019-07-05 19:05:42.892 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     findResource(java/lang/com.class)</span><br><span class=\"line\">2019-07-05 19:05:42.892 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     --&gt; Resource not found, returning null</span><br><span class=\"line\">2019-07-05 19:05:42.893 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   --&gt; Resource not found, returning null</span><br><span class=\"line\">2019-07-05 19:05:42.894 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180-- getResource(com/yjf.class)</span><br><span class=\"line\">2019-07-05 19:05:42.894 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   Delegating to parent classloader org.springframework.boot.loader.LaunchedURLClassLoader@11a9e7c8</span><br><span class=\"line\">2019-07-05 19:05:42.895 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     findResource(com/yjf.class)</span><br><span class=\"line\">2019-07-05 19:05:42.896 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     --&gt; Resource not found, returning null</span><br><span class=\"line\">2019-07-05 19:05:42.896 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   --&gt; Resource not found, returning null</span><br><span class=\"line\">2019-07-05 19:05:42.897 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180-- getResource(com/yjf/common.class)</span><br><span class=\"line\">2019-07-05 19:05:42.898 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   Delegating to parent classloader org.springframework.boot.loader.LaunchedURLClassLoader@11a9e7c8</span><br><span class=\"line\">2019-07-05 19:05:42.899 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     findResource(com/yjf/common.class)</span><br><span class=\"line\">2019-07-05 19:05:42.899 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     --&gt; Resource not found, returning null</span><br><span class=\"line\">2019-07-05 19:05:42.900 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   --&gt; Resource not found, returning null</span><br><span class=\"line\">2019-07-05 19:05:42.901 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180-- getResource(com/yjf/common/util.class)</span><br><span class=\"line\">2019-07-05 19:05:42.901 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   Delegating to parent classloader org.springframework.boot.loader.LaunchedURLClassLoader@11a9e7c8</span><br><span class=\"line\">2019-07-05 19:05:42.902 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     findResource(com/yjf/common/util.class)</span><br><span class=\"line\">2019-07-05 19:05:42.903 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--     --&gt; Resource not found, returning null</span><br><span class=\"line\">2019-07-05 19:05:42.903 DEBUG [http-nio-8004-exec-3] WebappClassLoaderBase:180--   --&gt; Resource not found, returning null</span><br><span class=\"line\">2019-07-05 19:05:42.908 DEBUG [http-nio-8004-exec-3] ToString:550-- classloader:TomcatEmbeddedWebappClassLoader</span><br><span class=\"line\">  context: ROOT</span><br><span class=\"line\">  delegate: true</span><br><span class=\"line\">----------&gt; Parent Classloader:</span><br><span class=\"line\">org.springframework.boot.loader.LaunchedURLClassLoader@11a9e7c8</span><br><span class=\"line\"></span><br><span class=\"line\">2019-07-05 19:05:42.910 DEBUG [http-nio-8004-exec-3] RequestResponseBodyMethodProcessor:225-- Written [ViewResultInfo&#123;code=null,data=null,message=请通过网页正常步骤进行访问或者系统已超时,success=false&#125;] as &quot;application/json;charset=UTF-8&quot; using [com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter@3220bfbc]</span><br><span class=\"line\">2019-07-05 19:05:42.911 DEBUG [http-nio-8004-exec-3] DispatcherServlet:1036-- Null ModelAndView returned to DispatcherServlet with name &apos;dispatcherServlet&apos;: assuming HandlerAdapter completed request handling</span><br><span class=\"line\">2019-07-05 19:05:42.911 DEBUG [http-nio-8004-exec-3] DispatcherServlet:997-- Successfully completed request</span><br><span class=\"line\">2019-07-05 19:05:42.911 DEBUG [http-nio-8004-exec-3] OrderedRequestContextFilter:104-- Cleared thread-bound request context: org.springframework.session.web.http.SessionRepositoryFilter$SessionRepositoryRequestWrapper@5edc7f61</span><br><span class=\"line\">2019-07-05 19:05:42.912 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:125-- Opening RedisConnection</span><br><span class=\"line\">2019-07-05 19:05:42.912 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:205-- Closing Redis Connection</span><br><span class=\"line\">2019-07-05 19:05:42.912 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:125-- Opening RedisConnection</span><br><span class=\"line\">2019-07-05 19:05:42.913 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:205-- Closing Redis Connection</span><br><span class=\"line\">2019-07-05 19:05:42.913 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:125-- Opening RedisConnection</span><br><span class=\"line\">2019-07-05 19:05:42.913 DEBUG [http-nio-8004-exec-3] RedisConnectionUtils:205-- Closing Redis Connection</span><br></pre></td></tr></table></figure></p>\n<p>但是，这个环节去干什么了呢？源代码日志很少，看不出来呀！难道是分布式session问题，发现springboot分布式session我们内部是用redis实现的，后经一顿排查，发现上面日志中已经包含了redis的操作，但是是在慢的那个环节之后呀（不过提了个醒，以后redis要是抽风，这也是个风险点呢）。<br>k、现在知道问题就出在org.apache.catalina.connector.CoyoteAdapter这个类日志中显示的慢的那个环节了，但他究竟干了什么？貌似只是简单的一些操作啊，代码层次很深，今天也疲惫了，就没往深处看，为什么本地测试不出现问题？带着这些疑问，今天收班了。<br>l、今天本来是周六，但问题没解决，心有不甘呀，而且都能重现问题了，要是不定位到，好可惜。于是背着包来到了公司，反正今日无安排！来到公司，经过昨晚和今早放松了大脑，又准备整装待发了。本地不出问题，难道是打包环节不一样？两个私服不一致?于是我把测试环境的jar包拷了下来，java XXX -jar启动，咦，本地重现问题了！真是私服问题，包版本不一致？我又把本地项目用另一个私服打了jar包java XXX -jar启动，咦，问题也重现了，哦！原来是idea启动时候和java -jar有些区别（也许是classpath加载的区别吧），此处没深究，但很庆幸，本地重现问题，离问题定位再进一步<br>m、既然本地都重现问题了，虽然不能用idea断点测试，但我改改源码加加日志吧。ok！源码日志已加好，这下日志详细了吧，java XXX -jar启动，测试，啊！原来是这慢，还以为只是简单的map呢，被类名迷惑了：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2019-07-06 11:44:55.430 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- normaliztion start............................</span><br><span class=\"line\">2019-07-06 11:44:55.430 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- normaliztion end............................</span><br><span class=\"line\">2019-07-06 11:44:55.432 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- decodedURI start............................</span><br><span class=\"line\">2019-07-06 11:44:55.432 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- decodedURI end............................</span><br><span class=\"line\">2019-07-06 11:44:55.432 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- check normaliztion start............................</span><br><span class=\"line\">2019-07-06 11:44:55.432 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- check normaliztion end............................</span><br><span class=\"line\">2019-07-06 11:44:55.433 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- check getUseIPVHosts start............................&#123;&#125;false</span><br><span class=\"line\">2019-07-06 11:44:55.433 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- check getUseIPVHosts end............................&#123;&#125;localhost</span><br><span class=\"line\">2019-07-06 11:44:55.433 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- check mapreu start............................&#123;&#125;</span><br><span class=\"line\">2019-07-06 11:45:00.570 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- check mapreu end............................&#123;&#125;</span><br><span class=\"line\">2019-07-06 11:45:00.570 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- check session start1............................&#123;&#125;</span><br><span class=\"line\">2019-07-06 11:45:00.570 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- check session start4............................&#123;&#125;</span><br><span class=\"line\">2019-07-06 11:45:00.571 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- check session start5............................&#123;&#125;</span><br><span class=\"line\">2019-07-06 11:45:00.571 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- check session start6............................&#123;&#125;</span><br><span class=\"line\">2019-07-06 11:45:00.571 INFO  [http-nio-8004-exec-13] CoyoteAdapter:180-- check session start7............................&#123;&#125;</span><br></pre></td></tr></table></figure></p>\n<p>源码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// This will map the the latest version by default</span><br><span class=\"line\">            connector.getService().getMapper().map(serverName, decodedURI,</span><br><span class=\"line\">                    version, request.getMappingData());</span><br></pre></td></tr></table></figure></p>\n<p>此时内心激动，问题似乎更清晰了，打开idea，断点调试，往里面跟，发现了一个gateway页面，咦，这是我们自定义的页面，全项目搜索一下，它干啥了！<br>源码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// Rule 1 -- Exact Match</span><br><span class=\"line\">       MappedWrapper[] exactWrappers = contextVersion.exactWrappers;</span><br><span class=\"line\">       internalMapExactWrapper(exactWrappers, path, mappingData);</span><br><span class=\"line\"></span><br><span class=\"line\">       // Rule 2 -- Prefix Match</span><br><span class=\"line\">       boolean checkJspWelcomeFiles = false;</span><br><span class=\"line\">       MappedWrapper[] wildcardWrappers = contextVersion.wildcardWrappers;</span><br><span class=\"line\">       if (mappingData.wrapper == null) &#123;</span><br><span class=\"line\">           internalMapWildcardWrapper(wildcardWrappers, contextVersion.nesting,</span><br><span class=\"line\">                                      path, mappingData);</span><br></pre></td></tr></table></figure></p>\n<p>包含gateway的代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">public class StargateConfigration &#123;</span><br><span class=\"line\">\t@Bean</span><br><span class=\"line\">\tpublic ServletRegistrationBean dispatcherRegistration(StargateDispachServlet stargateDispachServlet) &#123;</span><br><span class=\"line\">\t    ServletRegistrationBean registration = new ServletRegistrationBean(</span><br><span class=\"line\">\t    \t\tstargateDispachServlet);</span><br><span class=\"line\">\t    registration.addUrlMappings(&quot;/gateway&quot;);</span><br><span class=\"line\">\t    return registration;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure></p>\n<p>咦，servlet，我顿时想起以前好像我们的spring-boot专门做了对jsp的支持，于是来到我们的tomcat-staters，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">@Bean(name = &quot;yijiEmbeddedServletContainerCustomizer&quot;)</span><br><span class=\"line\">public EmbeddedServletContainerCustomizer embeddedServletContainerCustomizer() &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\treturn container -&gt; &#123;</span><br><span class=\"line\">\t\t//1. disable jsp if possible</span><br><span class=\"line\">\t\tif (!tomcatProperties.getJsp().isEnable()) &#123;</span><br><span class=\"line\">\t\t\tJspServlet jspServlet = new JspServlet();</span><br><span class=\"line\">\t\t\tjspServlet.setRegistered(false);</span><br><span class=\"line\">\t\t\tcontainer.setJspServlet(jspServlet);</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure></p>\n<p>难道是M系统启用了yiji.tomcat.jsp.enable=true？通过线上系统变量搜索，发现，确实，M启用了，其他系统没有，恍然大悟，这就是为什么M有问题而其他系统没问题的原因吧！于是我java -Dyiji.tomcat.jsp.enable=false -jar M，测试，果然，不慢了。。。问题终于定位到，spring-boot本身不推荐jsp，但提供了支持，这说明本身支持的方式就存在性能问题！<br>n、嗯，接下来，下掉jsp吧，本来这就是遗留问题，传统项目采用jsp，切换springboot后强行支持了jsp，但却有性能问题！还有安全漏洞！</p>\n<p>下面说说spring-boot如何支持jsp吧。其实就是多注册一个JspServlet!<br>1、添加依赖<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt;</span><br><span class=\"line\">            &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br><span class=\"line\">        &lt;dependency&gt;</span><br><span class=\"line\">            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class=\"line\">            &lt;artifactId&gt;jstl&lt;/artifactId&gt;</span><br><span class=\"line\">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>\n<p>2、配置文件中指定jsp文件存放路径<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#路径,在webapp文件夹下新建文件夹WEB-INF,在往下建文件夹jsp</span><br><span class=\"line\">spring.mvc.view.prefix=/WEB-INF/jsp/</span><br><span class=\"line\">#文件名的后缀,例如:index.jsp,放在jsp文件夹下</span><br><span class=\"line\">spring.mvc.view.suffix=.jsp</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"\\images\\pasted-91.png\" alt=\"upload successful\"><br>3、作为框架，我们默认不支持jsp，因为有性能损耗<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (!tomcatProperties.getJsp().isEnable()) &#123;</span><br><span class=\"line\">\t\t\t\tJspServlet jspServlet = new JspServlet();</span><br><span class=\"line\">\t\t\t\tjspServlet.setRegistered(false);</span><br><span class=\"line\">\t\t\t\tcontainer.setJspServlet(jspServlet);</span><br><span class=\"line\">\t\t\t&#125;</span><br></pre></td></tr></table></figure></p>\n<p>4、业务系统根据自身情况决定是否启动jsp支持，启用，意味着接受性能损耗！</p>\n<p>心得：<br>  本地问题分析历史2天半（中途很多时间在处理其他事情），心理感受颇多，分析线上类似问题一定要思路清晰，类似问题，先网路再应用，另外一定要有主线，如果能本地重现问题，那可是天大的好事，源码跟踪，源码添加日志可有效帮我们分析问题，总之，分析跨系统、跨部门、框架级问题时，协作、心态很重要！</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck3e5th270008p966e43kl769","category_id":"ck3e5th240005p9664g78lh1t","_id":"ck3e5th2c000ep966nquy1dqe"},{"post_id":"ck3e5th1y0001p966fmrqq58t","category_id":"ck3e5th240005p9664g78lh1t","_id":"ck3e5th2d000ip9660cqhdfpo"},{"post_id":"ck3e5th280009p966k1e1kajg","category_id":"ck3e5th240005p9664g78lh1t","_id":"ck3e5th2e000lp966xncy7rnk"},{"post_id":"ck3e5th2a000cp966v8j68aor","category_id":"ck3e5th240005p9664g78lh1t","_id":"ck3e5th2f000pp9660nockcyj"},{"post_id":"ck3e5th220003p9663y7zx6a0","category_id":"ck3e5th240005p9664g78lh1t","_id":"ck3e5th2g000sp966uhevqfzm"},{"post_id":"ck3e5th2b000dp9668dn55cj0","category_id":"ck3e5th240005p9664g78lh1t","_id":"ck3e5th2h000vp966ucl8zxag"},{"post_id":"ck3e5th2d000hp9663dsevwv7","category_id":"ck3e5th240005p9664g78lh1t","_id":"ck3e5th2h000yp966ji3m3zbq"},{"post_id":"ck3e5th260007p966glanqop4","category_id":"ck3e5th240005p9664g78lh1t","_id":"ck3e5th2i0010p966od0j0mr4"},{"post_id":"ck3e5th2g000up966rb8gjx4j","category_id":"ck3e5th240005p9664g78lh1t","_id":"ck3e5th2j0014p966sm9rmtwu"},{"post_id":"ck3e5th2e000kp966tjwkwbek","category_id":"ck3e5th2f000qp9661kwtnqh7","_id":"ck3e5th2k0017p966tqmo8lj6"},{"post_id":"ck3e5th2h000wp966tbhwnhxq","category_id":"ck3e5th2f000qp9661kwtnqh7","_id":"ck3e5th2l001bp966aacw1k05"},{"post_id":"ck3e5th2i000zp966cicmvee7","category_id":"ck3e5th240005p9664g78lh1t","_id":"ck3e5th2m001dp9665gokxxf7"},{"post_id":"ck3e5th2f000op966jatq26aw","category_id":"ck3e5th2f000qp9661kwtnqh7","_id":"ck3e5th2n001gp966k3f8nthv"},{"post_id":"ck3e5th2j0013p966moqdqeus","category_id":"ck3e5th240005p9664g78lh1t","_id":"ck3e5th2n001ip966d9npytb1"},{"post_id":"ck3e5th2j0016p966ncuifriy","category_id":"ck3e5th2f000qp9661kwtnqh7","_id":"ck3e5th2o001mp9669w4sp607"},{"post_id":"ck3e5th2k001ap966hpb5fgmd","category_id":"ck3e5th2f000qp9661kwtnqh7","_id":"ck3e5th2p001pp966xgo05chc"},{"post_id":"ck3e5th2l001cp966vdytjt9l","category_id":"ck3e5th240005p9664g78lh1t","_id":"ck3e5th2q001tp966bkmng81y"},{"post_id":"ck3e5th2m001fp966dzqlef4f","category_id":"ck3e5th240005p9664g78lh1t","_id":"ck3e5th2q001wp966a06u917j"},{"post_id":"ck3e5th2n001hp966bjajzkxq","category_id":"ck3e5th240005p9664g78lh1t","_id":"ck3e5th2r0020p966vpwn5wkk"},{"post_id":"ck3e5th2o001lp966evhdns57","category_id":"ck3e5th240005p9664g78lh1t","_id":"ck3e5th2s0022p966j1nhqzuv"},{"post_id":"ck3e5th2p001op966bhrsu3jm","category_id":"ck3e5th2f000qp9661kwtnqh7","_id":"ck3e5th2t0025p966q9mtqfkc"},{"post_id":"ck3e5th2p001sp966cfe2wv07","category_id":"ck3e5th240005p9664g78lh1t","_id":"ck3e5th2t0027p966h33dvrr6"},{"post_id":"ck3e5th2q001vp966hhvyhpel","category_id":"ck3e5th240005p9664g78lh1t","_id":"ck3e5th2u002ap966hv0e7h4e"},{"post_id":"ck3e5th2r001zp966fcfle4n5","category_id":"ck3e5th2f000qp9661kwtnqh7","_id":"ck3e5th2v002dp966rf58fwc3"},{"post_id":"ck3e5th2r0021p966ee8psmk7","category_id":"ck3e5th2f000qp9661kwtnqh7","_id":"ck3e5th2w002gp966xt1jk1xb"},{"post_id":"ck3e5th2s0024p966jdjzjtuu","category_id":"ck3e5th240005p9664g78lh1t","_id":"ck3e5th2w002kp966nn32fa0z"},{"post_id":"ck3e5th2t0026p9661rujmq0k","category_id":"ck3e5th2f000qp9661kwtnqh7","_id":"ck3e5th2x002np9664loo7ey8"},{"post_id":"ck3e5th2u0029p966ns6jcddg","category_id":"ck3e5th240005p9664g78lh1t","_id":"ck3e5th2y002qp966b4w7t8y4"},{"post_id":"ck3e5th2u002cp966o3t3hkwj","category_id":"ck3e5th2f000qp9661kwtnqh7","_id":"ck3e5th2z002tp966q1qmo15q"},{"post_id":"ck3e5th2w002jp966ftcf6t6q","category_id":"ck3e5th2f000qp9661kwtnqh7","_id":"ck3e5th30002xp966lkfxytdm"},{"post_id":"ck3e5th2x002mp9665hpycbwh","category_id":"ck3e5th2f000qp9661kwtnqh7","_id":"ck3e5th31002zp966p5f3jfra"},{"post_id":"ck3e5th2y002pp9663qqqbr2d","category_id":"ck3e5th240005p9664g78lh1t","_id":"ck3e5th320031p966n1w1hxfa"},{"post_id":"ck3e5th2v002fp966ow63rg6k","category_id":"ck3e5th2x002lp966e2hcvceg","_id":"ck3e5th320032p9663lxhcq3p"},{"post_id":"ck3e5th2z002sp966gj7fp1e0","category_id":"ck3e5th240005p9664g78lh1t","_id":"ck3e5th320033p9664qbk143l"},{"post_id":"ck3e5th7f005wp966sagat8hf","category_id":"ck3e5th240005p9664g78lh1t","_id":"ck3e5th7j0063p966ve3ik7tt"},{"post_id":"ck3e5th7h005yp966i6bk6djh","category_id":"ck3e5th2f000qp9661kwtnqh7","_id":"ck3e5th7j0065p966i7j1oo77"},{"post_id":"ck3e5th80006ap96658cq7vhp","category_id":"ck3e5th2f000qp9661kwtnqh7","_id":"ck3e5th82006fp966ut8jldei"},{"post_id":"ck3e5th81006dp966p59qk9v7","category_id":"ck3e5th2x002lp966e2hcvceg","_id":"ck3e5th82006ip966zs4oou0d"},{"post_id":"ck3e5th800069p966mxhilkzo","category_id":"ck3e5th81006bp966y9yznb32","_id":"ck3e5th83006kp96685fhxar2"},{"post_id":"ck3e5th8p006qp96653se88cc","category_id":"ck3e5th2f000qp9661kwtnqh7","_id":"ck3e5th8q006sp966i9lxsl53"}],"PostTag":[{"post_id":"ck3e5th1y0001p966fmrqq58t","tag_id":"ck3e5th250006p9669qlnbt3d","_id":"ck3e5th2d000jp966eapfse2x"},{"post_id":"ck3e5th1y0001p966fmrqq58t","tag_id":"ck3e5th29000bp966qw0pr6t7","_id":"ck3e5th2e000mp966ho91f6s0"},{"post_id":"ck3e5th220003p9663y7zx6a0","tag_id":"ck3e5th2d000gp966by3s07fn","_id":"ck3e5th2i0012p966nzaihcrb"},{"post_id":"ck3e5th220003p9663y7zx6a0","tag_id":"ck3e5th2e000np9664mag6g7v","_id":"ck3e5th2j0015p966qbe7u562"},{"post_id":"ck3e5th220003p9663y7zx6a0","tag_id":"ck3e5th2g000tp9662wz3zo5d","_id":"ck3e5th2k0019p966jrf0cdbs"},{"post_id":"ck3e5th260007p966glanqop4","tag_id":"ck3e5th2d000gp966by3s07fn","_id":"ck3e5th2o001kp966ucsyf4p7"},{"post_id":"ck3e5th260007p966glanqop4","tag_id":"ck3e5th2e000np9664mag6g7v","_id":"ck3e5th2o001np966jfoeup40"},{"post_id":"ck3e5th260007p966glanqop4","tag_id":"ck3e5th2g000tp9662wz3zo5d","_id":"ck3e5th2p001rp966jdmrgn2p"},{"post_id":"ck3e5th270008p966e43kl769","tag_id":"ck3e5th2e000np9664mag6g7v","_id":"ck3e5th2q001up96698xjwtbs"},{"post_id":"ck3e5th270008p966e43kl769","tag_id":"ck3e5th250006p9669qlnbt3d","_id":"ck3e5th2r001yp966nrruwlp5"},{"post_id":"ck3e5th280009p966k1e1kajg","tag_id":"ck3e5th2p001qp966kcfvskph","_id":"ck3e5th2u002bp9667bjvcmi6"},{"post_id":"ck3e5th280009p966k1e1kajg","tag_id":"ck3e5th2r001xp966ir834x69","_id":"ck3e5th2v002ep966yclcishq"},{"post_id":"ck3e5th280009p966k1e1kajg","tag_id":"ck3e5th2s0023p96609ecxfot","_id":"ck3e5th2w002ip966ntpik5kt"},{"post_id":"ck3e5th2a000cp966v8j68aor","tag_id":"ck3e5th2t0028p966otelxufs","_id":"ck3e5th2y002rp966x26ixzjf"},{"post_id":"ck3e5th2a000cp966v8j68aor","tag_id":"ck3e5th2w002hp966yr07nxd6","_id":"ck3e5th2z002up966zvbhbsrr"},{"post_id":"ck3e5th2b000dp9668dn55cj0","tag_id":"ck3e5th2y002op966abg6cb3j","_id":"ck3e5th30002yp966805k3czx"},{"post_id":"ck3e5th2d000hp9663dsevwv7","tag_id":"ck3e5th2z002vp966rm87kune","_id":"ck3e5th320036p966glijchxx"},{"post_id":"ck3e5th2d000hp9663dsevwv7","tag_id":"ck3e5th310030p966gxzvzljp","_id":"ck3e5th330037p9666l5nunp4"},{"post_id":"ck3e5th2d000hp9663dsevwv7","tag_id":"ck3e5th320034p966iry0ccsx","_id":"ck3e5th330039p9660zy99hr4"},{"post_id":"ck3e5th2e000kp966tjwkwbek","tag_id":"ck3e5th320034p966iry0ccsx","_id":"ck3e5th33003bp966jtnmxty7"},{"post_id":"ck3e5th2e000kp966tjwkwbek","tag_id":"ck3e5th330038p9669yq1ikcu","_id":"ck3e5th33003cp966jl25iggz"},{"post_id":"ck3e5th2f000op966jatq26aw","tag_id":"ck3e5th33003ap966gz749uen","_id":"ck3e5th34003gp966jwwcq0q6"},{"post_id":"ck3e5th2f000op966jatq26aw","tag_id":"ck3e5th33003dp966qdxdspf5","_id":"ck3e5th34003hp966pr88wxuo"},{"post_id":"ck3e5th2f000op966jatq26aw","tag_id":"ck3e5th33003ep966ftbbzlk1","_id":"ck3e5th34003jp966eeighzfs"},{"post_id":"ck3e5th2f000rp966ig357u6y","tag_id":"ck3e5th33003fp9660x0zt8ul","_id":"ck3e5th34003kp9664vti4q8n"},{"post_id":"ck3e5th2g000up966rb8gjx4j","tag_id":"ck3e5th33003ap966gz749uen","_id":"ck3e5th35003np966pa9ggsiy"},{"post_id":"ck3e5th2g000up966rb8gjx4j","tag_id":"ck3e5th34003lp9667m52y0lt","_id":"ck3e5th35003op966egr1qvsm"},{"post_id":"ck3e5th2h000wp966tbhwnhxq","tag_id":"ck3e5th33003ap966gz749uen","_id":"ck3e5th36003rp9667ehr29sr"},{"post_id":"ck3e5th2h000wp966tbhwnhxq","tag_id":"ck3e5th33003dp966qdxdspf5","_id":"ck3e5th36003sp9662hfzbf5u"},{"post_id":"ck3e5th2i000zp966cicmvee7","tag_id":"ck3e5th35003qp966a7r272hv","_id":"ck3e5th36003vp9660q3ptos5"},{"post_id":"ck3e5th2i000zp966cicmvee7","tag_id":"ck3e5th36003tp966hswf5tl5","_id":"ck3e5th36003wp966gs9feqby"},{"post_id":"ck3e5th2j0013p966moqdqeus","tag_id":"ck3e5th36003up966ouur3bcn","_id":"ck3e5th37003zp9669o2mvbrg"},{"post_id":"ck3e5th2j0013p966moqdqeus","tag_id":"ck3e5th36003xp9664pqbmkem","_id":"ck3e5th370040p966wzlwkdgf"},{"post_id":"ck3e5th2j0016p966ncuifriy","tag_id":"ck3e5th36003yp966dth8prke","_id":"ck3e5th380043p96671jbrloj"},{"post_id":"ck3e5th2j0016p966ncuifriy","tag_id":"ck3e5th370041p96605cv9vk9","_id":"ck3e5th380044p966g2ye0sou"},{"post_id":"ck3e5th2k001ap966hpb5fgmd","tag_id":"ck3e5th36003yp966dth8prke","_id":"ck3e5th390048p966xkp3nmz1"},{"post_id":"ck3e5th2k001ap966hpb5fgmd","tag_id":"ck3e5th380045p96643o5qrvq","_id":"ck3e5th390049p96695h7nd0p"},{"post_id":"ck3e5th2k001ap966hpb5fgmd","tag_id":"ck3e5th390046p9666y44nzos","_id":"ck3e5th39004bp9661hbum6q2"},{"post_id":"ck3e5th2l001cp966vdytjt9l","tag_id":"ck3e5th390047p9665da8g6pc","_id":"ck3e5th3a004dp9665xa706fs"},{"post_id":"ck3e5th2l001cp966vdytjt9l","tag_id":"ck3e5th39004ap9669fs59kjk","_id":"ck3e5th3a004ep966qehp83i4"},{"post_id":"ck3e5th2m001fp966dzqlef4f","tag_id":"ck3e5th39004cp966nmvem7w2","_id":"ck3e5th3a004gp966khpey5e6"},{"post_id":"ck3e5th2n001hp966bjajzkxq","tag_id":"ck3e5th39004cp966nmvem7w2","_id":"ck3e5th3b004ip966vcmq3ipj"},{"post_id":"ck3e5th2o001lp966evhdns57","tag_id":"ck3e5th39004cp966nmvem7w2","_id":"ck3e5th3b004kp966ziqr8boh"},{"post_id":"ck3e5th2p001op966bhrsu3jm","tag_id":"ck3e5th310030p966gxzvzljp","_id":"ck3e5th3b004np966ch5ox7o4"},{"post_id":"ck3e5th2p001op966bhrsu3jm","tag_id":"ck3e5th3b004lp966ykqz2sef","_id":"ck3e5th3b004op96609j32s17"},{"post_id":"ck3e5th2p001sp966cfe2wv07","tag_id":"ck3e5th39004cp966nmvem7w2","_id":"ck3e5th3c004rp966vingu1p4"},{"post_id":"ck3e5th2p001sp966cfe2wv07","tag_id":"ck3e5th3c004pp9662a5tbnfe","_id":"ck3e5th3c004sp966kp3qpb0e"},{"post_id":"ck3e5th2q001vp966hhvyhpel","tag_id":"ck3e5th3c004qp966bvzug9ci","_id":"ck3e5th3c004vp966lhvlq0wl"},{"post_id":"ck3e5th2q001vp966hhvyhpel","tag_id":"ck3e5th310030p966gxzvzljp","_id":"ck3e5th3c004wp9667owxp55f"},{"post_id":"ck3e5th2r001zp966fcfle4n5","tag_id":"ck3e5th3c004up966q6pfk10w","_id":"ck3e5th3d004zp966qfvse2vh"},{"post_id":"ck3e5th2r001zp966fcfle4n5","tag_id":"ck3e5th3c004xp966aysqln2g","_id":"ck3e5th3d0050p966bqijpxk1"},{"post_id":"ck3e5th2r0021p966ee8psmk7","tag_id":"ck3e5th3c004qp966bvzug9ci","_id":"ck3e5th3e0053p966m32nze6t"},{"post_id":"ck3e5th2r0021p966ee8psmk7","tag_id":"ck3e5th330038p9669yq1ikcu","_id":"ck3e5th3e0054p966i5e5r557"},{"post_id":"ck3e5th2s0024p966jdjzjtuu","tag_id":"ck3e5th3d0052p966vnmrcerd","_id":"ck3e5th3e0056p966p7mwptec"},{"post_id":"ck3e5th2t0026p9661rujmq0k","tag_id":"ck3e5th34003lp9667m52y0lt","_id":"ck3e5th3e0058p966u0u2ky3r"},{"post_id":"ck3e5th2u0029p966ns6jcddg","tag_id":"ck3e5th3e0057p966qdod7zwb","_id":"ck3e5th3f005cp966x6ygo8r3"},{"post_id":"ck3e5th2u0029p966ns6jcddg","tag_id":"ck3e5th3f0059p9661d15cj7z","_id":"ck3e5th3f005dp96625vllt5s"},{"post_id":"ck3e5th2u0029p966ns6jcddg","tag_id":"ck3e5th3f005ap966l9pq0xvk","_id":"ck3e5th3f005fp966f94pitzl"},{"post_id":"ck3e5th2u002cp966o3t3hkwj","tag_id":"ck3e5th36003yp966dth8prke","_id":"ck3e5th3g005ip9667vj33e4t"},{"post_id":"ck3e5th2u002cp966o3t3hkwj","tag_id":"ck3e5th3f005ep9661vjxmxk9","_id":"ck3e5th3g005jp9660hwo4wi9"},{"post_id":"ck3e5th2u002cp966o3t3hkwj","tag_id":"ck3e5th3f005gp966fcd2ys1w","_id":"ck3e5th3g005lp966kpoald33"},{"post_id":"ck3e5th2v002fp966ow63rg6k","tag_id":"ck3e5th33003ap966gz749uen","_id":"ck3e5th3g005np96603g084tf"},{"post_id":"ck3e5th2v002fp966ow63rg6k","tag_id":"ck3e5th3g005kp9665dqsekmg","_id":"ck3e5th3g005op966nmebml56"},{"post_id":"ck3e5th2w002jp966ftcf6t6q","tag_id":"ck3e5th3g005mp966j1x1djh8","_id":"ck3e5th3h005qp966qw8ppd9j"},{"post_id":"ck3e5th2x002mp9665hpycbwh","tag_id":"ck3e5th310030p966gxzvzljp","_id":"ck3e5th3h005sp966toza5r0s"},{"post_id":"ck3e5th2y002pp9663qqqbr2d","tag_id":"ck3e5th3h005rp966oawd6vx7","_id":"ck3e5th3h005up966kwjq7fgx"},{"post_id":"ck3e5th2z002sp966gj7fp1e0","tag_id":"ck3e5th3h005tp966vubspxeo","_id":"ck3e5th3h005vp966dhrr3hi0"},{"post_id":"ck3e5th7f005wp966sagat8hf","tag_id":"ck3e5th2d000gp966by3s07fn","_id":"ck3e5th7i0060p966oilj39a4"},{"post_id":"ck3e5th7f005wp966sagat8hf","tag_id":"ck3e5th2e000np9664mag6g7v","_id":"ck3e5th7j0062p9662ynas0bb"},{"post_id":"ck3e5th7f005wp966sagat8hf","tag_id":"ck3e5th2g000tp9662wz3zo5d","_id":"ck3e5th7j0064p966juufudd7"},{"post_id":"ck3e5th7h005yp966i6bk6djh","tag_id":"ck3e5th7j0061p966u2nshfz6","_id":"ck3e5th7l0067p966u2bm9bb9"},{"post_id":"ck3e5th7h005yp966i6bk6djh","tag_id":"ck3e5th7k0066p966demkut9i","_id":"ck3e5th7l0068p966c63du4lj"},{"post_id":"ck3e5th80006ap96658cq7vhp","tag_id":"ck3e5th310030p966gxzvzljp","_id":"ck3e5th82006ep966vqu60624"},{"post_id":"ck3e5th800069p966mxhilkzo","tag_id":"ck3e5th29000bp966qw0pr6t7","_id":"ck3e5th82006hp966amzrhqj3"},{"post_id":"ck3e5th800069p966mxhilkzo","tag_id":"ck3e5th81006cp9668p7gzsqj","_id":"ck3e5th83006jp966vlwjzn2o"},{"post_id":"ck3e5th81006dp966p59qk9v7","tag_id":"ck3e5th2e000np9664mag6g7v","_id":"ck3e5th83006mp966qconnggr"},{"post_id":"ck3e5th81006dp966p59qk9v7","tag_id":"ck3e5th82006gp966gcsg1qui","_id":"ck3e5th83006np9669edpxocs"},{"post_id":"ck3e5th81006dp966p59qk9v7","tag_id":"ck3e5th370041p96605cv9vk9","_id":"ck3e5th83006op96653lgfil4"},{"post_id":"ck3e5th81006dp966p59qk9v7","tag_id":"ck3e5th83006lp966z9w0v5t0","_id":"ck3e5th83006pp966ibmfdyg4"},{"post_id":"ck3e5th8p006qp96653se88cc","tag_id":"ck3e5th8q006rp966sr6wcr9e","_id":"ck3e5th8r006up966m1htxfeg"},{"post_id":"ck3e5th8p006qp96653se88cc","tag_id":"ck3e5th8q006tp966nao0un4s","_id":"ck3e5th8r006vp966js4n5yjb"}],"Tag":[{"name":"类加载","_id":"ck3e5th250006p9669qlnbt3d"},{"name":"javaagent","_id":"ck3e5th29000bp966qw0pr6t7"},{"name":"GC-G1","_id":"ck3e5th2d000gp966by3s07fn"},{"name":"JVM","_id":"ck3e5th2e000np9664mag6g7v"},{"name":"GC","_id":"ck3e5th2g000tp9662wz3zo5d"},{"name":"HttpURLConnection","_id":"ck3e5th2p001qp966kcfvskph"},{"name":"HttpRequestMethodNotSupportedException","_id":"ck3e5th2r001xp966ir834x69"},{"name":"post/get请求","_id":"ck3e5th2s0023p96609ecxfot"},{"name":"NoClassDefFoundError","_id":"ck3e5th2t0028p966otelxufs"},{"name":"类加载异常","_id":"ck3e5th2w002hp966yr07nxd6"},{"name":"disruptor","_id":"ck3e5th2y002op966abg6cb3j"},{"name":"数据库连接池","_id":"ck3e5th2z002vp966rm87kune"},{"name":"db","_id":"ck3e5th310030p966gxzvzljp"},{"name":"druid","_id":"ck3e5th320034p966iry0ccsx"},{"name":"连接池","_id":"ck3e5th330038p9669yq1ikcu"},{"name":"dubbo","_id":"ck3e5th33003ap966gz749uen"},{"name":"序列化","_id":"ck3e5th33003dp966qdxdspf5"},{"name":"hessian","_id":"ck3e5th33003ep966ftbbzlk1"},{"name":"grafana","_id":"ck3e5th33003fp9660x0zt8ul"},{"name":"zookeeper","_id":"ck3e5th34003lp9667m52y0lt"},{"name":"elk","_id":"ck3e5th35003qp966a7r272hv"},{"name":"集群","_id":"ck3e5th36003tp966hswf5tl5"},{"name":"git","_id":"ck3e5th36003up966ouur3bcn"},{"name":"版本控制","_id":"ck3e5th36003xp9664pqbmkem"},{"name":"java","_id":"ck3e5th36003yp966dth8prke"},{"name":"java对象","_id":"ck3e5th370041p96605cv9vk9"},{"name":"jdk8","_id":"ck3e5th380045p96643o5qrvq"},{"name":"dump","_id":"ck3e5th390046p9666y44nzos"},{"name":"linux","_id":"ck3e5th390047p9665da8g6pc"},{"name":"tail","_id":"ck3e5th39004ap9669fs59kjk"},{"name":"maven","_id":"ck3e5th39004cp966nmvem7w2"},{"name":"mongo","_id":"ck3e5th3b004lp966ykqz2sef"},{"name":"jdk","_id":"ck3e5th3c004pp9662a5tbnfe"},{"name":"mysql","_id":"ck3e5th3c004qp966bvzug9ci"},{"name":"rabbitmq","_id":"ck3e5th3c004up966q6pfk10w"},{"name":"消息队列","_id":"ck3e5th3c004xp966aysqln2g"},{"name":"struts2","_id":"ck3e5th3d0052p966vnmrcerd"},{"name":"spring","_id":"ck3e5th3e0057p966qdod7zwb"},{"name":"springboot","_id":"ck3e5th3f0059p9661d15cj7z"},{"name":"应用监控检查","_id":"ck3e5th3f005ap966l9pq0xvk"},{"name":"内存泄漏","_id":"ck3e5th3f005ep9661vjxmxk9"},{"name":"mat","_id":"ck3e5th3f005gp966fcd2ys1w"},{"name":"微服务","_id":"ck3e5th3g005kp9665dqsekmg"},{"name":"优雅停机","_id":"ck3e5th3g005mp966j1x1djh8"},{"name":"浏览器","_id":"ck3e5th3h005rp966oawd6vx7"},{"name":"架构","_id":"ck3e5th3h005tp966vubspxeo"},{"name":"图片压缩","_id":"ck3e5th7j0061p966u2nshfz6"},{"name":"ImageIO","_id":"ck3e5th7k0066p966demkut9i"},{"name":"bytebuddy","_id":"ck3e5th81006cp9668p7gzsqj"},{"name":"内存调优","_id":"ck3e5th82006gp966gcsg1qui"},{"name":"垃圾回收","_id":"ck3e5th83006lp966z9w0v5t0"},{"name":"spring-boot","_id":"ck3e5th8q006rp966sr6wcr9e"},{"name":"jsp","_id":"ck3e5th8q006tp966nao0un4s"}]}}